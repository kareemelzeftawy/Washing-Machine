

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jun 07 08:58:54 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61  0000                     
    62                           ; Version 1.41
    63                           ; Generated 25/01/2017 GMT
    64                           ; 
    65                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataCOMRAM
    98  00E3D0                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _cycl
   102  00E3D0  0001               	dw	1
   103                           
   104                           	psect	mediumconst
   105  00FEF0                     __pmediumconst:
   106                           	opt stack 0
   107  00FEF0  00                 	db	0
   108  00FEF1                     _dpowers:
   109                           	opt stack 0
   110  00FEF1  0001               	dw	1
   111  00FEF3  0000               	dw	0
   112  00FEF5  000A               	dw	10
   113  00FEF7  0000               	dw	0
   114  00FEF9  0064               	dw	100
   115  00FEFB  0000               	dw	0
   116  00FEFD  03E8               	dw	1000
   117  00FEFF  0000               	dw	0
   118  00FF01  2710               	dw	10000
   119  00FF03  0000               	dw	0
   120  00FF05  86A0               	dw	34464
   121  00FF07  0001               	dw	1
   122  00FF09  4240               	dw	16960
   123  00FF0B  000F               	dw	15
   124  00FF0D  9680               	dw	38528
   125  00FF0F  0098               	dw	152
   126  00FF11  E100               	dw	57600
   127  00FF13  05F5               	dw	1525
   128  00FF15  CA00               	dw	51712
   129  00FF17  3B9A               	dw	15258
   130  00FF19                     __end_of_dpowers:
   131                           	opt stack 0
   132  0000                     _PORTEbits	set	3972
   133  0000                     _PORTD	set	3971
   134  0000                     _LATEbits	set	3981
   135  0000                     _LATCbits	set	3979
   136  0000                     _LATBbits	set	3978
   137  0000                     _PORTAbits	set	3968
   138  0000                     _PORTBbits	set	3969
   139  0000                     _ADRESH	set	4036
   140  0000                     _ADRESL	set	4035
   141  0000                     _ADCON0bits	set	4034
   142  0000                     _ADCON2	set	4032
   143  0000                     _ADCON1	set	4033
   144  0000                     _ADCON0	set	4034
   145  0000                     _LATE	set	3981
   146  0000                     _LATD	set	3980
   147  0000                     _LATC	set	3979
   148  0000                     _LATB	set	3978
   149  0000                     _LATA	set	3977
   150  0000                     _TRISE	set	3990
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISB	set	3987
   154  0000                     _TRISA	set	3986
   155  00FF19                     STR_11:
   156  00FF19  20                 	db	32
   157  00FF1A  20                 	db	32
   158  00FF1B  20                 	db	32
   159  00FF1C  20                 	db	32
   160  00FF1D  20                 	db	32
   161  00FF1E  20                 	db	32
   162  00FF1F  20                 	db	32
   163  00FF20  20                 	db	32
   164  00FF21  20                 	db	32
   165  00FF22  20                 	db	32
   166  00FF23  20                 	db	32
   167  00FF24  20                 	db	32
   168  00FF25  20                 	db	32
   169  00FF26  20                 	db	32
   170  00FF27  20                 	db	32
   171  00FF28  20                 	db	32
   172  00FF29  00                 	db	0
   173  00FF2A                     STR_3:
   174  00FF2A  20                 	db	32
   175  00FF2B  20                 	db	32
   176  00FF2C  20                 	db	32
   177  00FF2D  20                 	db	32
   178  00FF2E  57                 	db	87	;'W'
   179  00FF2F  61                 	db	97	;'a'
   180  00FF30  72                 	db	114	;'r'
   181  00FF31  6E                 	db	110	;'n'
   182  00FF32  69                 	db	105	;'i'
   183  00FF33  6E                 	db	110	;'n'
   184  00FF34  67                 	db	103	;'g'
   185  00FF35  21                 	db	33
   186  00FF36  20                 	db	32
   187  00FF37  20                 	db	32
   188  00FF38  20                 	db	32
   189  00FF39  20                 	db	32
   190  00FF3A  00                 	db	0
   191  00FF3B                     STR_23:
   192  00FF3B  52                 	db	82	;'R'
   193  00FF3C  65                 	db	101	;'e'
   194  00FF3D  6D                 	db	109	;'m'
   195  00FF3E  61                 	db	97	;'a'
   196  00FF3F  69                 	db	105	;'i'
   197  00FF40  6E                 	db	110	;'n'
   198  00FF41  69                 	db	105	;'i'
   199  00FF42  6E                 	db	110	;'n'
   200  00FF43  67                 	db	103	;'g'
   201  00FF44  3A                 	db	58	;':'
   202  00FF45  20                 	db	32
   203  00FF46  31                 	db	49	;'1'
   204  00FF47  20                 	db	32
   205  00FF48  73                 	db	115	;'s'
   206  00FF49  65                 	db	101	;'e'
   207  00FF4A  63                 	db	99	;'c'
   208  00FF4B  00                 	db	0
   209  00FF4C                     STR_1:
   210  00FF4C  6F                 	db	111	;'o'
   211  00FF4D  70                 	db	112	;'p'
   212  00FF4E  65                 	db	101	;'e'
   213  00FF4F  6E                 	db	110	;'n'
   214  00FF50  20                 	db	32
   215  00FF51  74                 	db	116	;'t'
   216  00FF52  68                 	db	104	;'h'
   217  00FF53  65                 	db	101	;'e'
   218  00FF54  20                 	db	32
   219  00FF55  64                 	db	100	;'d'
   220  00FF56  6F                 	db	111	;'o'
   221  00FF57  6F                 	db	111	;'o'
   222  00FF58  72                 	db	114	;'r'
   223  00FF59  20                 	db	32
   224  00FF5A  26                 	db	38
   225  00FF5B  00                 	db	0
   226  00FF5C                     STR_15:
   227  00FF5C  64                 	db	100	;'d'
   228  00FF5D  72                 	db	114	;'r'
   229  00FF5E  61                 	db	97	;'a'
   230  00FF5F  69                 	db	105	;'i'
   231  00FF60  6E                 	db	110	;'n'
   232  00FF61  20                 	db	32
   233  00FF62  74                 	db	116	;'t'
   234  00FF63  68                 	db	104	;'h'
   235  00FF64  65                 	db	101	;'e'
   236  00FF65  20                 	db	32
   237  00FF66  77                 	db	119	;'w'
   238  00FF67  61                 	db	97	;'a'
   239  00FF68  74                 	db	116	;'t'
   240  00FF69  65                 	db	101	;'e'
   241  00FF6A  72                 	db	114	;'r'
   242  00FF6B  00                 	db	0
   243  00FF6C                     STR_2:
   244  00FF6C  70                 	db	112	;'p'
   245  00FF6D  75                 	db	117	;'u'
   246  00FF6E  74                 	db	116	;'t'
   247  00FF6F  20                 	db	32
   248  00FF70  74                 	db	116	;'t'
   249  00FF71  68                 	db	104	;'h'
   250  00FF72  65                 	db	101	;'e'
   251  00FF73  20                 	db	32
   252  00FF74  63                 	db	99	;'c'
   253  00FF75  6C                 	db	108	;'l'
   254  00FF76  6F                 	db	111	;'o'
   255  00FF77  74                 	db	116	;'t'
   256  00FF78  68                 	db	104	;'h'
   257  00FF79  65                 	db	101	;'e'
   258  00FF7A  73                 	db	115	;'s'
   259  00FF7B  00                 	db	0
   260  00FF7C                     STR_6:
   261  00FF7C  6D                 	db	109	;'m'
   262  00FF7D  61                 	db	97	;'a'
   263  00FF7E  73                 	db	115	;'s'
   264  00FF7F  73                 	db	115	;'s'
   265  00FF80  20                 	db	32
   266  00FF81  6F                 	db	111	;'o'
   267  00FF82  76                 	db	118	;'v'
   268  00FF83  65                 	db	101	;'e'
   269  00FF84  72                 	db	114	;'r'
   270  00FF85  20                 	db	32
   271  00FF86  6C                 	db	108	;'l'
   272  00FF87  69                 	db	105	;'i'
   273  00FF88  6D                 	db	109	;'m'
   274  00FF89  69                 	db	105	;'i'
   275  00FF8A  74                 	db	116	;'t'
   276  00FF8B  00                 	db	0
   277  00FF8C                     STR_17:
   278  00FF8C  43                 	db	67	;'C'
   279  00FF8D  68                 	db	104	;'h'
   280  00FF8E  6F                 	db	111	;'o'
   281  00FF8F  6F                 	db	111	;'o'
   282  00FF90  73                 	db	115	;'s'
   283  00FF91  65                 	db	101	;'e'
   284  00FF92  20                 	db	32
   285  00FF93  43                 	db	67	;'C'
   286  00FF94  79                 	db	121	;'y'
   287  00FF95  63                 	db	99	;'c'
   288  00FF96  6C                 	db	108	;'l'
   289  00FF97  65                 	db	101	;'e'
   290  00FF98  3A                 	db	58	;':'
   291  00FF99  00                 	db	0
   292  00FF9A                     STR_24:
   293  00FF9A  44                 	db	68	;'D'
   294  00FF9B  6F                 	db	111	;'o'
   295  00FF9C  6F                 	db	111	;'o'
   296  00FF9D  72                 	db	114	;'r'
   297  00FF9E  20                 	db	32
   298  00FF9F  6C                 	db	108	;'l'
   299  00FFA0  6F                 	db	111	;'o'
   300  00FFA1  63                 	db	99	;'c'
   301  00FFA2  6B                 	db	107	;'k'
   302  00FFA3  65                 	db	101	;'e'
   303  00FFA4  64                 	db	100	;'d'
   304  00FFA5  21                 	db	33
   305  00FFA6  00                 	db	0
   306  00FFA7                     STR_19:
   307  00FFA7  32                 	db	50	;'2'
   308  00FFA8  20                 	db	32
   309  00FFA9  2D                 	db	45
   310  00FFAA  20                 	db	32
   311  00FFAB  44                 	db	68	;'D'
   312  00FFAC  65                 	db	101	;'e'
   313  00FFAD  6C                 	db	108	;'l'
   314  00FFAE  69                 	db	105	;'i'
   315  00FFAF  63                 	db	99	;'c'
   316  00FFB0  61                 	db	97	;'a'
   317  00FFB1  74                 	db	116	;'t'
   318  00FFB2  65                 	db	101	;'e'
   319  00FFB3  00                 	db	0
   320  00FFB4                     STR_21:
   321  00FFB4  52                 	db	82	;'R'
   322  00FFB5  65                 	db	101	;'e'
   323  00FFB6  6D                 	db	109	;'m'
   324  00FFB7  61                 	db	97	;'a'
   325  00FFB8  69                 	db	105	;'i'
   326  00FFB9  6E                 	db	110	;'n'
   327  00FFBA  69                 	db	105	;'i'
   328  00FFBB  6E                 	db	110	;'n'
   329  00FFBC  67                 	db	103	;'g'
   330  00FFBD  3A                 	db	58	;':'
   331  00FFBE  20                 	db	32
   332  00FFBF  00                 	db	0
   333  00FFC0                     STR_25:
   334  00FFC0  25                 	db	37
   335  00FFC1  6C                 	db	108	;'l'
   336  00FFC2  75                 	db	117	;'u'
   337  00FFC3  2E                 	db	46
   338  00FFC4  25                 	db	37
   339  00FFC5  36                 	db	54	;'6'
   340  00FFC6  2E                 	db	46
   341  00FFC7  36                 	db	54	;'6'
   342  00FFC8  6C                 	db	108	;'l'
   343  00FFC9  75                 	db	117	;'u'
   344  00FFCA  00                 	db	0
   345  00FFCB                     STR_18:
   346  00FFCB  31                 	db	49	;'1'
   347  00FFCC  20                 	db	32
   348  00FFCD  2D                 	db	45
   349  00FFCE  20                 	db	32
   350  00FFCF  4E                 	db	78	;'N'
   351  00FFD0  6F                 	db	111	;'o'
   352  00FFD1  72                 	db	114	;'r'
   353  00FFD2  6D                 	db	109	;'m'
   354  00FFD3  61                 	db	97	;'a'
   355  00FFD4  6C                 	db	108	;'l'
   356  00FFD5  00                 	db	0
   357  00FFD6                     STR_12:
   358  00FFD6  44                 	db	68	;'D'
   359  00FFD7  69                 	db	105	;'i'
   360  00FFD8  73                 	db	115	;'s'
   361  00FFD9  70                 	db	112	;'p'
   362  00FFDA  65                 	db	101	;'e'
   363  00FFDB  6E                 	db	110	;'n'
   364  00FFDC  73                 	db	115	;'s'
   365  00FFDD  65                 	db	101	;'e'
   366  00FFDE  00                 	db	0
   367  00FFDF                     STR_20:
   368  00FFDF  33                 	db	51	;'3'
   369  00FFE0  2D                 	db	45
   370  00FFE1  20                 	db	32
   371  00FFE2  51                 	db	81	;'Q'
   372  00FFE3  75                 	db	117	;'u'
   373  00FFE4  69                 	db	105	;'i'
   374  00FFE5  63                 	db	99	;'c'
   375  00FFE6  6B                 	db	107	;'k'
   376  00FFE7  00                 	db	0
   377  00FFE8                     STR_4:
   378  00FFE8  6D                 	db	109	;'m'
   379  00FFE9  61                 	db	97	;'a'
   380  00FFEA  73                 	db	115	;'s'
   381  00FFEB  73                 	db	115	;'s'
   382  00FFEC  20                 	db	32
   383  00FFED  00                 	db	0
   384  00FFEE                     STR_14:
   385  00FFEE  52                 	db	82	;'R'
   386  00FFEF  69                 	db	105	;'i'
   387  00FFF0  6E                 	db	110	;'n'
   388  00FFF1  73                 	db	115	;'s'
   389  00FFF2  65                 	db	101	;'e'
   390  00FFF3  00                 	db	0
   391  00FFF4                     STR_13:
   392  00FFF4  57                 	db	87	;'W'
   393  00FFF5  61                 	db	97	;'a'
   394  00FFF6  73                 	db	115	;'s'
   395  00FFF7  68                 	db	104	;'h'
   396  00FFF8  00                 	db	0
   397  00FFF9                     STR_16:
   398  00FFF9  73                 	db	115	;'s'
   399  00FFFA  70                 	db	112	;'p'
   400  00FFFB  69                 	db	105	;'i'
   401  00FFFC  6E                 	db	110	;'n'
   402  00FFFD  00                 	db	0
   403  0000                     
   404                           ; #config settings
   405  00FFFE  00                 	db	0	; dummy byte at the end
   406  0000                     
   407                           	psect	cinit
   408  00E600                     __pcinit:
   409                           	opt stack 0
   410  00E600                     start_initialization:
   411                           	opt stack 0
   412  00E600                     __initialization:
   413                           	opt stack 0
   414                           
   415                           ; Initialize objects allocated to COMRAM (2 bytes)
   416                           ; load TBLPTR registers with __pidataCOMRAM
   417  00E600  0ED0               	movlw	low __pidataCOMRAM
   418  00E602  6EF6               	movwf	tblptrl,c
   419  00E604  0EE3               	movlw	high __pidataCOMRAM
   420  00E606  6EF7               	movwf	tblptrh,c
   421  00E608  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   422  00E60A  6EF8               	movwf	tblptru,c
   423  00E60C  0009               	tblrd		*+	;fetch initializer
   424  00E60E  CFF5 F071          	movff	tablat,__pdataCOMRAM
   425  00E612  0009               	tblrd		*+	;fetch initializer
   426  00E614  CFF5 F072          	movff	tablat,__pdataCOMRAM+1
   427                           
   428                           ; Clear objects allocated to BANK0 (35 bytes)
   429  00E618  EE00  F0D0         	lfsr	0,__pbssBANK0
   430  00E61C  0E23               	movlw	35
   431  00E61E                     clear_0:
   432  00E61E  6AEE               	clrf	postinc0,c
   433  00E620  06E8               	decf	wreg,f,c
   434  00E622  E1FD               	bnz	clear_0
   435                           
   436                           ; Clear objects allocated to COMRAM (23 bytes)
   437  00E624  EE00  F05A         	lfsr	0,__pbssCOMRAM
   438  00E628  0E17               	movlw	23
   439  00E62A                     clear_1:
   440  00E62A  6AEE               	clrf	postinc0,c
   441  00E62C  06E8               	decf	wreg,f,c
   442  00E62E  E1FD               	bnz	clear_1
   443  00E630                     end_of_initialization:
   444                           	opt stack 0
   445  00E630                     __end_of__initialization:
   446                           	opt stack 0
   447  00E630  0E00               	movlw	low (__Lmediumconst shr (0+16))
   448  00E632  6EF8               	movwf	tblptru,c
   449  00E634  0100               	movlb	0
   450  00E636  EF3C  F072         	goto	_main	;jump to C main() function
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           
   458                           	psect	bssCOMRAM
   459  00005A                     __pbssCOMRAM:
   460                           	opt stack 0
   461  00005A                     _massindrum:
   462                           	opt stack 0
   463  00005A                     	ds	3
   464  00005D                     _speedofdrum:
   465                           	opt stack 0
   466  00005D                     	ds	2
   467  00005F                     _buff:
   468                           	opt stack 0
   469  00005F                     	ds	2
   470  000061                     _str1:
   471                           	opt stack 0
   472  000061                     	ds	16
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           
   480                           	psect	dataCOMRAM
   481  000071                     __pdataCOMRAM:
   482                           	opt stack 0
   483  000071                     _cycl:
   484                           	opt stack 0
   485  000071                     	ds	2
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           
   493                           	psect	bssBANK0
   494  0000D0                     __pbssBANK0:
   495                           	opt stack 0
   496  0000D0                     _b:
   497                           	opt stack 0
   498  0000D0                     	ds	2
   499  0000D2                     ftoa@buf:
   500                           	opt stack 0
   501  0000D2                     	ds	17
   502  0000E3                     _str:
   503                           	opt stack 0
   504  0000E3                     	ds	16
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           
   512                           	psect	cstackBANK0
   513  000080                     __pcstackBANK0:
   514                           	opt stack 0
   515  000080                     menu@menu:
   516                           	opt stack 0
   517                           
   518                           ; 80 bytes @ 0x0
   519  000080                     	ds	80
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           
   527                           	psect	cstackCOMRAM
   528  000001                     __pcstackCOMRAM:
   529                           	opt stack 0
   530  000001                     ??_isdigit:
   531  000001                     ?_myadc:
   532                           	opt stack 0
   533  000001                     ?___wmul:
   534                           	opt stack 0
   535  000001                     ?___lwdiv:
   536                           	opt stack 0
   537  000001                     ?___lwmod:
   538                           	opt stack 0
   539  000001                     ?___ftpack:
   540                           	opt stack 0
   541  000001                     ?___ftneg:
   542                           	opt stack 0
   543  000001                     ?___lldiv:
   544                           	opt stack 0
   545  000001                     status@c:
   546                           	opt stack 0
   547  000001                     motor@m:
   548                           	opt stack 0
   549  000001                     inlet@i:
   550                           	opt stack 0
   551  000001                     outlet@o:
   552                           	opt stack 0
   553  000001                     lcd_wr@val:
   554                           	opt stack 0
   555  000001                     atraso_ms@valor:
   556                           	opt stack 0
   557  000001                     ___wmul@multiplier:
   558                           	opt stack 0
   559  000001                     ___lwdiv@dividend:
   560                           	opt stack 0
   561  000001                     ___lwmod@dividend:
   562                           	opt stack 0
   563  000001                     strcat@to:
   564                           	opt stack 0
   565  000001                     strcpy@to:
   566                           	opt stack 0
   567  000001                     ___ftpack@arg:
   568                           	opt stack 0
   569  000001                     ___ftneg@f1:
   570                           	opt stack 0
   571  000001                     ___lldiv@dividend:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x0
   575  000001                     	ds	1
   576  000002                     status@s:
   577                           	opt stack 0
   578  000002                     _isdigit$919:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x1
   582  000002                     	ds	1
   583  000003                     ??_myadc:
   584  000003                     isdigit@c:
   585                           	opt stack 0
   586  000003                     atraso_ms@i:
   587                           	opt stack 0
   588  000003                     ___wmul@multiplicand:
   589                           	opt stack 0
   590  000003                     ___lwdiv@divisor:
   591                           	opt stack 0
   592  000003                     ___lwmod@divisor:
   593                           	opt stack 0
   594  000003                     strcat@from:
   595                           	opt stack 0
   596  000003                     strcpy@from:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x2
   600  000003                     	ds	1
   601  000004                     ___ftpack@exp:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x3
   605  000004                     	ds	1
   606  000005                     myadc@ch:
   607                           	opt stack 0
   608  000005                     atraso_ms@j:
   609                           	opt stack 0
   610  000005                     ___ftpack@sign:
   611                           	opt stack 0
   612  000005                     ___lwmod@counter:
   613                           	opt stack 0
   614  000005                     ___wmul@product:
   615                           	opt stack 0
   616  000005                     ___lwdiv@quotient:
   617                           	opt stack 0
   618  000005                     strcat@cp:
   619                           	opt stack 0
   620  000005                     strcpy@cp:
   621                           	opt stack 0
   622  000005                     ___lldiv@divisor:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x4
   626  000005                     	ds	1
   627  000006                     ??___ftpack:
   628  000006                     lcd_cmd@val:
   629                           	opt stack 0
   630  000006                     lcd_dat@val:
   631                           	opt stack 0
   632  000006                     myadc@a:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x5
   636  000006                     	ds	1
   637  000007                     ___lwdiv@counter:
   638                           	opt stack 0
   639  000007                     mydelay@n:
   640                           	opt stack 0
   641  000007                     lcd_str@str:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x6
   645  000007                     	ds	1
   646  000008                     utoa@buf:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x7
   650  000008                     	ds	1
   651  000009                     ??_lcd_str:
   652  000009                     ??_mydelay:
   653  000009                     ?___lltoft:
   654                           	opt stack 0
   655  000009                     ?___lwtoft:
   656                           	opt stack 0
   657  000009                     ___lwtoft@c:
   658                           	opt stack 0
   659  000009                     ___lldiv@quotient:
   660                           	opt stack 0
   661  000009                     ___lltoft@c:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x8
   665  000009                     	ds	1
   666  00000A                     mydelay@ii:
   667                           	opt stack 0
   668  00000A                     utoa@val:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x9
   672  00000A                     	ds	1
   673  00000B                     lcd_str@i:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0xA
   677  00000B                     	ds	1
   678  00000C                     ?___ftmul:
   679                           	opt stack 0
   680  00000C                     utoa@base:
   681                           	opt stack 0
   682  00000C                     ___ftmul@f1:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0xB
   686  00000C                     	ds	1
   687  00000D                     ??___lltoft:
   688  00000D                     ___lldiv@counter:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0xC
   692  00000D                     	ds	1
   693  00000E                     ?___llmod:
   694                           	opt stack 0
   695  00000E                     utoa@v:
   696                           	opt stack 0
   697  00000E                     ___llmod@dividend:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0xD
   701  00000E                     	ds	1
   702  00000F                     ___ftmul@f2:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0xE
   706  00000F                     	ds	1
   707  000010                     utoa@c:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0xF
   711  000010                     	ds	1
   712  000011                     ___lltoft@exp:
   713                           	opt stack 0
   714  000011                     itoa@buf:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x10
   718  000011                     	ds	1
   719  000012                     ??___ftmul:
   720  000012                     ___llmod@divisor:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x11
   724  000012                     	ds	1
   725  000013                     itoa@val:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x12
   729  000013                     	ds	2
   730  000015                     ___ftmul@exp:
   731                           	opt stack 0
   732  000015                     itoa@base:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x14
   736  000015                     	ds	1
   737  000016                     ___llmod@counter:
   738                           	opt stack 0
   739  000016                     ___ftmul@f3_as_product:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x15
   743  000016                     	ds	1
   744  000017                     ?_sprintf:
   745                           	opt stack 0
   746  000017                     sprintf@sp:
   747                           	opt stack 0
   748  000017                     itoa@cp:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x16
   752  000017                     	ds	2
   753  000019                     ___ftmul@cntr:
   754                           	opt stack 0
   755  000019                     remaintime@t:
   756                           	opt stack 0
   757  000019                     sprintf@f:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x18
   761  000019                     	ds	1
   762  00001A                     ___ftmul@sign:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x19
   766  00001A                     	ds	1
   767  00001B                     ??_remaintime:
   768  00001B                     ?___ftdiv:
   769                           	opt stack 0
   770  00001B                     ?___fttol:
   771                           	opt stack 0
   772  00001B                     ___ftdiv@f1:
   773                           	opt stack 0
   774  00001B                     ___fttol@f1:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0x1A
   778  00001B                     	ds	2
   779  00001D                     remaintime@i:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x1C
   783  00001D                     	ds	1
   784  00001E                     ___ftdiv@f2:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x1D
   788  00001E                     	ds	1
   789  00001F                     ??___fttol:
   790  00001F                     spin@spindelay:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x1E
   794  00001F                     	ds	2
   795  000021                     ??___ftdiv:
   796  000021                     
   797                           ; 1 bytes @ 0x20
   798  000021                     	ds	2
   799  000023                     ??_sprintf:
   800                           
   801                           ; 1 bytes @ 0x22
   802  000023                     	ds	1
   803  000024                     ___ftdiv@cntr:
   804                           	opt stack 0
   805  000024                     ___fttol@sign1:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x23
   809  000024                     	ds	1
   810  000025                     ___ftdiv@f3:
   811                           	opt stack 0
   812  000025                     ___fttol@lval:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x24
   816  000025                     	ds	2
   817  000027                     sprintf@flag:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x26
   821  000027                     	ds	1
   822  000028                     ___ftdiv@exp:
   823                           	opt stack 0
   824  000028                     sprintf@ap:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x27
   828  000028                     	ds	1
   829  000029                     ___ftdiv@sign:
   830                           	opt stack 0
   831  000029                     ___fttol@exp1:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x28
   835  000029                     	ds	1
   836  00002A                     ?___ftadd:
   837                           	opt stack 0
   838  00002A                     ___ftadd@f1:
   839                           	opt stack 0
   840  00002A                     sprintf@val:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x29
   844  00002A                     	ds	3
   845  00002D                     ___ftadd@f2:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x2C
   849  00002D                     	ds	1
   850  00002E                     sprintf@width:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x2D
   854  00002E                     	ds	2
   855  000030                     ??___ftadd:
   856  000030                     sprintf@prec:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x2F
   860  000030                     	ds	2
   861  000032                     sprintf@c:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x31
   865  000032                     	ds	1
   866  000033                     ___ftadd@sign:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x32
   870  000033                     	ds	1
   871  000034                     ___ftadd@exp2:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x33
   875  000034                     	ds	1
   876  000035                     ___ftadd@exp1:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x34
   880  000035                     	ds	1
   881  000036                     ?___ftsub:
   882                           	opt stack 0
   883  000036                     ?_mass:
   884                           	opt stack 0
   885  000036                     ___ftge@ff1:
   886                           	opt stack 0
   887  000036                     ___ftsub@f1:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x35
   891  000036                     	ds	3
   892  000039                     mass@f:
   893                           	opt stack 0
   894  000039                     ___ftge@ff2:
   895                           	opt stack 0
   896  000039                     ___ftsub@f2:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x38
   900  000039                     	ds	3
   901  00003C                     ??___ftge:
   902  00003C                     ?_ftoa:
   903                           	opt stack 0
   904  00003C                     mass@m:
   905                           	opt stack 0
   906  00003C                     ftoa@f:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x3B
   910  00003C                     	ds	3
   911  00003F                     ftoa@status:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x3E
   915  00003F                     	ds	2
   916  000041                     ftoa@rem:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x40
   920  000041                     	ds	4
   921  000045                     ftoa@l:
   922                           	opt stack 0
   923                           
   924                           ; 4 bytes @ 0x44
   925  000045                     	ds	4
   926  000049                     ftoa@cp:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x48
   930  000049                     	ds	2
   931  00004B                     operate@maxmass:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x4A
   935  00004B                     	ds	3
   936  00004E                     operate@washtime:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x4D
   940  00004E                     	ds	2
   941  000050                     ??_operate:
   942                           
   943                           ; 1 bytes @ 0x4F
   944  000050                     	ds	1
   945  000051                     operate@stat:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x50
   949  000051                     	ds	2
   950  000053                     operate@s:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x52
   954  000053                     	ds	1
   955  000054                     cycle@c:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x53
   959  000054                     	ds	2
   960  000056                     ??_cycle:
   961                           
   962                           ; 1 bytes @ 0x55
   963  000056                     	ds	2
   964  000058                     ??_menu:
   965                           
   966                           ; 1 bytes @ 0x57
   967  000058                     	ds	2
   968  00005A                     tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           
   975                           ; 1 bytes @ 0x59
   976 ;;
   977 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   978 ;;
   979 ;; *************** function _main *****************
   980 ;; Defined at:
   981 ;;		line 69 in file "WMC_2.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;Total ram usage:        0 bytes
  1000 ;; Hardware stack levels required when called:    8
  1001 ;; This function calls:
  1002 ;;		_init_adc
  1003 ;;		_init_ports
  1004 ;;		_lcd_init
  1005 ;;		_menu
  1006 ;;		_stop
  1007 ;; This function is called by:
  1008 ;;		Startup code after reset
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text0
  1013  00E478                     __ptext0:
  1014                           	opt stack 0
  1015  00E478                     _main:
  1016                           	opt stack 23
  1017                           
  1018                           ;WMC_2.c: 71: init_ports();
  1019                           
  1020                           ;incstack = 0
  1021  00E478  EC61  F072         	call	_init_ports	;wreg free
  1022                           
  1023                           ;WMC_2.c: 72: init_adc();
  1024  00E47C  ECED  F071         	call	_init_adc	;wreg free
  1025                           
  1026                           ;WMC_2.c: 73: lcd_init();
  1027  00E480  ECEC  F073         	call	_lcd_init	;wreg free
  1028  00E484                     l3179:
  1029                           
  1030                           ;WMC_2.c: 75: {
  1031                           ;WMC_2.c: 76: menu();
  1032  00E484  ECAE  F07A         	call	_menu	;wreg free
  1033                           
  1034                           ;WMC_2.c: 77: if(b == 4) stop();
  1035  00E488  0E04               	movlw	4
  1036  00E48A  0100               	movlb	0	; () banked
  1037  00E48C  19D0               	xorwf	_b& (0+255),w,b
  1038  00E48E  0100               	movlb	0	; () banked
  1039  00E490  11D1               	iorwf	(_b+1)& (0+255),w,b
  1040  00E492  A4D8               	btfss	status,2,c
  1041  00E494  D7F7               	goto	l3179
  1042                           
  1043                           ; BSR set to: 0
  1044  00E496  EC0D  F075         	call	_stop	;wreg free
  1045  00E49A  D7F4               	goto	l3179
  1046  00E49C                     __end_of_main:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           status	equ	0xFD8
  1055                           
  1056 ;; *************** function _stop *****************
  1057 ;; Defined at:
  1058 ;;		line 446 in file "WMC_2.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;Total ram usage:        0 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    3
  1079 ;; This function calls:
  1080 ;;		_atraso_ms
  1081 ;;		_inlet
  1082 ;;		_lcd_cmd
  1083 ;;		_lcd_str
  1084 ;;		_outlet
  1085 ;;		_status
  1086 ;; This function is called by:
  1087 ;;		_main
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text1
  1092  00EA1A                     __ptext1:
  1093                           	opt stack 0
  1094  00EA1A                     _stop:
  1095                           	opt stack 27
  1096                           
  1097                           ;WMC_2.c: 448: cycl = 0;
  1098                           
  1099                           ;incstack = 0
  1100  00EA1A  0E00               	movlw	0
  1101  00EA1C  6E72               	movwf	_cycl+1,c
  1102  00EA1E  0E00               	movlw	0
  1103  00EA20  6E71               	movwf	_cycl,c
  1104                           
  1105                           ;WMC_2.c: 449: status(1,0);
  1106  00EA22  0E00               	movlw	0
  1107  00EA24  6E01               	movwf	status@c,c
  1108  00EA26  0E01               	movlw	1
  1109  00EA28  EC48  F074         	call	_status
  1110                           
  1111                           ;WMC_2.c: 450: status(2,0);
  1112  00EA2C  0E00               	movlw	0
  1113  00EA2E  6E01               	movwf	status@c,c
  1114  00EA30  0E02               	movlw	2
  1115  00EA32  EC48  F074         	call	_status
  1116                           
  1117                           ;WMC_2.c: 451: status(3,0);
  1118  00EA36  0E00               	movlw	0
  1119  00EA38  6E01               	movwf	status@c,c
  1120  00EA3A  0E03               	movlw	3
  1121  00EA3C  EC48  F074         	call	_status
  1122                           
  1123                           ;WMC_2.c: 452: inlet(0);
  1124  00EA40  0E00               	movlw	0
  1125  00EA42  ECF4  F071         	call	_inlet
  1126                           
  1127                           ;WMC_2.c: 453: outlet(1);
  1128  00EA46  0E01               	movlw	1
  1129  00EA48  EC02  F072         	call	_outlet
  1130                           
  1131                           ;WMC_2.c: 454: lcd_cmd(0x01);
  1132  00EA4C  0E01               	movlw	1
  1133  00EA4E  EC76  F072         	call	_lcd_cmd
  1134                           
  1135                           ;WMC_2.c: 455: lcd_cmd(0x80);
  1136  00EA52  0E80               	movlw	128
  1137  00EA54  EC76  F072         	call	_lcd_cmd
  1138                           
  1139                           ;WMC_2.c: 456: lcd_str("drain the water");
  1140  00EA58  0E5C               	movlw	low STR_15
  1141  00EA5A  6E07               	movwf	lcd_str@str,c
  1142  00EA5C  0EFF               	movlw	high STR_15
  1143  00EA5E  6E08               	movwf	lcd_str@str+1,c
  1144  00EA60  EC4A  F075         	call	_lcd_str	;wreg free
  1145                           
  1146                           ;WMC_2.c: 457: lcd_cmd(0xC0);
  1147  00EA64  0EC0               	movlw	192
  1148  00EA66  EC76  F072         	call	_lcd_cmd
  1149                           
  1150                           ;WMC_2.c: 458: lcd_str("Remaining: 1 sec");
  1151  00EA6A  0E3B               	movlw	low STR_23
  1152  00EA6C  6E07               	movwf	lcd_str@str,c
  1153  00EA6E  0EFF               	movlw	high STR_23
  1154  00EA70  6E08               	movwf	lcd_str@str+1,c
  1155  00EA72  EC4A  F075         	call	_lcd_str	;wreg free
  1156                           
  1157                           ;WMC_2.c: 459: atraso_ms(1000);
  1158  00EA76  0E03               	movlw	3
  1159  00EA78  6E02               	movwf	atraso_ms@valor+1,c
  1160  00EA7A  0EE8               	movlw	232
  1161  00EA7C  6E01               	movwf	atraso_ms@valor,c
  1162  00EA7E  ECE5  F072         	call	_atraso_ms	;wreg free
  1163                           
  1164                           ;WMC_2.c: 460: outlet(0);
  1165  00EA82  0E00               	movlw	0
  1166  00EA84  EC02  F072         	call	_outlet
  1167                           
  1168                           ;WMC_2.c: 461: status(5,0);
  1169  00EA88  0E00               	movlw	0
  1170  00EA8A  6E01               	movwf	status@c,c
  1171  00EA8C  0E05               	movlw	5
  1172  00EA8E  EC48  F074         	call	_status
  1173  00EA92  0012               	return		;funcret
  1174  00EA94                     __end_of_stop:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           status	equ	0xFD8
  1183                           
  1184 ;; *************** function _menu *****************
  1185 ;; Defined at:
  1186 ;;		line 350 in file "WMC_2.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;		None
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  menu           80    0[BANK0 ] unsigned char [20][4]
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Totals:         2      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;Total ram usage:       82 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    7
  1207 ;; This function calls:
  1208 ;;		_button
  1209 ;;		_cycle
  1210 ;;		_lcd_cmd
  1211 ;;		_lcd_str
  1212 ;;		_strcpy
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text2
  1219  00F55C                     __ptext2:
  1220                           	opt stack 0
  1221  00F55C                     _menu:
  1222                           	opt stack 23
  1223                           
  1224                           ;WMC_2.c: 352: unsigned char menu[4][20];
  1225                           ;WMC_2.c: 353: cycl = 1;
  1226                           
  1227                           ;incstack = 0
  1228  00F55C  0E00               	movlw	0
  1229  00F55E  6E72               	movwf	_cycl+1,c
  1230  00F560  0E01               	movlw	1
  1231  00F562  6E71               	movwf	_cycl,c
  1232                           
  1233                           ;WMC_2.c: 354: strcpy(menu[0],"Choose Cycle:");
  1234  00F564  0E80               	movlw	low menu@menu
  1235  00F566  6E01               	movwf	strcpy@to,c
  1236  00F568  0E00               	movlw	high menu@menu
  1237  00F56A  6E02               	movwf	strcpy@to+1,c
  1238  00F56C  0E8C               	movlw	low STR_17
  1239  00F56E  6E03               	movwf	strcpy@from,c
  1240  00F570  0EFF               	movlw	high STR_17
  1241  00F572  6E04               	movwf	strcpy@from+1,c
  1242  00F574  ECA0  F073         	call	_strcpy	;wreg free
  1243                           
  1244                           ;WMC_2.c: 355: strcpy(menu[1],"1 - Normal");
  1245  00F578  0E94               	movlw	low (menu@menu+20)
  1246  00F57A  6E01               	movwf	strcpy@to,c
  1247  00F57C  0E00               	movlw	high (menu@menu+20)
  1248  00F57E  6E02               	movwf	strcpy@to+1,c
  1249  00F580  0ECB               	movlw	low STR_18
  1250  00F582  6E03               	movwf	strcpy@from,c
  1251  00F584  0EFF               	movlw	high STR_18
  1252  00F586  6E04               	movwf	strcpy@from+1,c
  1253  00F588  ECA0  F073         	call	_strcpy	;wreg free
  1254                           
  1255                           ;WMC_2.c: 356: strcpy(menu[2],"2 - Delicate");
  1256  00F58C  0EA8               	movlw	low (menu@menu+40)
  1257  00F58E  6E01               	movwf	strcpy@to,c
  1258  00F590  0E00               	movlw	high (menu@menu+40)
  1259  00F592  6E02               	movwf	strcpy@to+1,c
  1260  00F594  0EA7               	movlw	low STR_19
  1261  00F596  6E03               	movwf	strcpy@from,c
  1262  00F598  0EFF               	movlw	high STR_19
  1263  00F59A  6E04               	movwf	strcpy@from+1,c
  1264  00F59C  ECA0  F073         	call	_strcpy	;wreg free
  1265                           
  1266                           ;WMC_2.c: 357: strcpy(menu[3],"3- Quick");
  1267  00F5A0  0EBC               	movlw	low (menu@menu+60)
  1268  00F5A2  6E01               	movwf	strcpy@to,c
  1269  00F5A4  0E00               	movlw	high (menu@menu+60)
  1270  00F5A6  6E02               	movwf	strcpy@to+1,c
  1271  00F5A8  0EDF               	movlw	low STR_20
  1272  00F5AA  6E03               	movwf	strcpy@from,c
  1273  00F5AC  0EFF               	movlw	high STR_20
  1274  00F5AE  6E04               	movwf	strcpy@from+1,c
  1275  00F5B0  ECA0  F073         	call	_strcpy	;wreg free
  1276                           
  1277                           ;WMC_2.c: 358: lcd_cmd(0x01);
  1278  00F5B4  0E01               	movlw	1
  1279  00F5B6  EC76  F072         	call	_lcd_cmd
  1280                           
  1281                           ;WMC_2.c: 359: lcd_cmd(0x80);
  1282  00F5BA  0E80               	movlw	128
  1283  00F5BC  EC76  F072         	call	_lcd_cmd
  1284                           
  1285                           ;WMC_2.c: 360: lcd_str(menu[0]);
  1286  00F5C0  0E80               	movlw	low menu@menu
  1287  00F5C2  6E07               	movwf	lcd_str@str,c
  1288  00F5C4  0E00               	movlw	high menu@menu
  1289  00F5C6  6E08               	movwf	lcd_str@str+1,c
  1290  00F5C8  EC4A  F075         	call	_lcd_str	;wreg free
  1291                           
  1292                           ;WMC_2.c: 361: lcd_cmd(0xC0);
  1293  00F5CC  0EC0               	movlw	192
  1294  00F5CE  EC76  F072         	call	_lcd_cmd
  1295                           
  1296                           ;WMC_2.c: 362: lcd_str(menu[1]);
  1297  00F5D2  0E94               	movlw	low (menu@menu+20)
  1298  00F5D4  6E07               	movwf	lcd_str@str,c
  1299  00F5D6  0E00               	movlw	high (menu@menu+20)
  1300  00F5D8  6E08               	movwf	lcd_str@str+1,c
  1301  00F5DA  EC4A  F075         	call	_lcd_str	;wreg free
  1302                           
  1303                           ;WMC_2.c: 363: cycl = 1;
  1304  00F5DE  0E00               	movlw	0
  1305  00F5E0  6E72               	movwf	_cycl+1,c
  1306  00F5E2  0E01               	movlw	1
  1307  00F5E4  6E71               	movwf	_cycl,c
  1308                           
  1309                           ;WMC_2.c: 364: b = button();
  1310  00F5E6  ECB5  F072         	call	_button	;wreg free
  1311  00F5EA  D0A9               	goto	L1
  1312  00F5EC                     l3067:
  1313                           
  1314                           ;WMC_2.c: 370: if(cycl == 3)
  1315  00F5EC  0E03               	movlw	3
  1316  00F5EE  1871               	xorwf	_cycl,w,c
  1317  00F5F0  1072               	iorwf	_cycl+1,w,c
  1318  00F5F2  A4D8               	btfss	status,2,c
  1319  00F5F4  D01A               	goto	l3081
  1320                           
  1321                           ;WMC_2.c: 371: {
  1322                           ;WMC_2.c: 372: cycl = 2;
  1323  00F5F6  0E00               	movlw	0
  1324  00F5F8  6E72               	movwf	_cycl+1,c
  1325  00F5FA  0E02               	movlw	2
  1326  00F5FC  6E71               	movwf	_cycl,c
  1327                           
  1328                           ;WMC_2.c: 373: lcd_cmd(0x01);
  1329  00F5FE  0E01               	movlw	1
  1330  00F600  EC76  F072         	call	_lcd_cmd
  1331                           
  1332                           ;WMC_2.c: 374: lcd_cmd(0xC0);
  1333  00F604  0EC0               	movlw	192
  1334  00F606  EC76  F072         	call	_lcd_cmd
  1335                           
  1336                           ;WMC_2.c: 375: lcd_str(menu[3]);
  1337  00F60A  0EBC               	movlw	low (menu@menu+60)
  1338  00F60C  6E07               	movwf	lcd_str@str,c
  1339  00F60E  0E00               	movlw	high (menu@menu+60)
  1340  00F610  6E08               	movwf	lcd_str@str+1,c
  1341  00F612  EC4A  F075         	call	_lcd_str	;wreg free
  1342                           
  1343                           ;WMC_2.c: 376: lcd_cmd(0x80);
  1344  00F616  0E80               	movlw	128
  1345  00F618  EC76  F072         	call	_lcd_cmd
  1346                           
  1347                           ;WMC_2.c: 377: lcd_str(menu[2]);
  1348  00F61C  0EA8               	movlw	low (menu@menu+40)
  1349  00F61E  6E07               	movwf	lcd_str@str,c
  1350  00F620  0E00               	movlw	high (menu@menu+40)
  1351  00F622  6E08               	movwf	lcd_str@str+1,c
  1352  00F624  EC4A  F075         	call	_lcd_str	;wreg free
  1353                           
  1354                           ;WMC_2.c: 378: }
  1355  00F628  D088               	goto	l3135
  1356  00F62A                     l3081:
  1357                           
  1358                           ;WMC_2.c: 379: else if(cycl == 2)
  1359  00F62A  0E02               	movlw	2
  1360  00F62C  1871               	xorwf	_cycl,w,c
  1361  00F62E  1072               	iorwf	_cycl+1,w,c
  1362  00F630  A4D8               	btfss	status,2,c
  1363  00F632  D083               	goto	l3135
  1364                           
  1365                           ;WMC_2.c: 380: {
  1366                           ;WMC_2.c: 381: cycl = 1;
  1367  00F634  0E00               	movlw	0
  1368  00F636  6E72               	movwf	_cycl+1,c
  1369  00F638  0E01               	movlw	1
  1370  00F63A  6E71               	movwf	_cycl,c
  1371                           
  1372                           ;WMC_2.c: 382: lcd_cmd(0x01);
  1373  00F63C  0E01               	movlw	1
  1374  00F63E  EC76  F072         	call	_lcd_cmd
  1375                           
  1376                           ;WMC_2.c: 383: lcd_cmd(0x80);
  1377  00F642  0E80               	movlw	128
  1378  00F644  EC76  F072         	call	_lcd_cmd
  1379                           
  1380                           ;WMC_2.c: 384: lcd_str(menu[0]);
  1381  00F648  0E80               	movlw	low menu@menu
  1382  00F64A  6E07               	movwf	lcd_str@str,c
  1383  00F64C  0E00               	movlw	high menu@menu
  1384  00F64E  6E08               	movwf	lcd_str@str+1,c
  1385  00F650  EC4A  F075         	call	_lcd_str	;wreg free
  1386                           
  1387                           ;WMC_2.c: 385: lcd_cmd(0xC0);
  1388  00F654  0EC0               	movlw	192
  1389  00F656  EC76  F072         	call	_lcd_cmd
  1390                           
  1391                           ;WMC_2.c: 386: lcd_str(menu[1]);
  1392  00F65A  0E94               	movlw	low (menu@menu+20)
  1393  00F65C  6E07               	movwf	lcd_str@str,c
  1394  00F65E  0E00               	movlw	high (menu@menu+20)
  1395  00F660  6E08               	movwf	lcd_str@str+1,c
  1396  00F662  EC4A  F075         	call	_lcd_str	;wreg free
  1397                           
  1398                           ;WMC_2.c: 387: }
  1399                           ;WMC_2.c: 388: break;
  1400  00F666  D069               	goto	l3135
  1401  00F668                     l3095:
  1402                           
  1403                           ;WMC_2.c: 390: if (cycl == 1)
  1404  00F668  0471               	decf	_cycl,w,c
  1405  00F66A  1072               	iorwf	_cycl+1,w,c
  1406  00F66C  A4D8               	btfss	status,2,c
  1407  00F66E  D01A               	goto	l3109
  1408                           
  1409                           ;WMC_2.c: 391: {
  1410                           ;WMC_2.c: 392: cycl = 2;
  1411  00F670  0E00               	movlw	0
  1412  00F672  6E72               	movwf	_cycl+1,c
  1413  00F674  0E02               	movlw	2
  1414  00F676  6E71               	movwf	_cycl,c
  1415                           
  1416                           ;WMC_2.c: 393: lcd_cmd(0x01);
  1417  00F678  0E01               	movlw	1
  1418  00F67A  EC76  F072         	call	_lcd_cmd
  1419                           
  1420                           ;WMC_2.c: 394: lcd_cmd(0xC0);
  1421  00F67E  0EC0               	movlw	192
  1422  00F680  EC76  F072         	call	_lcd_cmd
  1423                           
  1424                           ;WMC_2.c: 395: lcd_str(menu[3]);
  1425  00F684  0EBC               	movlw	low (menu@menu+60)
  1426  00F686  6E07               	movwf	lcd_str@str,c
  1427  00F688  0E00               	movlw	high (menu@menu+60)
  1428  00F68A  6E08               	movwf	lcd_str@str+1,c
  1429  00F68C  EC4A  F075         	call	_lcd_str	;wreg free
  1430                           
  1431                           ;WMC_2.c: 396: lcd_cmd(0x80);
  1432  00F690  0E80               	movlw	128
  1433  00F692  EC76  F072         	call	_lcd_cmd
  1434                           
  1435                           ;WMC_2.c: 397: lcd_str(menu[2]);
  1436  00F696  0EA8               	movlw	low (menu@menu+40)
  1437  00F698  6E07               	movwf	lcd_str@str,c
  1438  00F69A  0E00               	movlw	high (menu@menu+40)
  1439  00F69C  6E08               	movwf	lcd_str@str+1,c
  1440  00F69E  EC4A  F075         	call	_lcd_str	;wreg free
  1441                           
  1442                           ;WMC_2.c: 398: }
  1443  00F6A2  D04B               	goto	l3135
  1444  00F6A4                     l3109:
  1445                           
  1446                           ;WMC_2.c: 399: else if (cycl == 2)
  1447  00F6A4  0E02               	movlw	2
  1448  00F6A6  1871               	xorwf	_cycl,w,c
  1449  00F6A8  1072               	iorwf	_cycl+1,w,c
  1450  00F6AA  A4D8               	btfss	status,2,c
  1451  00F6AC  D046               	goto	l3135
  1452                           
  1453                           ;WMC_2.c: 400: {
  1454                           ;WMC_2.c: 401: cycl = 3;
  1455  00F6AE  0E00               	movlw	0
  1456  00F6B0  6E72               	movwf	_cycl+1,c
  1457  00F6B2  0E03               	movlw	3
  1458  00F6B4  6E71               	movwf	_cycl,c
  1459                           
  1460                           ;WMC_2.c: 402: lcd_cmd(0x01);
  1461  00F6B6  0E01               	movlw	1
  1462  00F6B8  EC76  F072         	call	_lcd_cmd
  1463                           
  1464                           ;WMC_2.c: 403: lcd_cmd(0x80);
  1465  00F6BC  0E80               	movlw	128
  1466  00F6BE  EC76  F072         	call	_lcd_cmd
  1467                           
  1468                           ;WMC_2.c: 404: lcd_str(menu[2]);
  1469  00F6C2  0EA8               	movlw	low (menu@menu+40)
  1470  00F6C4  6E07               	movwf	lcd_str@str,c
  1471  00F6C6  0E00               	movlw	high (menu@menu+40)
  1472  00F6C8  6E08               	movwf	lcd_str@str+1,c
  1473  00F6CA  EC4A  F075         	call	_lcd_str	;wreg free
  1474                           
  1475                           ;WMC_2.c: 405: lcd_cmd(0xC0);
  1476  00F6CE  0EC0               	movlw	192
  1477  00F6D0  EC76  F072         	call	_lcd_cmd
  1478                           
  1479                           ;WMC_2.c: 406: lcd_str(menu[3]);
  1480  00F6D4  0EBC               	movlw	low (menu@menu+60)
  1481  00F6D6  6E07               	movwf	lcd_str@str,c
  1482  00F6D8  0E00               	movlw	high (menu@menu+60)
  1483  00F6DA  6E08               	movwf	lcd_str@str+1,c
  1484  00F6DC  EC4A  F075         	call	_lcd_str	;wreg free
  1485                           
  1486                           ;WMC_2.c: 407: }
  1487                           ;WMC_2.c: 408: break;
  1488  00F6E0  D02C               	goto	l3135
  1489  00F6E2                     l3123:
  1490                           
  1491                           ;WMC_2.c: 410: lcd_cmd(0x01);
  1492  00F6E2  0E01               	movlw	1
  1493  00F6E4  EC76  F072         	call	_lcd_cmd
  1494                           
  1495                           ;WMC_2.c: 411: lcd_cmd(0x80);
  1496  00F6E8  0E80               	movlw	128
  1497  00F6EA  EC76  F072         	call	_lcd_cmd
  1498                           
  1499                           ;WMC_2.c: 412: lcd_str(menu[0]);
  1500  00F6EE  0E80               	movlw	low menu@menu
  1501  00F6F0  6E07               	movwf	lcd_str@str,c
  1502  00F6F2  0E00               	movlw	high menu@menu
  1503  00F6F4  6E08               	movwf	lcd_str@str+1,c
  1504  00F6F6  EC4A  F075         	call	_lcd_str	;wreg free
  1505                           
  1506                           ;WMC_2.c: 413: lcd_cmd(0xC0);
  1507  00F6FA  0EC0               	movlw	192
  1508  00F6FC  EC76  F072         	call	_lcd_cmd
  1509                           
  1510                           ;WMC_2.c: 414: lcd_str(menu[1]);
  1511  00F700  0E94               	movlw	low (menu@menu+20)
  1512  00F702  6E07               	movwf	lcd_str@str,c
  1513  00F704  0E00               	movlw	high (menu@menu+20)
  1514  00F706  6E08               	movwf	lcd_str@str+1,c
  1515  00F708  EC4A  F075         	call	_lcd_str	;wreg free
  1516                           
  1517                           ;WMC_2.c: 415: cycl = 1;
  1518  00F70C  0E00               	movlw	0
  1519  00F70E  6E72               	movwf	_cycl+1,c
  1520  00F710  0E01               	movlw	1
  1521  00F712  6E71               	movwf	_cycl,c
  1522                           
  1523                           ;WMC_2.c: 419: }
  1524                           
  1525                           ;WMC_2.c: 418: break;
  1526                           
  1527                           ;WMC_2.c: 417: default:
  1528                           
  1529                           ;WMC_2.c: 416: break;
  1530  00F714  D012               	goto	l3135
  1531  00F716                     l3133:
  1532  00F716  C0D0  F058         	movff	_b,??_menu
  1533  00F71A  C0D1  F059         	movff	_b+1,??_menu+1
  1534                           
  1535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1536                           ; Switch size 1, requested type "space"
  1537                           ; Number of cases is 1, Range of values is 0 to 0
  1538                           ; switch strategies available:
  1539                           ; Name         Instructions Cycles
  1540                           ; simple_byte            4     3 (average)
  1541                           ;	Chosen strategy is simple_byte
  1542  00F71E  5059               	movf	??_menu+1,w,c
  1543  00F720  0A00               	xorlw	0	; case 0
  1544  00F722  A4D8               	btfss	status,2,c
  1545  00F724  D00A               	goto	l3135
  1546                           
  1547                           ; Switch size 1, requested type "space"
  1548                           ; Number of cases is 3, Range of values is 1 to 4
  1549                           ; switch strategies available:
  1550                           ; Name         Instructions Cycles
  1551                           ; simple_byte           10     6 (average)
  1552                           ;	Chosen strategy is simple_byte
  1553  00F726  5058               	movf	??_menu,w,c
  1554  00F728  0A01               	xorlw	1	; case 1
  1555  00F72A  B4D8               	btfsc	status,2,c
  1556  00F72C  D75F               	goto	l3067
  1557  00F72E  0A03               	xorlw	3	; case 2
  1558  00F730  B4D8               	btfsc	status,2,c
  1559  00F732  D79A               	goto	l3095
  1560  00F734  0A06               	xorlw	6	; case 4
  1561  00F736  B4D8               	btfsc	status,2,c
  1562  00F738  D7D4               	goto	l3123
  1563  00F73A                     l3135:
  1564                           
  1565                           ;WMC_2.c: 420: b = button();
  1566  00F73A  ECB5  F072         	call	_button	;wreg free
  1567  00F73E                     L1:
  1568  00F73E  6E58               	movwf	??_menu& (0+255),c
  1569  00F740  5058               	movf	??_menu,w,c
  1570  00F742  0100               	movlb	0	; () banked
  1571  00F744  6FD0               	movwf	_b& (0+255),b
  1572  00F746  6BD1               	clrf	(_b+1)& (0+255),b
  1573                           
  1574                           ; BSR set to: 0
  1575                           
  1576                           ; BSR set to: 0
  1577  00F748  0E03               	movlw	3
  1578  00F74A  0100               	movlb	0	; () banked
  1579  00F74C  19D0               	xorwf	_b& (0+255),w,b
  1580  00F74E  0100               	movlb	0	; () banked
  1581  00F750  11D1               	iorwf	(_b+1)& (0+255),w,b
  1582  00F752  A4D8               	btfss	status,2,c
  1583  00F754  D7E0               	goto	l3133
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;WMC_2.c: 421: }
  1587                           ;WMC_2.c: 422: if (b == 3)
  1588                           
  1589                           ; BSR set to: 0
  1590  00F756  0E03               	movlw	3
  1591  00F758  0100               	movlb	0	; () banked
  1592  00F75A  19D0               	xorwf	_b& (0+255),w,b
  1593  00F75C  0100               	movlb	0	; () banked
  1594  00F75E  11D1               	iorwf	(_b+1)& (0+255),w,b
  1595  00F760  A4D8               	btfss	status,2,c
  1596  00F762  0012               	return	
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;WMC_2.c: 423: {
  1600                           ;WMC_2.c: 424: cycle(cycl);
  1601  00F764  C071  F054         	movff	_cycl,cycle@c
  1602  00F768  C072  F055         	movff	_cycl+1,cycle@c+1
  1603  00F76C  ECCB  F078         	call	_cycle	;wreg free
  1604  00F770  0012               	return	
  1605  00F772                     __end_of_menu:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _cycle *****************
  1616 ;; Defined at:
  1617 ;;		line 322 in file "WMC_2.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  c               2   83[COMRAM] int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;Total ram usage:        4 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    6
  1638 ;; This function calls:
  1639 ;;		_operate
  1640 ;;		_spin
  1641 ;;		_status
  1642 ;; This function is called by:
  1643 ;;		_menu
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text3
  1648  00F196                     __ptext3:
  1649                           	opt stack 0
  1650  00F196                     _cycle:
  1651                           	opt stack 23
  1652                           
  1653                           ;WMC_2.c: 324: switch (c)
  1654                           
  1655                           ;incstack = 0
  1656  00F196  D072               	goto	l3029
  1657  00F198                     l3003:
  1658                           
  1659                           ;WMC_2.c: 327: operate(1,7.50,5);
  1660  00F198  0E00               	movlw	0
  1661  00F19A  6E4B               	movwf	operate@maxmass,c
  1662  00F19C  0EF0               	movlw	240
  1663  00F19E  6E4C               	movwf	operate@maxmass+1,c
  1664  00F1A0  0E40               	movlw	64
  1665  00F1A2  6E4D               	movwf	operate@maxmass+2,c
  1666  00F1A4  0E00               	movlw	0
  1667  00F1A6  6E4F               	movwf	operate@washtime+1,c
  1668  00F1A8  0E05               	movlw	5
  1669  00F1AA  6E4E               	movwf	operate@washtime,c
  1670  00F1AC  0E01               	movlw	1
  1671  00F1AE  EC4F  F07D         	call	_operate
  1672                           
  1673                           ;WMC_2.c: 328: status (5,0);
  1674  00F1B2  0E00               	movlw	0
  1675  00F1B4  6E01               	movwf	status@c,c
  1676  00F1B6  0E05               	movlw	5
  1677  00F1B8  EC48  F074         	call	_status
  1678                           
  1679                           ;WMC_2.c: 329: operate(2,7.50,3);
  1680  00F1BC  0E00               	movlw	0
  1681  00F1BE  6E4B               	movwf	operate@maxmass,c
  1682  00F1C0  0EF0               	movlw	240
  1683  00F1C2  6E4C               	movwf	operate@maxmass+1,c
  1684  00F1C4  0E40               	movlw	64
  1685  00F1C6  6E4D               	movwf	operate@maxmass+2,c
  1686  00F1C8  0E00               	movlw	0
  1687  00F1CA  6E4F               	movwf	operate@washtime+1,c
  1688  00F1CC  0E03               	movlw	3
  1689  00F1CE  6E4E               	movwf	operate@washtime,c
  1690  00F1D0  0E02               	movlw	2
  1691  00F1D2  EC4F  F07D         	call	_operate
  1692                           
  1693                           ;WMC_2.c: 330: spin(2);
  1694  00F1D6  0E00               	movlw	0
  1695  00F1D8  6E20               	movwf	spin@spindelay+1,c
  1696  00F1DA  0E02               	movlw	2
  1697  00F1DC  6E1F               	movwf	spin@spindelay,c
  1698  00F1DE  ECD8  F074         	call	_spin	;wreg free
  1699                           
  1700                           ;WMC_2.c: 331: break;
  1701  00F1E2  0012               	return	
  1702  00F1E4                     l3011:
  1703                           
  1704                           ;WMC_2.c: 333: operate(1,5.00,3);
  1705  00F1E4  0E00               	movlw	0
  1706  00F1E6  6E4B               	movwf	operate@maxmass,c
  1707  00F1E8  0EA0               	movlw	160
  1708  00F1EA  6E4C               	movwf	operate@maxmass+1,c
  1709  00F1EC  0E40               	movlw	64
  1710  00F1EE  6E4D               	movwf	operate@maxmass+2,c
  1711  00F1F0  0E00               	movlw	0
  1712  00F1F2  6E4F               	movwf	operate@washtime+1,c
  1713  00F1F4  0E03               	movlw	3
  1714  00F1F6  6E4E               	movwf	operate@washtime,c
  1715  00F1F8  0E01               	movlw	1
  1716  00F1FA  EC4F  F07D         	call	_operate
  1717                           
  1718                           ;WMC_2.c: 334: status (5,0);
  1719  00F1FE  0E00               	movlw	0
  1720  00F200  6E01               	movwf	status@c,c
  1721  00F202  0E05               	movlw	5
  1722  00F204  EC48  F074         	call	_status
  1723                           
  1724                           ;WMC_2.c: 335: operate(2,5.00,1);
  1725  00F208  0E00               	movlw	0
  1726  00F20A  6E4B               	movwf	operate@maxmass,c
  1727  00F20C  0EA0               	movlw	160
  1728  00F20E  6E4C               	movwf	operate@maxmass+1,c
  1729  00F210  0E40               	movlw	64
  1730  00F212  6E4D               	movwf	operate@maxmass+2,c
  1731  00F214  0E00               	movlw	0
  1732  00F216  6E4F               	movwf	operate@washtime+1,c
  1733  00F218  0E01               	movlw	1
  1734  00F21A  6E4E               	movwf	operate@washtime,c
  1735  00F21C  0E02               	movlw	2
  1736  00F21E  EC4F  F07D         	call	_operate
  1737                           
  1738                           ;WMC_2.c: 336: spin(1);
  1739  00F222  0E00               	movlw	0
  1740  00F224  6E20               	movwf	spin@spindelay+1,c
  1741  00F226  0E01               	movlw	1
  1742  00F228  6E1F               	movwf	spin@spindelay,c
  1743  00F22A  ECD8  F074         	call	_spin	;wreg free
  1744                           
  1745                           ;WMC_2.c: 337: break;
  1746  00F22E  0012               	return	
  1747  00F230                     l3019:
  1748                           
  1749                           ;WMC_2.c: 339: operate(1,5.00,4);
  1750  00F230  0E00               	movlw	0
  1751  00F232  6E4B               	movwf	operate@maxmass,c
  1752  00F234  0EA0               	movlw	160
  1753  00F236  6E4C               	movwf	operate@maxmass+1,c
  1754  00F238  0E40               	movlw	64
  1755  00F23A  6E4D               	movwf	operate@maxmass+2,c
  1756  00F23C  0E00               	movlw	0
  1757  00F23E  6E4F               	movwf	operate@washtime+1,c
  1758  00F240  0E04               	movlw	4
  1759  00F242  6E4E               	movwf	operate@washtime,c
  1760  00F244  0E01               	movlw	1
  1761  00F246  EC4F  F07D         	call	_operate
  1762                           
  1763                           ;WMC_2.c: 340: status (5,0);
  1764  00F24A  0E00               	movlw	0
  1765  00F24C  6E01               	movwf	status@c,c
  1766  00F24E  0E05               	movlw	5
  1767  00F250  EC48  F074         	call	_status
  1768                           
  1769                           ;WMC_2.c: 341: operate(2,5.00,2);
  1770  00F254  0E00               	movlw	0
  1771  00F256  6E4B               	movwf	operate@maxmass,c
  1772  00F258  0EA0               	movlw	160
  1773  00F25A  6E4C               	movwf	operate@maxmass+1,c
  1774  00F25C  0E40               	movlw	64
  1775  00F25E  6E4D               	movwf	operate@maxmass+2,c
  1776  00F260  0E00               	movlw	0
  1777  00F262  6E4F               	movwf	operate@washtime+1,c
  1778  00F264  0E02               	movlw	2
  1779  00F266  6E4E               	movwf	operate@washtime,c
  1780  00F268  0E02               	movlw	2
  1781  00F26A  EC4F  F07D         	call	_operate
  1782                           
  1783                           ;WMC_2.c: 342: spin(1);
  1784  00F26E  0E00               	movlw	0
  1785  00F270  6E20               	movwf	spin@spindelay+1,c
  1786  00F272  0E01               	movlw	1
  1787  00F274  6E1F               	movwf	spin@spindelay,c
  1788  00F276  ECD8  F074         	call	_spin	;wreg free
  1789                           
  1790                           ;WMC_2.c: 346: }
  1791                           
  1792                           ;WMC_2.c: 345: break;
  1793                           
  1794                           ;WMC_2.c: 344: default:
  1795                           
  1796                           ;WMC_2.c: 343: break;
  1797  00F27A  0012               	return	
  1798  00F27C                     l3029:
  1799  00F27C  C054  F056         	movff	cycle@c,??_cycle
  1800  00F280  C055  F057         	movff	cycle@c+1,??_cycle+1
  1801                           
  1802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1803                           ; Switch size 1, requested type "space"
  1804                           ; Number of cases is 1, Range of values is 0 to 0
  1805                           ; switch strategies available:
  1806                           ; Name         Instructions Cycles
  1807                           ; simple_byte            4     3 (average)
  1808                           ;	Chosen strategy is simple_byte
  1809  00F284  5057               	movf	??_cycle+1,w,c
  1810  00F286  0A00               	xorlw	0	; case 0
  1811  00F288  A4D8               	btfss	status,2,c
  1812  00F28A  0012               	return	
  1813                           
  1814                           ; Switch size 1, requested type "space"
  1815                           ; Number of cases is 3, Range of values is 1 to 3
  1816                           ; switch strategies available:
  1817                           ; Name         Instructions Cycles
  1818                           ; simple_byte           10     6 (average)
  1819                           ;	Chosen strategy is simple_byte
  1820  00F28C  5056               	movf	??_cycle,w,c
  1821  00F28E  0A01               	xorlw	1	; case 1
  1822  00F290  B4D8               	btfsc	status,2,c
  1823  00F292  D782               	goto	l3003
  1824  00F294  0A03               	xorlw	3	; case 2
  1825  00F296  B4D8               	btfsc	status,2,c
  1826  00F298  D7A5               	goto	l3011
  1827  00F29A  0A01               	xorlw	1	; case 3
  1828  00F29C  A4D8               	btfss	status,2,c
  1829  00F29E  0012               	return	
  1830  00F2A0  D7C7               	goto	l3019
  1831  00F2A2                     __end_of_cycle:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _spin *****************
  1842 ;; Defined at:
  1843 ;;		line 303 in file "WMC_2.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  spindelay       2   30[COMRAM] int 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1857 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;Total ram usage:        2 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    5
  1864 ;; This function calls:
  1865 ;;		_lcd_cmd
  1866 ;;		_lcd_str
  1867 ;;		_motor
  1868 ;;		_outlet
  1869 ;;		_remaintime
  1870 ;;		_status
  1871 ;; This function is called by:
  1872 ;;		_cycle
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text4
  1877  00E9B0                     __ptext4:
  1878                           	opt stack 0
  1879  00E9B0                     _spin:
  1880                           	opt stack 23
  1881                           
  1882                           ;WMC_2.c: 305: if (b!= 4)
  1883                           
  1884                           ;incstack = 0
  1885  00E9B0  0E04               	movlw	4
  1886  00E9B2  0100               	movlb	0	; () banked
  1887  00E9B4  19D0               	xorwf	_b& (0+255),w,b
  1888  00E9B6  0100               	movlb	0	; () banked
  1889  00E9B8  11D1               	iorwf	(_b+1)& (0+255),w,b
  1890  00E9BA  B4D8               	btfsc	status,2,c
  1891  00E9BC  0012               	return	
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;WMC_2.c: 306: {
  1895                           ;WMC_2.c: 307: status(4,1);
  1896  00E9BE  0E01               	movlw	1
  1897  00E9C0  6E01               	movwf	status@c,c
  1898  00E9C2  0E04               	movlw	4
  1899  00E9C4  EC48  F074         	call	_status
  1900                           
  1901                           ;WMC_2.c: 308: motor(1);
  1902  00E9C8  0E01               	movlw	1
  1903  00E9CA  ECFB  F071         	call	_motor
  1904                           
  1905                           ;WMC_2.c: 309: outlet(1);
  1906  00E9CE  0E01               	movlw	1
  1907  00E9D0  EC02  F072         	call	_outlet
  1908                           
  1909                           ;WMC_2.c: 310: lcd_cmd(0x01);
  1910  00E9D4  0E01               	movlw	1
  1911  00E9D6  EC76  F072         	call	_lcd_cmd
  1912                           
  1913                           ;WMC_2.c: 311: lcd_cmd(0x80);
  1914  00E9DA  0E80               	movlw	128
  1915  00E9DC  EC76  F072         	call	_lcd_cmd
  1916                           
  1917                           ;WMC_2.c: 312: lcd_str("spin");
  1918  00E9E0  0EF9               	movlw	low STR_16
  1919  00E9E2  6E07               	movwf	lcd_str@str,c
  1920  00E9E4  0EFF               	movlw	high STR_16
  1921  00E9E6  6E08               	movwf	lcd_str@str+1,c
  1922  00E9E8  EC4A  F075         	call	_lcd_str	;wreg free
  1923                           
  1924                           ;WMC_2.c: 313: remaintime(spindelay);
  1925  00E9EC  C01F  F019         	movff	spin@spindelay,remaintime@t
  1926  00E9F0  C020  F01A         	movff	spin@spindelay+1,remaintime@t+1
  1927  00E9F4  EC00  F077         	call	_remaintime	;wreg free
  1928                           
  1929                           ;WMC_2.c: 314: motor(0);
  1930  00E9F8  0E00               	movlw	0
  1931  00E9FA  ECFB  F071         	call	_motor
  1932                           
  1933                           ;WMC_2.c: 315: outlet(0);
  1934  00E9FE  0E00               	movlw	0
  1935  00EA00  EC02  F072         	call	_outlet
  1936                           
  1937                           ;WMC_2.c: 316: status(4,0);
  1938  00EA04  0E00               	movlw	0
  1939  00EA06  6E01               	movwf	status@c,c
  1940  00EA08  0E04               	movlw	4
  1941  00EA0A  EC48  F074         	call	_status
  1942                           
  1943                           ;WMC_2.c: 317: status(5,0);
  1944  00EA0E  0E00               	movlw	0
  1945  00EA10  6E01               	movwf	status@c,c
  1946  00EA12  0E05               	movlw	5
  1947  00EA14  EC48  F074         	call	_status
  1948  00EA18  0012               	return	
  1949  00EA1A                     __end_of_spin:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _operate *****************
  1960 ;; Defined at:
  1961 ;;		line 195 in file "WMC_2.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  s               1    wreg     unsigned char 
  1964 ;;  maxmass         3   74[COMRAM] float 
  1965 ;;  washtime        2   77[COMRAM] int 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  s               1   82[COMRAM] unsigned char 
  1968 ;;  stat            2   80[COMRAM] int 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1978 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;Total ram usage:        9 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    5
  1985 ;; This function calls:
  1986 ;;		___ftadd
  1987 ;;		___ftge
  1988 ;;		_button
  1989 ;;		_ftoa
  1990 ;;		_inlet
  1991 ;;		_lcd_cmd
  1992 ;;		_lcd_str
  1993 ;;		_mass
  1994 ;;		_motor
  1995 ;;		_mydelay
  1996 ;;		_outlet
  1997 ;;		_remaintime
  1998 ;;		_status
  1999 ;;		_strcat
  2000 ;;		_strcpy
  2001 ;; This function is called by:
  2002 ;;		_cycle
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text5
  2007  00FA9E                     __ptext5:
  2008                           	opt stack 0
  2009  00FA9E                     _operate:
  2010                           	opt stack 23
  2011                           
  2012                           ;incstack = 0
  2013                           ;operate@s stored from wreg
  2014  00FA9E  6E53               	movwf	operate@s,c
  2015                           
  2016                           ;WMC_2.c: 197: int stat;
  2017                           ;WMC_2.c: 198: if (b != 4)
  2018  00FAA0  0E04               	movlw	4
  2019  00FAA2  0100               	movlb	0	; () banked
  2020  00FAA4  19D0               	xorwf	_b& (0+255),w,b
  2021  00FAA6  0100               	movlb	0	; () banked
  2022  00FAA8  11D1               	iorwf	(_b+1)& (0+255),w,b
  2023  00FAAA  B4D8               	btfsc	status,2,c
  2024  00FAAC  0012               	return	
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;WMC_2.c: 199: {
  2028                           ;WMC_2.c: 200: inlet(1);
  2029  00FAAE  0E01               	movlw	1
  2030  00FAB0  ECF4  F071         	call	_inlet
  2031                           
  2032                           ;WMC_2.c: 201: lcd_cmd(0x01);
  2033  00FAB4  0E01               	movlw	1
  2034  00FAB6  EC76  F072         	call	_lcd_cmd
  2035                           
  2036                           ;WMC_2.c: 202: lcd_cmd(0x80);
  2037  00FABA  0E80               	movlw	128
  2038  00FABC  EC76  F072         	call	_lcd_cmd
  2039                           
  2040                           ;WMC_2.c: 203: lcd_str("open the door &");
  2041  00FAC0  0E4C               	movlw	low STR_1
  2042  00FAC2  6E07               	movwf	lcd_str@str,c
  2043  00FAC4  0EFF               	movlw	high STR_1
  2044  00FAC6  6E08               	movwf	lcd_str@str+1,c
  2045  00FAC8  EC4A  F075         	call	_lcd_str	;wreg free
  2046                           
  2047                           ;WMC_2.c: 204: lcd_cmd(0xC0);
  2048  00FACC  0EC0               	movlw	192
  2049  00FACE  EC76  F072         	call	_lcd_cmd
  2050                           
  2051                           ;WMC_2.c: 205: lcd_str("put the clothes");
  2052  00FAD2  0E6C               	movlw	low STR_2
  2053  00FAD4  6E07               	movwf	lcd_str@str,c
  2054  00FAD6  0EFF               	movlw	high STR_2
  2055  00FAD8  6E08               	movwf	lcd_str@str+1,c
  2056  00FADA  EC4A  F075         	call	_lcd_str	;wreg free
  2057                           
  2058                           ;WMC_2.c: 206: b = button();
  2059  00FADE  ECB5  F072         	call	_button	;wreg free
  2060  00FAE2  6E50               	movwf	??_operate& (0+255),c
  2061  00FAE4  5050               	movf	??_operate,w,c
  2062  00FAE6  0100               	movlb	0	; () banked
  2063  00FAE8  6FD0               	movwf	_b& (0+255),b
  2064  00FAEA  6BD1               	clrf	(_b+1)& (0+255),b
  2065                           
  2066                           ;WMC_2.c: 207: while( b != 5 )
  2067  00FAEC  D00E               	goto	l2847
  2068  00FAEE                     l2841:
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;WMC_2.c: 208: {
  2072                           ;WMC_2.c: 209: b = button();
  2073  00FAEE  ECB5  F072         	call	_button	;wreg free
  2074  00FAF2  6E50               	movwf	??_operate& (0+255),c
  2075  00FAF4  5050               	movf	??_operate,w,c
  2076  00FAF6  0100               	movlb	0	; () banked
  2077  00FAF8  6FD0               	movwf	_b& (0+255),b
  2078  00FAFA  6BD1               	clrf	(_b+1)& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;WMC_2.c: 210: if (b == 4) break;
  2082  00FAFC  0E04               	movlw	4
  2083  00FAFE  0100               	movlb	0	; () banked
  2084  00FB00  19D0               	xorwf	_b& (0+255),w,b
  2085  00FB02  0100               	movlb	0	; () banked
  2086  00FB04  11D1               	iorwf	(_b+1)& (0+255),w,b
  2087  00FB06  B4D8               	btfsc	status,2,c
  2088  00FB08  D007               	goto	l2849
  2089  00FB0A                     l2847:
  2090                           
  2091                           ; BSR set to: 0
  2092  00FB0A  0E05               	movlw	5
  2093  00FB0C  0100               	movlb	0	; () banked
  2094  00FB0E  19D0               	xorwf	_b& (0+255),w,b
  2095  00FB10  0100               	movlb	0	; () banked
  2096  00FB12  11D1               	iorwf	(_b+1)& (0+255),w,b
  2097  00FB14  A4D8               	btfss	status,2,c
  2098  00FB16  D7EB               	goto	l2841
  2099  00FB18                     l2849:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;WMC_2.c: 211: }
  2103                           ;WMC_2.c: 213: massindrum = mass();
  2104  00FB18  ECCB  F075         	call	_mass	;wreg free
  2105  00FB1C  C036  F05A         	movff	?_mass,_massindrum
  2106  00FB20  C037  F05B         	movff	?_mass+1,_massindrum+1
  2107  00FB24  C038  F05C         	movff	?_mass+2,_massindrum+2
  2108                           
  2109                           ;WMC_2.c: 214: if(massindrum <= maxmass && b != 4)
  2110  00FB28  C04B  F036         	movff	operate@maxmass,___ftge@ff1
  2111  00FB2C  C04C  F037         	movff	operate@maxmass+1,___ftge@ff1+1
  2112  00FB30  C04D  F038         	movff	operate@maxmass+2,___ftge@ff1+2
  2113  00FB34  C05A  F039         	movff	_massindrum,___ftge@ff2
  2114  00FB38  C05B  F03A         	movff	_massindrum+1,___ftge@ff2+1
  2115  00FB3C  C05C  F03B         	movff	_massindrum+2,___ftge@ff2+2
  2116  00FB40  EC0F  F076         	call	___ftge	;wreg free
  2117  00FB44  A0D8               	btfss	status,0,c
  2118  00FB46  D071               	goto	l2879
  2119  00FB48  0E04               	movlw	4
  2120  00FB4A  0100               	movlb	0	; () banked
  2121  00FB4C  19D0               	xorwf	_b& (0+255),w,b
  2122  00FB4E  0100               	movlb	0	; () banked
  2123  00FB50  11D1               	iorwf	(_b+1)& (0+255),w,b
  2124  00FB52  B4D8               	btfsc	status,2,c
  2125  00FB54  D06A               	goto	l2879
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;WMC_2.c: 215: {
  2129                           ;WMC_2.c: 216: lcd_cmd(0x01);
  2130  00FB56  0E01               	movlw	1
  2131  00FB58  EC76  F072         	call	_lcd_cmd
  2132                           
  2133                           ;WMC_2.c: 217: lcd_cmd(0x80);
  2134  00FB5C  0E80               	movlw	128
  2135  00FB5E  EC76  F072         	call	_lcd_cmd
  2136                           
  2137                           ;WMC_2.c: 218: lcd_str("    Warning!    ");
  2138  00FB62  0E2A               	movlw	low STR_3
  2139  00FB64  6E07               	movwf	lcd_str@str,c
  2140  00FB66  0EFF               	movlw	high STR_3
  2141  00FB68  6E08               	movwf	lcd_str@str+1,c
  2142  00FB6A  EC4A  F075         	call	_lcd_str	;wreg free
  2143                           
  2144                           ;WMC_2.c: 219: while(massindrum <= maxmass)
  2145  00FB6E  D04D               	goto	l2877
  2146  00FB70                     l2857:
  2147                           
  2148                           ;WMC_2.c: 220: {
  2149                           ;WMC_2.c: 221: b = button();
  2150  00FB70  ECB5  F072         	call	_button	;wreg free
  2151  00FB74  6E50               	movwf	??_operate& (0+255),c
  2152  00FB76  5050               	movf	??_operate,w,c
  2153  00FB78  0100               	movlb	0	; () banked
  2154  00FB7A  6FD0               	movwf	_b& (0+255),b
  2155  00FB7C  6BD1               	clrf	(_b+1)& (0+255),b
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;WMC_2.c: 222: if (b == 4) break;
  2159  00FB7E  0E04               	movlw	4
  2160  00FB80  0100               	movlb	0	; () banked
  2161  00FB82  19D0               	xorwf	_b& (0+255),w,b
  2162  00FB84  0100               	movlb	0	; () banked
  2163  00FB86  11D1               	iorwf	(_b+1)& (0+255),w,b
  2164  00FB88  B4D8               	btfsc	status,2,c
  2165  00FB8A  D04F               	goto	l2879
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;WMC_2.c: 223: buff = ftoa(massindrum,&stat);
  2169                           
  2170                           ; BSR set to: 0
  2171                           
  2172                           ; BSR set to: 0
  2173  00FB8C  C05A  F03C         	movff	_massindrum,ftoa@f
  2174  00FB90  C05B  F03D         	movff	_massindrum+1,ftoa@f+1
  2175  00FB94  C05C  F03E         	movff	_massindrum+2,ftoa@f+2
  2176  00FB98  0E51               	movlw	low operate@stat
  2177  00FB9A  6E3F               	movwf	ftoa@status,c
  2178  00FB9C  0E00               	movlw	high operate@stat
  2179  00FB9E  6E40               	movwf	ftoa@status+1,c
  2180  00FBA0  EC51  F079         	call	_ftoa	;wreg free
  2181  00FBA4  C03C  F05F         	movff	?_ftoa,_buff
  2182  00FBA8  C03D  F060         	movff	?_ftoa+1,_buff+1
  2183                           
  2184                           ;WMC_2.c: 224: strcpy(str,buff);
  2185  00FBAC  0EE3               	movlw	low _str
  2186  00FBAE  6E01               	movwf	strcpy@to,c
  2187  00FBB0  0E00               	movlw	high _str
  2188  00FBB2  6E02               	movwf	strcpy@to+1,c
  2189  00FBB4  C05F  F003         	movff	_buff,strcpy@from
  2190  00FBB8  C060  F004         	movff	_buff+1,strcpy@from+1
  2191  00FBBC  ECA0  F073         	call	_strcpy	;wreg free
  2192                           
  2193                           ;WMC_2.c: 225: strcpy(str1,"mass ");
  2194  00FBC0  0E61               	movlw	low _str1
  2195  00FBC2  6E01               	movwf	strcpy@to,c
  2196  00FBC4  0E00               	movlw	high _str1
  2197  00FBC6  6E02               	movwf	strcpy@to+1,c
  2198  00FBC8  0EE8               	movlw	low STR_4
  2199  00FBCA  6E03               	movwf	strcpy@from,c
  2200  00FBCC  0EFF               	movlw	high STR_4
  2201  00FBCE  6E04               	movwf	strcpy@from+1,c
  2202  00FBD0  ECA0  F073         	call	_strcpy	;wreg free
  2203                           
  2204                           ;WMC_2.c: 226: strcat(str1,str);
  2205  00FBD4  0E61               	movlw	low _str1
  2206  00FBD6  6E01               	movwf	strcat@to,c
  2207  00FBD8  0E00               	movlw	high _str1
  2208  00FBDA  6E02               	movwf	strcat@to+1,c
  2209  00FBDC  0EE3               	movlw	low _str
  2210  00FBDE  6E03               	movwf	strcat@from,c
  2211  00FBE0  0E00               	movlw	high _str
  2212  00FBE2  6E04               	movwf	strcat@from+1,c
  2213  00FBE4  EC7F  F073         	call	_strcat	;wreg free
  2214                           
  2215                           ;WMC_2.c: 227: lcd_cmd(0xC0);
  2216  00FBE8  0EC0               	movlw	192
  2217  00FBEA  EC76  F072         	call	_lcd_cmd
  2218                           
  2219                           ;WMC_2.c: 228: lcd_str(str1);
  2220  00FBEE  0E61               	movlw	low _str1
  2221  00FBF0  6E07               	movwf	lcd_str@str,c
  2222  00FBF2  0E00               	movlw	high _str1
  2223  00FBF4  6E08               	movwf	lcd_str@str+1,c
  2224  00FBF6  EC4A  F075         	call	_lcd_str	;wreg free
  2225                           
  2226                           ;WMC_2.c: 229: massindrum = mass();
  2227  00FBFA  ECCB  F075         	call	_mass	;wreg free
  2228  00FBFE  C036  F05A         	movff	?_mass,_massindrum
  2229  00FC02  C037  F05B         	movff	?_mass+1,_massindrum+1
  2230  00FC06  C038  F05C         	movff	?_mass+2,_massindrum+2
  2231  00FC0A                     l2877:
  2232  00FC0A  C04B  F036         	movff	operate@maxmass,___ftge@ff1
  2233  00FC0E  C04C  F037         	movff	operate@maxmass+1,___ftge@ff1+1
  2234  00FC12  C04D  F038         	movff	operate@maxmass+2,___ftge@ff1+2
  2235  00FC16  C05A  F039         	movff	_massindrum,___ftge@ff2
  2236  00FC1A  C05B  F03A         	movff	_massindrum+1,___ftge@ff2+1
  2237  00FC1E  C05C  F03B         	movff	_massindrum+2,___ftge@ff2+2
  2238  00FC22  EC0F  F076         	call	___ftge	;wreg free
  2239  00FC26  B0D8               	btfsc	status,0,c
  2240  00FC28  D7A3               	goto	l2857
  2241  00FC2A                     l2879:
  2242                           
  2243                           ;WMC_2.c: 230: }
  2244                           ;WMC_2.c: 231: }
  2245                           ;WMC_2.c: 232: if(massindrum > (maxmass+0.1) && b != 4)
  2246  00FC2A  0ECD               	movlw	205
  2247  00FC2C  6E2D               	movwf	___ftadd@f2,c
  2248  00FC2E  0ECC               	movlw	204
  2249  00FC30  6E2E               	movwf	___ftadd@f2+1,c
  2250  00FC32  0E3D               	movlw	61
  2251  00FC34  6E2F               	movwf	___ftadd@f2+2,c
  2252  00FC36  C04B  F02A         	movff	operate@maxmass,___ftadd@f1
  2253  00FC3A  C04C  F02B         	movff	operate@maxmass+1,___ftadd@f1+1
  2254  00FC3E  C04D  F02C         	movff	operate@maxmass+2,___ftadd@f1+2
  2255  00FC42  ECD8  F079         	call	___ftadd	;wreg free
  2256  00FC46  C02A  F036         	movff	?___ftadd,___ftge@ff1
  2257  00FC4A  C02B  F037         	movff	?___ftadd+1,___ftge@ff1+1
  2258  00FC4E  C02C  F038         	movff	?___ftadd+2,___ftge@ff1+2
  2259  00FC52  C05A  F039         	movff	_massindrum,___ftge@ff2
  2260  00FC56  C05B  F03A         	movff	_massindrum+1,___ftge@ff2+1
  2261  00FC5A  C05C  F03B         	movff	_massindrum+2,___ftge@ff2+2
  2262  00FC5E  EC0F  F076         	call	___ftge	;wreg free
  2263  00FC62  B0D8               	btfsc	status,0,c
  2264  00FC64  D051               	goto	l2897
  2265  00FC66  0E04               	movlw	4
  2266  00FC68  0100               	movlb	0	; () banked
  2267  00FC6A  19D0               	xorwf	_b& (0+255),w,b
  2268  00FC6C  0100               	movlb	0	; () banked
  2269  00FC6E  11D1               	iorwf	(_b+1)& (0+255),w,b
  2270  00FC70  B4D8               	btfsc	status,2,c
  2271  00FC72  D04A               	goto	l2897
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;WMC_2.c: 233: {
  2275                           ;WMC_2.c: 234: lcd_cmd(0x01);
  2276  00FC74  0E01               	movlw	1
  2277  00FC76  EC76  F072         	call	_lcd_cmd
  2278                           
  2279                           ;WMC_2.c: 235: lcd_cmd(0x80);
  2280  00FC7A  0E80               	movlw	128
  2281  00FC7C  EC76  F072         	call	_lcd_cmd
  2282                           
  2283                           ;WMC_2.c: 236: lcd_str("    Warning!    ");
  2284  00FC80  0E2A               	movlw	low STR_3
  2285  00FC82  6E07               	movwf	lcd_str@str,c
  2286  00FC84  0EFF               	movlw	high STR_3
  2287  00FC86  6E08               	movwf	lcd_str@str+1,c
  2288  00FC88  EC4A  F075         	call	_lcd_str	;wreg free
  2289                           
  2290                           ;WMC_2.c: 237: lcd_cmd(0xC0);
  2291  00FC8C  0EC0               	movlw	192
  2292  00FC8E  EC76  F072         	call	_lcd_cmd
  2293                           
  2294                           ;WMC_2.c: 238: lcd_str("mass over limit");
  2295  00FC92  0E7C               	movlw	low STR_6
  2296  00FC94  6E07               	movwf	lcd_str@str,c
  2297  00FC96  0EFF               	movlw	high STR_6
  2298  00FC98  6E08               	movwf	lcd_str@str+1,c
  2299  00FC9A  EC4A  F075         	call	_lcd_str	;wreg free
  2300                           
  2301                           ;WMC_2.c: 239: while(massindrum > (maxmass+0.1))
  2302  00FC9E  D016               	goto	l160
  2303  00FCA0                     l2889:
  2304                           
  2305                           ;WMC_2.c: 240: {
  2306                           ;WMC_2.c: 241: b = button();
  2307  00FCA0  ECB5  F072         	call	_button	;wreg free
  2308  00FCA4  6E50               	movwf	??_operate& (0+255),c
  2309  00FCA6  5050               	movf	??_operate,w,c
  2310  00FCA8  0100               	movlb	0	; () banked
  2311  00FCAA  6FD0               	movwf	_b& (0+255),b
  2312  00FCAC  6BD1               	clrf	(_b+1)& (0+255),b
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;WMC_2.c: 242: if (b == 4) break;
  2316  00FCAE  0E04               	movlw	4
  2317  00FCB0  0100               	movlb	0	; () banked
  2318  00FCB2  19D0               	xorwf	_b& (0+255),w,b
  2319  00FCB4  0100               	movlb	0	; () banked
  2320  00FCB6  11D1               	iorwf	(_b+1)& (0+255),w,b
  2321  00FCB8  B4D8               	btfsc	status,2,c
  2322  00FCBA  D026               	goto	l2897
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;WMC_2.c: 243: massindrum = mass();
  2326                           
  2327                           ; BSR set to: 0
  2328                           
  2329                           ; BSR set to: 0
  2330  00FCBC  ECCB  F075         	call	_mass	;wreg free
  2331  00FCC0  C036  F05A         	movff	?_mass,_massindrum
  2332  00FCC4  C037  F05B         	movff	?_mass+1,_massindrum+1
  2333  00FCC8  C038  F05C         	movff	?_mass+2,_massindrum+2
  2334  00FCCC                     l160:
  2335  00FCCC  0ECD               	movlw	205
  2336  00FCCE  6E2D               	movwf	___ftadd@f2,c
  2337  00FCD0  0ECC               	movlw	204
  2338  00FCD2  6E2E               	movwf	___ftadd@f2+1,c
  2339  00FCD4  0E3D               	movlw	61
  2340  00FCD6  6E2F               	movwf	___ftadd@f2+2,c
  2341  00FCD8  C04B  F02A         	movff	operate@maxmass,___ftadd@f1
  2342  00FCDC  C04C  F02B         	movff	operate@maxmass+1,___ftadd@f1+1
  2343  00FCE0  C04D  F02C         	movff	operate@maxmass+2,___ftadd@f1+2
  2344  00FCE4  ECD8  F079         	call	___ftadd	;wreg free
  2345  00FCE8  C02A  F036         	movff	?___ftadd,___ftge@ff1
  2346  00FCEC  C02B  F037         	movff	?___ftadd+1,___ftge@ff1+1
  2347  00FCF0  C02C  F038         	movff	?___ftadd+2,___ftge@ff1+2
  2348  00FCF4  C05A  F039         	movff	_massindrum,___ftge@ff2
  2349  00FCF8  C05B  F03A         	movff	_massindrum+1,___ftge@ff2+1
  2350  00FCFC  C05C  F03B         	movff	_massindrum+2,___ftge@ff2+2
  2351  00FD00  EC0F  F076         	call	___ftge	;wreg free
  2352  00FD04  A0D8               	btfss	status,0,c
  2353  00FD06  D7CC               	goto	l2889
  2354  00FD08                     l2897:
  2355                           
  2356                           ;WMC_2.c: 244: }
  2357                           ;WMC_2.c: 245: }
  2358                           ;WMC_2.c: 246: inlet(0);
  2359  00FD08  0E00               	movlw	0
  2360  00FD0A  ECF4  F071         	call	_inlet
  2361                           
  2362                           ;WMC_2.c: 248: if(b != 4)
  2363  00FD0E  0E04               	movlw	4
  2364  00FD10  0100               	movlb	0	; () banked
  2365  00FD12  19D0               	xorwf	_b& (0+255),w,b
  2366  00FD14  0100               	movlb	0	; () banked
  2367  00FD16  11D1               	iorwf	(_b+1)& (0+255),w,b
  2368  00FD18  B4D8               	btfsc	status,2,c
  2369  00FD1A  0012               	return	
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;WMC_2.c: 249: {
  2373                           ;WMC_2.c: 250: status(5,1);
  2374  00FD1C  0E01               	movlw	1
  2375  00FD1E  6E01               	movwf	status@c,c
  2376  00FD20  0E05               	movlw	5
  2377  00FD22  EC48  F074         	call	_status
  2378                           
  2379                           ;WMC_2.c: 251: status(s,1);
  2380  00FD26  0E01               	movlw	1
  2381  00FD28  6E01               	movwf	status@c,c
  2382  00FD2A  5053               	movf	operate@s,w,c
  2383  00FD2C  EC48  F074         	call	_status
  2384                           
  2385                           ;WMC_2.c: 252: if (s == 1)
  2386  00FD30  0453               	decf	operate@s,w,c
  2387  00FD32  A4D8               	btfss	status,2,c
  2388  00FD34  D063               	goto	l2933
  2389                           
  2390                           ;WMC_2.c: 253: {
  2391                           ;WMC_2.c: 254: lcd_cmd(0x01);
  2392  00FD36  0E01               	movlw	1
  2393  00FD38  EC76  F072         	call	_lcd_cmd
  2394                           
  2395                           ;WMC_2.c: 255: lcd_cmd(0x80);
  2396  00FD3C  0E80               	movlw	128
  2397  00FD3E  EC76  F072         	call	_lcd_cmd
  2398                           
  2399                           ;WMC_2.c: 256: if (cycl == 1) lcd_str("Normal");
  2400  00FD42  0471               	decf	_cycl,w,c
  2401  00FD44  1072               	iorwf	_cycl+1,w,c
  2402  00FD46  A4D8               	btfss	status,2,c
  2403  00FD48  D007               	goto	l2911
  2404  00FD4A  0ECF               	movlw	low (STR_18+4)
  2405  00FD4C  6E07               	movwf	lcd_str@str,c
  2406  00FD4E  0EFF               	movlw	high (STR_18+4)
  2407  00FD50  6E08               	movwf	lcd_str@str+1,c
  2408  00FD52  EC4A  F075         	call	_lcd_str	;wreg free
  2409  00FD56  D012               	goto	l2917
  2410  00FD58                     l2911:
  2411                           
  2412                           ;WMC_2.c: 257: else if (cycl == 2) lcd_str("Delicate");
  2413  00FD58  0E02               	movlw	2
  2414  00FD5A  1871               	xorwf	_cycl,w,c
  2415  00FD5C  1072               	iorwf	_cycl+1,w,c
  2416  00FD5E  A4D8               	btfss	status,2,c
  2417  00FD60  D007               	goto	l2915
  2418  00FD62  0EAB               	movlw	low (STR_19+4)
  2419  00FD64  6E07               	movwf	lcd_str@str,c
  2420  00FD66  0EFF               	movlw	high (STR_19+4)
  2421  00FD68  6E08               	movwf	lcd_str@str+1,c
  2422  00FD6A  EC4A  F075         	call	_lcd_str	;wreg free
  2423  00FD6E  D006               	goto	l2917
  2424  00FD70                     l2915:
  2425                           
  2426                           ;WMC_2.c: 258: else lcd_str("Quick");
  2427  00FD70  0EE2               	movlw	low (STR_20+3)
  2428  00FD72  6E07               	movwf	lcd_str@str,c
  2429  00FD74  0EFF               	movlw	high (STR_20+3)
  2430  00FD76  6E08               	movwf	lcd_str@str+1,c
  2431  00FD78  EC4A  F075         	call	_lcd_str	;wreg free
  2432  00FD7C                     l2917:
  2433                           
  2434                           ;WMC_2.c: 259: buff = ftoa(maxmass,&stat);
  2435  00FD7C  C04B  F03C         	movff	operate@maxmass,ftoa@f
  2436  00FD80  C04C  F03D         	movff	operate@maxmass+1,ftoa@f+1
  2437  00FD84  C04D  F03E         	movff	operate@maxmass+2,ftoa@f+2
  2438  00FD88  0E51               	movlw	low operate@stat
  2439  00FD8A  6E3F               	movwf	ftoa@status,c
  2440  00FD8C  0E00               	movlw	high operate@stat
  2441  00FD8E  6E40               	movwf	ftoa@status+1,c
  2442  00FD90  EC51  F079         	call	_ftoa	;wreg free
  2443  00FD94  C03C  F05F         	movff	?_ftoa,_buff
  2444  00FD98  C03D  F060         	movff	?_ftoa+1,_buff+1
  2445                           
  2446                           ;WMC_2.c: 260: strcpy(str,buff);
  2447  00FD9C  0EE3               	movlw	low _str
  2448  00FD9E  6E01               	movwf	strcpy@to,c
  2449  00FDA0  0E00               	movlw	high _str
  2450  00FDA2  6E02               	movwf	strcpy@to+1,c
  2451  00FDA4  C05F  F003         	movff	_buff,strcpy@from
  2452  00FDA8  C060  F004         	movff	_buff+1,strcpy@from+1
  2453  00FDAC  ECA0  F073         	call	_strcpy	;wreg free
  2454                           
  2455                           ;WMC_2.c: 261: strcpy(str1,"mass ");
  2456  00FDB0  0E61               	movlw	low _str1
  2457  00FDB2  6E01               	movwf	strcpy@to,c
  2458  00FDB4  0E00               	movlw	high _str1
  2459  00FDB6  6E02               	movwf	strcpy@to+1,c
  2460  00FDB8  0EE8               	movlw	low STR_4
  2461  00FDBA  6E03               	movwf	strcpy@from,c
  2462  00FDBC  0EFF               	movlw	high STR_4
  2463  00FDBE  6E04               	movwf	strcpy@from+1,c
  2464  00FDC0  ECA0  F073         	call	_strcpy	;wreg free
  2465                           
  2466                           ;WMC_2.c: 262: strcat(str1,str);
  2467  00FDC4  0E61               	movlw	low _str1
  2468  00FDC6  6E01               	movwf	strcat@to,c
  2469  00FDC8  0E00               	movlw	high _str1
  2470  00FDCA  6E02               	movwf	strcat@to+1,c
  2471  00FDCC  0EE3               	movlw	low _str
  2472  00FDCE  6E03               	movwf	strcat@from,c
  2473  00FDD0  0E00               	movlw	high _str
  2474  00FDD2  6E04               	movwf	strcat@from+1,c
  2475  00FDD4  EC7F  F073         	call	_strcat	;wreg free
  2476                           
  2477                           ;WMC_2.c: 263: lcd_cmd(0xC0);
  2478  00FDD8  0EC0               	movlw	192
  2479  00FDDA  EC76  F072         	call	_lcd_cmd
  2480                           
  2481                           ;WMC_2.c: 264: lcd_str("                ");
  2482  00FDDE  0E19               	movlw	low STR_11
  2483  00FDE0  6E07               	movwf	lcd_str@str,c
  2484  00FDE2  0EFF               	movlw	high STR_11
  2485  00FDE4  6E08               	movwf	lcd_str@str+1,c
  2486  00FDE6  EC4A  F075         	call	_lcd_str	;wreg free
  2487                           
  2488                           ;WMC_2.c: 265: lcd_cmd(0xC0);
  2489  00FDEA  0EC0               	movlw	192
  2490  00FDEC  EC76  F072         	call	_lcd_cmd
  2491                           
  2492                           ;WMC_2.c: 266: lcd_str(str1);
  2493  00FDF0  0E61               	movlw	low _str1
  2494  00FDF2  6E07               	movwf	lcd_str@str,c
  2495  00FDF4  0E00               	movlw	high _str1
  2496  00FDF6  6E08               	movwf	lcd_str@str+1,c
  2497  00FDF8  EC4A  F075         	call	_lcd_str	;wreg free
  2498  00FDFC                     l2933:
  2499                           
  2500                           ;WMC_2.c: 267: }
  2501                           ;WMC_2.c: 268: mydelay(100);
  2502  00FDFC  0E00               	movlw	0
  2503  00FDFE  6E08               	movwf	mydelay@n+1,c
  2504  00FE00  0E64               	movlw	100
  2505  00FE02  6E07               	movwf	mydelay@n,c
  2506  00FE04  EC76  F074         	call	_mydelay	;wreg free
  2507                           
  2508                           ;WMC_2.c: 269: if(s == 1 && b != 4)
  2509  00FE08  0453               	decf	operate@s,w,c
  2510  00FE0A  A4D8               	btfss	status,2,c
  2511  00FE0C  D023               	goto	l2947
  2512  00FE0E  0E04               	movlw	4
  2513  00FE10  0100               	movlb	0	; () banked
  2514  00FE12  19D0               	xorwf	_b& (0+255),w,b
  2515  00FE14  0100               	movlb	0	; () banked
  2516  00FE16  11D1               	iorwf	(_b+1)& (0+255),w,b
  2517  00FE18  B4D8               	btfsc	status,2,c
  2518  00FE1A  D01C               	goto	l2947
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;WMC_2.c: 270: {
  2522                           ;WMC_2.c: 271: status(3,1);
  2523  00FE1C  0E01               	movlw	1
  2524  00FE1E  6E01               	movwf	status@c,c
  2525  00FE20  0E03               	movlw	3
  2526  00FE22  EC48  F074         	call	_status
  2527                           
  2528                           ;WMC_2.c: 272: lcd_cmd(0x01);
  2529  00FE26  0E01               	movlw	1
  2530  00FE28  EC76  F072         	call	_lcd_cmd
  2531                           
  2532                           ;WMC_2.c: 273: lcd_cmd(0x80);
  2533  00FE2C  0E80               	movlw	128
  2534  00FE2E  EC76  F072         	call	_lcd_cmd
  2535                           
  2536                           ;WMC_2.c: 274: lcd_str("Dispense");
  2537  00FE32  0ED6               	movlw	low STR_12
  2538  00FE34  6E07               	movwf	lcd_str@str,c
  2539  00FE36  0EFF               	movlw	high STR_12
  2540  00FE38  6E08               	movwf	lcd_str@str+1,c
  2541  00FE3A  EC4A  F075         	call	_lcd_str	;wreg free
  2542                           
  2543                           ;WMC_2.c: 275: remaintime(2);
  2544  00FE3E  0E00               	movlw	0
  2545  00FE40  6E1A               	movwf	remaintime@t+1,c
  2546  00FE42  0E02               	movlw	2
  2547  00FE44  6E19               	movwf	remaintime@t,c
  2548  00FE46  EC00  F077         	call	_remaintime	;wreg free
  2549                           
  2550                           ;WMC_2.c: 276: status(3,0);
  2551  00FE4A  0E00               	movlw	0
  2552  00FE4C  6E01               	movwf	status@c,c
  2553  00FE4E  0E03               	movlw	3
  2554  00FE50  EC48  F074         	call	_status
  2555  00FE54                     l2947:
  2556                           
  2557                           ;WMC_2.c: 277: }
  2558                           ;WMC_2.c: 278: if (b !=4)
  2559  00FE54  0E04               	movlw	4
  2560  00FE56  0100               	movlb	0	; () banked
  2561  00FE58  19D0               	xorwf	_b& (0+255),w,b
  2562  00FE5A  0100               	movlb	0	; () banked
  2563  00FE5C  11D1               	iorwf	(_b+1)& (0+255),w,b
  2564  00FE5E  B4D8               	btfsc	status,2,c
  2565  00FE60  D022               	goto	l2965
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;WMC_2.c: 279: {
  2569                           ;WMC_2.c: 280: motor(1);
  2570  00FE62  0E01               	movlw	1
  2571  00FE64  ECFB  F071         	call	_motor
  2572                           
  2573                           ;WMC_2.c: 281: lcd_cmd(0x01);
  2574  00FE68  0E01               	movlw	1
  2575  00FE6A  EC76  F072         	call	_lcd_cmd
  2576                           
  2577                           ;WMC_2.c: 282: lcd_cmd(0x80);
  2578  00FE6E  0E80               	movlw	128
  2579  00FE70  EC76  F072         	call	_lcd_cmd
  2580                           
  2581                           ;WMC_2.c: 283: if (s == 1) lcd_str("Wash");
  2582  00FE74  0453               	decf	operate@s,w,c
  2583  00FE76  A4D8               	btfss	status,2,c
  2584  00FE78  D007               	goto	l2959
  2585  00FE7A  0EF4               	movlw	low STR_13
  2586  00FE7C  6E07               	movwf	lcd_str@str,c
  2587  00FE7E  0EFF               	movlw	high STR_13
  2588  00FE80  6E08               	movwf	lcd_str@str+1,c
  2589  00FE82  EC4A  F075         	call	_lcd_str	;wreg free
  2590  00FE86  D006               	goto	l2961
  2591  00FE88                     l2959:
  2592                           
  2593                           ;WMC_2.c: 284: else lcd_str("Rinse");
  2594  00FE88  0EEE               	movlw	low STR_14
  2595  00FE8A  6E07               	movwf	lcd_str@str,c
  2596  00FE8C  0EFF               	movlw	high STR_14
  2597  00FE8E  6E08               	movwf	lcd_str@str+1,c
  2598  00FE90  EC4A  F075         	call	_lcd_str	;wreg free
  2599  00FE94                     l2961:
  2600                           
  2601                           ;WMC_2.c: 285: remaintime(washtime);
  2602  00FE94  C04E  F019         	movff	operate@washtime,remaintime@t
  2603  00FE98  C04F  F01A         	movff	operate@washtime+1,remaintime@t+1
  2604  00FE9C  EC00  F077         	call	_remaintime	;wreg free
  2605                           
  2606                           ;WMC_2.c: 286: motor(0);
  2607  00FEA0  0E00               	movlw	0
  2608  00FEA2  ECFB  F071         	call	_motor
  2609  00FEA6                     l2965:
  2610                           
  2611                           ;WMC_2.c: 287: }
  2612                           ;WMC_2.c: 288: if (b !=4)
  2613  00FEA6  0E04               	movlw	4
  2614  00FEA8  0100               	movlb	0	; () banked
  2615  00FEAA  19D0               	xorwf	_b& (0+255),w,b
  2616  00FEAC  0100               	movlb	0	; () banked
  2617  00FEAE  11D1               	iorwf	(_b+1)& (0+255),w,b
  2618  00FEB0  B4D8               	btfsc	status,2,c
  2619  00FEB2  0012               	return	
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;WMC_2.c: 289: {
  2623                           ;WMC_2.c: 290: outlet(1);
  2624  00FEB4  0E01               	movlw	1
  2625  00FEB6  EC02  F072         	call	_outlet
  2626                           
  2627                           ;WMC_2.c: 291: lcd_cmd(0x01);
  2628  00FEBA  0E01               	movlw	1
  2629  00FEBC  EC76  F072         	call	_lcd_cmd
  2630                           
  2631                           ;WMC_2.c: 292: lcd_cmd(0x80);
  2632  00FEC0  0E80               	movlw	128
  2633  00FEC2  EC76  F072         	call	_lcd_cmd
  2634                           
  2635                           ;WMC_2.c: 293: lcd_str("drain the water");
  2636  00FEC6  0E5C               	movlw	low STR_15
  2637  00FEC8  6E07               	movwf	lcd_str@str,c
  2638  00FECA  0EFF               	movlw	high STR_15
  2639  00FECC  6E08               	movwf	lcd_str@str+1,c
  2640  00FECE  EC4A  F075         	call	_lcd_str	;wreg free
  2641                           
  2642                           ;WMC_2.c: 294: remaintime(washtime);
  2643  00FED2  C04E  F019         	movff	operate@washtime,remaintime@t
  2644  00FED6  C04F  F01A         	movff	operate@washtime+1,remaintime@t+1
  2645  00FEDA  EC00  F077         	call	_remaintime	;wreg free
  2646                           
  2647                           ;WMC_2.c: 295: outlet(0);
  2648  00FEDE  0E00               	movlw	0
  2649  00FEE0  EC02  F072         	call	_outlet
  2650                           
  2651                           ;WMC_2.c: 296: status(s,0);
  2652  00FEE4  0E00               	movlw	0
  2653  00FEE6  6E01               	movwf	status@c,c
  2654  00FEE8  5053               	movf	operate@s,w,c
  2655  00FEEA  EC48  F074         	call	_status
  2656  00FEEE  0012               	return	
  2657  00FEF0                     __end_of_operate:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           status	equ	0xFD8
  2666                           
  2667 ;; *************** function _status *****************
  2668 ;; Defined at:
  2669 ;;		line 167 in file "WMC_2.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  s               1    wreg     unsigned char 
  2672 ;;  c               1    0[COMRAM] unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  s               1    1[COMRAM] unsigned char 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2, status,0
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2684 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;Total ram usage:        2 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_operate
  2694 ;;		_spin
  2695 ;;		_cycle
  2696 ;;		_stop
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text6
  2701  00E890                     __ptext6:
  2702                           	opt stack 0
  2703  00E890                     _status:
  2704                           	opt stack 29
  2705                           
  2706                           ;incstack = 0
  2707                           ;status@s stored from wreg
  2708  00E890  6E02               	movwf	status@s,c
  2709                           
  2710                           ;WMC_2.c: 169: if(s == 1) LATBbits.LB4 = c;
  2711  00E892  0402               	decf	status@s,w,c
  2712  00E894  A4D8               	btfss	status,2,c
  2713  00E896  D005               	goto	l2739
  2714  00E898  B001               	btfsc	status@c,0,c
  2715  00E89A  D002               	bra	u2645
  2716  00E89C  988A               	bcf	3978,4,c	;volatile
  2717  00E89E  D001               	bra	u2646
  2718  00E8A0                     u2645:
  2719  00E8A0  888A               	bsf	3978,4,c	;volatile
  2720  00E8A2                     u2646:
  2721  00E8A2                     l2739:
  2722                           
  2723                           ;WMC_2.c: 170: if(s == 2) LATBbits.LB5 = c;
  2724  00E8A2  0E02               	movlw	2
  2725  00E8A4  1802               	xorwf	status@s,w,c
  2726  00E8A6  A4D8               	btfss	status,2,c
  2727  00E8A8  D005               	goto	l2743
  2728  00E8AA  B001               	btfsc	status@c,0,c
  2729  00E8AC  D002               	bra	u2665
  2730  00E8AE  9A8A               	bcf	3978,5,c	;volatile
  2731  00E8B0  D001               	bra	u2666
  2732  00E8B2                     u2665:
  2733  00E8B2  8A8A               	bsf	3978,5,c	;volatile
  2734  00E8B4                     u2666:
  2735  00E8B4                     l2743:
  2736                           
  2737                           ;WMC_2.c: 171: if(s == 3) LATBbits.LB6 = c;
  2738  00E8B4  0E03               	movlw	3
  2739  00E8B6  1802               	xorwf	status@s,w,c
  2740  00E8B8  A4D8               	btfss	status,2,c
  2741  00E8BA  D005               	goto	l2747
  2742  00E8BC  B001               	btfsc	status@c,0,c
  2743  00E8BE  D002               	bra	u2685
  2744  00E8C0  9C8A               	bcf	3978,6,c	;volatile
  2745  00E8C2  D001               	bra	u2686
  2746  00E8C4                     u2685:
  2747  00E8C4  8C8A               	bsf	3978,6,c	;volatile
  2748  00E8C6                     u2686:
  2749  00E8C6                     l2747:
  2750                           
  2751                           ;WMC_2.c: 172: if(s == 4) LATCbits.LC1 = c;
  2752  00E8C6  0E04               	movlw	4
  2753  00E8C8  1802               	xorwf	status@s,w,c
  2754  00E8CA  A4D8               	btfss	status,2,c
  2755  00E8CC  D005               	goto	l2751
  2756  00E8CE  B001               	btfsc	status@c,0,c
  2757  00E8D0  D002               	bra	u2705
  2758  00E8D2  928B               	bcf	3979,1,c	;volatile
  2759  00E8D4  D001               	bra	u2706
  2760  00E8D6                     u2705:
  2761  00E8D6  828B               	bsf	3979,1,c	;volatile
  2762  00E8D8                     u2706:
  2763  00E8D8                     l2751:
  2764                           
  2765                           ;WMC_2.c: 173: if(s == 5) PORTBbits.RB7 = c;
  2766  00E8D8  0E05               	movlw	5
  2767  00E8DA  1802               	xorwf	status@s,w,c
  2768  00E8DC  A4D8               	btfss	status,2,c
  2769  00E8DE  0012               	return	
  2770  00E8E0  B001               	btfsc	status@c,0,c
  2771  00E8E2  D002               	bra	u2725
  2772  00E8E4  9E81               	bcf	3969,7,c	;volatile
  2773  00E8E6  D001               	bra	u2726
  2774  00E8E8                     u2725:
  2775  00E8E8  8E81               	bsf	3969,7,c	;volatile
  2776  00E8EA                     u2726:
  2777  00E8EA  0012               	return	
  2778  00E8EC                     __end_of_status:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _remaintime *****************
  2789 ;; Defined at:
  2790 ;;		line 429 in file "WMC_2.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  t               2   24[COMRAM] int 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  i               2   28[COMRAM] unsigned int 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:        6 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    4
  2811 ;; This function calls:
  2812 ;;		___wmul
  2813 ;;		_itoa
  2814 ;;		_lcd_cmd
  2815 ;;		_lcd_str
  2816 ;;		_lock
  2817 ;;		_mydelay
  2818 ;;		_strcat
  2819 ;;		_strcpy
  2820 ;; This function is called by:
  2821 ;;		_operate
  2822 ;;		_spin
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text7
  2827  00EE00                     __ptext7:
  2828                           	opt stack 0
  2829  00EE00                     _remaintime:
  2830                           	opt stack 23
  2831                           
  2832                           ;WMC_2.c: 431: for(unsigned int i=0; i<t; i++)
  2833                           
  2834                           ;incstack = 0
  2835  00EE00  0E00               	movlw	0
  2836  00EE02  6E1E               	movwf	remaintime@i+1,c
  2837  00EE04  0E00               	movlw	0
  2838  00EE06  6E1D               	movwf	remaintime@i,c
  2839  00EE08  D058               	goto	l2805
  2840  00EE0A                     l2783:
  2841                           
  2842                           ;WMC_2.c: 432: {
  2843                           ;WMC_2.c: 433: if (b == 4) break;
  2844  00EE0A  0E04               	movlw	4
  2845  00EE0C  0100               	movlb	0	; () banked
  2846  00EE0E  19D0               	xorwf	_b& (0+255),w,b
  2847  00EE10  0100               	movlb	0	; () banked
  2848  00EE12  11D1               	iorwf	(_b+1)& (0+255),w,b
  2849  00EE14  B4D8               	btfsc	status,2,c
  2850  00EE16  0012               	return	
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;WMC_2.c: 434: if (b == 5) lock();
  2854                           
  2855                           ; BSR set to: 0
  2856                           
  2857                           ; BSR set to: 0
  2858  00EE18  0E05               	movlw	5
  2859  00EE1A  0100               	movlb	0	; () banked
  2860  00EE1C  19D0               	xorwf	_b& (0+255),w,b
  2861  00EE1E  0100               	movlb	0	; () banked
  2862  00EE20  11D1               	iorwf	(_b+1)& (0+255),w,b
  2863  00EE22  B4D8               	btfsc	status,2,c
  2864                           
  2865                           ; BSR set to: 0
  2866  00EE24  ECA0  F072         	call	_lock	;wreg free
  2867                           
  2868                           ;WMC_2.c: 435: lcd_cmd(0xC0);
  2869  00EE28  0EC0               	movlw	192
  2870  00EE2A  EC76  F072         	call	_lcd_cmd
  2871                           
  2872                           ;WMC_2.c: 436: strcpy(str,"Remaining: ");
  2873  00EE2E  0EE3               	movlw	low _str
  2874  00EE30  6E01               	movwf	strcpy@to,c
  2875  00EE32  0E00               	movlw	high _str
  2876  00EE34  6E02               	movwf	strcpy@to+1,c
  2877  00EE36  0EB4               	movlw	low STR_21
  2878  00EE38  6E03               	movwf	strcpy@from,c
  2879  00EE3A  0EFF               	movlw	high STR_21
  2880  00EE3C  6E04               	movwf	strcpy@from+1,c
  2881  00EE3E  ECA0  F073         	call	_strcpy	;wreg free
  2882                           
  2883                           ;WMC_2.c: 437: itoa(str1,t-i,10);
  2884  00EE42  0E61               	movlw	low _str1
  2885  00EE44  6E11               	movwf	itoa@buf,c
  2886  00EE46  0E00               	movlw	high _str1
  2887  00EE48  6E12               	movwf	itoa@buf+1,c
  2888  00EE4A  C01D  F01B         	movff	remaintime@i,??_remaintime
  2889  00EE4E  C01E  F01C         	movff	remaintime@i+1,??_remaintime+1
  2890  00EE52  1E1B               	comf	??_remaintime,f,c
  2891  00EE54  1E1C               	comf	??_remaintime+1,f,c
  2892  00EE56  4A1B               	infsnz	??_remaintime,f,c
  2893  00EE58  2A1C               	incf	??_remaintime+1,f,c
  2894  00EE5A  5019               	movf	remaintime@t,w,c
  2895  00EE5C  241B               	addwf	??_remaintime,w,c
  2896  00EE5E  6E13               	movwf	itoa@val,c
  2897  00EE60  501A               	movf	remaintime@t+1,w,c
  2898  00EE62  201C               	addwfc	??_remaintime+1,w,c
  2899  00EE64  6E14               	movwf	itoa@val+1,c
  2900  00EE66  0E00               	movlw	0
  2901  00EE68  6E16               	movwf	itoa@base+1,c
  2902  00EE6A  0E0A               	movlw	10
  2903  00EE6C  6E15               	movwf	itoa@base,c
  2904  00EE6E  EC5E  F073         	call	_itoa	;wreg free
  2905                           
  2906                           ;WMC_2.c: 438: strcat(str,str1);
  2907  00EE72  0EE3               	movlw	low _str
  2908  00EE74  6E01               	movwf	strcat@to,c
  2909  00EE76  0E00               	movlw	high _str
  2910  00EE78  6E02               	movwf	strcat@to+1,c
  2911  00EE7A  0E61               	movlw	low _str1
  2912  00EE7C  6E03               	movwf	strcat@from,c
  2913  00EE7E  0E00               	movlw	high _str1
  2914  00EE80  6E04               	movwf	strcat@from+1,c
  2915  00EE82  EC7F  F073         	call	_strcat	;wreg free
  2916                           
  2917                           ;WMC_2.c: 439: lcd_str(str);
  2918  00EE86  0EE3               	movlw	low _str
  2919  00EE88  6E07               	movwf	lcd_str@str,c
  2920  00EE8A  0E00               	movlw	high _str
  2921  00EE8C  6E08               	movwf	lcd_str@str+1,c
  2922  00EE8E  EC4A  F075         	call	_lcd_str	;wreg free
  2923                           
  2924                           ;WMC_2.c: 440: mydelay((i+1)*100);
  2925  00EE92  0E01               	movlw	1
  2926  00EE94  241D               	addwf	remaintime@i,w,c
  2927  00EE96  6E01               	movwf	___wmul@multiplier,c
  2928  00EE98  0E00               	movlw	0
  2929  00EE9A  201E               	addwfc	remaintime@i+1,w,c
  2930  00EE9C  6E02               	movwf	___wmul@multiplier+1,c
  2931  00EE9E  0E00               	movlw	0
  2932  00EEA0  6E04               	movwf	___wmul@multiplicand+1,c
  2933  00EEA2  0E64               	movlw	100
  2934  00EEA4  6E03               	movwf	___wmul@multiplicand,c
  2935  00EEA6  EC4E  F072         	call	___wmul	;wreg free
  2936  00EEAA  C001  F007         	movff	?___wmul,mydelay@n
  2937  00EEAE  C002  F008         	movff	?___wmul+1,mydelay@n+1
  2938  00EEB2  EC76  F074         	call	_mydelay	;wreg free
  2939  00EEB6  4A1D               	infsnz	remaintime@i,f,c
  2940  00EEB8  2A1E               	incf	remaintime@i+1,f,c
  2941  00EEBA                     l2805:
  2942  00EEBA  5019               	movf	remaintime@t,w,c
  2943  00EEBC  5C1D               	subwf	remaintime@i,w,c
  2944  00EEBE  501A               	movf	remaintime@t+1,w,c
  2945  00EEC0  581E               	subwfb	remaintime@i+1,w,c
  2946  00EEC2  B0D8               	btfsc	status,0,c
  2947  00EEC4  0012               	return	
  2948  00EEC6  D7A1               	goto	l2783
  2949  00EEC8                     __end_of_remaintime:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _strcpy *****************
  2960 ;; Defined at:
  2961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  to              2    0[COMRAM] PTR unsigned char 
  2964 ;;		 -> menu@menu(80), str1(16), str(16), 
  2965 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2966 ;;		 -> NULL(0), ftoa@buf(17), STR_21(12), STR_20(9), 
  2967 ;;		 -> STR_19(13), STR_18(11), STR_17(14), STR_10(6), 
  2968 ;;		 -> STR_4(6), 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2971 ;;		 -> menu@menu(80), str1(16), str(16), 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  2    0[COMRAM] PTR unsigned char 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2981 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;Total ram usage:        6 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; This function calls:
  2988 ;;		Nothing
  2989 ;; This function is called by:
  2990 ;;		_operate
  2991 ;;		_menu
  2992 ;;		_remaintime
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text8
  2997  00E740                     __ptext8:
  2998                           	opt stack 0
  2999  00E740                     _strcpy:
  3000                           	opt stack 29
  3001                           
  3002                           ;incstack = 0
  3003  00E740  C001  F005         	movff	strcpy@to,strcpy@cp
  3004  00E744  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  3005  00E748  D004               	goto	l2423
  3006  00E74A                     l2421:
  3007  00E74A  4A05               	infsnz	strcpy@cp,f,c
  3008  00E74C  2A06               	incf	strcpy@cp+1,f,c
  3009  00E74E  4A03               	infsnz	strcpy@from,f,c
  3010  00E750  2A04               	incf	strcpy@from+1,f,c
  3011  00E752                     l2423:
  3012  00E752  C003  FFF6         	movff	strcpy@from,tblptrl
  3013  00E756  C004  FFF7         	movff	strcpy@from+1,tblptrh
  3014  00E75A  0E00               	movlw	low (__mediumconst shr (0+16))
  3015  00E75C  6EF8               	movwf	tblptru,c
  3016  00E75E  C005  FFD9         	movff	strcpy@cp,fsr2l
  3017  00E762  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  3018  00E766  0E0F               	movlw	(high __ramtop+-1)
  3019  00E768  64F7               	cpfsgt	tblptrh,c
  3020  00E76A  D003               	bra	u2187
  3021  00E76C  0008               	tblrd		*
  3022  00E76E  50F5               	movf	tablat,w,c
  3023  00E770  D005               	bra	u2180
  3024  00E772                     u2187:
  3025  00E772  CFF6 FFE9          	movff	tblptrl,fsr0l
  3026  00E776  CFF7 FFEA          	movff	tblptrh,fsr0h
  3027  00E77A  50EF               	movf	indf0,w,c
  3028  00E77C                     u2180:
  3029  00E77C  6EDF               	movwf	indf2,c
  3030  00E77E  50DF               	movf	indf2,w,c
  3031  00E780  B4D8               	btfsc	status,2,c
  3032  00E782  0012               	return	
  3033  00E784  D7E2               	goto	l2421
  3034  00E786                     __end_of_strcpy:
  3035                           	opt stack 0
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           indf0	equ	0xFEF
  3041                           postinc0	equ	0xFEE
  3042                           fsr0h	equ	0xFEA
  3043                           fsr0l	equ	0xFE9
  3044                           wreg	equ	0xFE8
  3045                           indf2	equ	0xFDF
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _strcat *****************
  3051 ;; Defined at:
  3052 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  to              2    0[COMRAM] PTR unsigned char 
  3055 ;;		 -> str1(16), str(16), 
  3056 ;;  from            2    2[COMRAM] PTR const unsigned char 
  3057 ;;		 -> str1(16), str(16), 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  cp              2    4[COMRAM] PTR unsigned char 
  3060 ;;		 -> str1(16), str(16), 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2    0[COMRAM] PTR unsigned char 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;Total ram usage:        6 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_operate
  3080 ;;		_remaintime
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text9
  3085  00E6FE                     __ptext9:
  3086                           	opt stack 0
  3087  00E6FE                     _strcat:
  3088                           	opt stack 26
  3089                           
  3090                           ;incstack = 0
  3091  00E6FE  C001  F005         	movff	strcat@to,strcat@cp
  3092  00E702  C002  F006         	movff	strcat@to+1,strcat@cp+1
  3093  00E706  D002               	goto	l2429
  3094  00E708                     l2427:
  3095  00E708  4A05               	infsnz	strcat@cp,f,c
  3096  00E70A  2A06               	incf	strcat@cp+1,f,c
  3097  00E70C                     l2429:
  3098  00E70C  C005  FFD9         	movff	strcat@cp,fsr2l
  3099  00E710  C006  FFDA         	movff	strcat@cp+1,fsr2h
  3100  00E714  50DF               	movf	indf2,w,c
  3101  00E716  B4D8               	btfsc	status,2,c
  3102  00E718  D005               	goto	l2433
  3103  00E71A  D7F6               	goto	l2427
  3104  00E71C                     l2431:
  3105  00E71C  4A05               	infsnz	strcat@cp,f,c
  3106  00E71E  2A06               	incf	strcat@cp+1,f,c
  3107  00E720  4A03               	infsnz	strcat@from,f,c
  3108  00E722  2A04               	incf	strcat@from+1,f,c
  3109  00E724                     l2433:
  3110  00E724  C003  FFD9         	movff	strcat@from,fsr2l
  3111  00E728  C004  FFDA         	movff	strcat@from+1,fsr2h
  3112  00E72C  C005  FFE1         	movff	strcat@cp,fsr1l
  3113  00E730  C006  FFE2         	movff	strcat@cp+1,fsr1h
  3114  00E734  CFDF FFE7          	movff	indf2,indf1
  3115  00E738  50E7               	movf	indf1,w,c
  3116  00E73A  B4D8               	btfsc	status,2,c
  3117  00E73C  0012               	return	
  3118  00E73E  D7EE               	goto	l2431
  3119  00E740                     __end_of_strcat:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           indf0	equ	0xFEF
  3126                           postinc0	equ	0xFEE
  3127                           fsr0h	equ	0xFEA
  3128                           fsr0l	equ	0xFE9
  3129                           wreg	equ	0xFE8
  3130                           indf1	equ	0xFE7
  3131                           fsr1h	equ	0xFE2
  3132                           fsr1l	equ	0xFE1
  3133                           indf2	equ	0xFDF
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _mydelay *****************
  3139 ;; Defined at:
  3140 ;;		line 81 in file "WMC_2.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  n               2    6[COMRAM] int 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  ii              2    9[COMRAM] int 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;Total ram usage:        5 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    1
  3161 ;; This function calls:
  3162 ;;		_button
  3163 ;; This function is called by:
  3164 ;;		_operate
  3165 ;;		_remaintime
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text10
  3170  00E8EC                     __ptext10:
  3171                           	opt stack 0
  3172  00E8EC                     _mydelay:
  3173                           	opt stack 25
  3174                           
  3175                           ;WMC_2.c: 83: int ii;
  3176                           ;WMC_2.c: 84: for(ii=0;ii<n;ii++)
  3177                           
  3178                           ;incstack = 0
  3179  00E8EC  0E00               	movlw	0
  3180  00E8EE  6E0B               	movwf	mydelay@ii+1,c
  3181  00E8F0  0E00               	movlw	0
  3182  00E8F2  6E0A               	movwf	mydelay@ii,c
  3183  00E8F4  D01F               	goto	l98
  3184  00E8F6                     l2399:
  3185                           
  3186                           ;WMC_2.c: 85: {
  3187                           ;WMC_2.c: 86: b = button();
  3188  00E8F6  ECB5  F072         	call	_button	;wreg free
  3189  00E8FA  6E09               	movwf	??_mydelay& (0+255),c
  3190  00E8FC  5009               	movf	??_mydelay,w,c
  3191  00E8FE  0100               	movlb	0	; () banked
  3192  00E900  6FD0               	movwf	_b& (0+255),b
  3193  00E902  6BD1               	clrf	(_b+1)& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;WMC_2.c: 87: if (b == 4 || b == 5) break;
  3197  00E904  0E04               	movlw	4
  3198  00E906  0100               	movlb	0	; () banked
  3199  00E908  19D0               	xorwf	_b& (0+255),w,b
  3200  00E90A  0100               	movlb	0	; () banked
  3201  00E90C  11D1               	iorwf	(_b+1)& (0+255),w,b
  3202  00E90E  B4D8               	btfsc	status,2,c
  3203  00E910  0012               	return	
  3204                           
  3205                           ; BSR set to: 0
  3206  00E912  0E05               	movlw	5
  3207  00E914  0100               	movlb	0	; () banked
  3208  00E916  19D0               	xorwf	_b& (0+255),w,b
  3209  00E918  0100               	movlb	0	; () banked
  3210  00E91A  11D1               	iorwf	(_b+1)& (0+255),w,b
  3211  00E91C  B4D8               	btfsc	status,2,c
  3212  00E91E  0012               	return	
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;WMC_2.c: 88: _delay((unsigned long)((10)*(10000000/4000.0)));
  3216                           
  3217                           ; BSR set to: 0
  3218                           
  3219                           ; BSR set to: 0
  3220  00E920  0E21               	movlw	33
  3221  00E922  6E09               	movwf	??_mydelay& (0+255),c
  3222  00E924  0E76               	movlw	118
  3223  00E926                     u3117:
  3224  00E926  2EE8               	decfsz	wreg,f,c
  3225  00E928  D7FE               	bra	u3117
  3226  00E92A  2E09               	decfsz	??_mydelay& (0+255),f,c
  3227  00E92C  D7FC               	bra	u3117
  3228  00E92E  D000               	nop2	
  3229  00E930  4A0A               	infsnz	mydelay@ii,f,c
  3230  00E932  2A0B               	incf	mydelay@ii+1,f,c
  3231  00E934                     l98:
  3232  00E934  5007               	movf	mydelay@n,w,c
  3233  00E936  5C0A               	subwf	mydelay@ii,w,c
  3234  00E938  500B               	movf	mydelay@ii+1,w,c
  3235  00E93A  0A80               	xorlw	128
  3236  00E93C  6E09               	movwf	??_mydelay& (0+255),c
  3237  00E93E  5008               	movf	mydelay@n+1,w,c
  3238  00E940  0A80               	xorlw	128
  3239  00E942  5809               	subwfb	??_mydelay& (0+255),w,c
  3240  00E944  B0D8               	btfsc	status,0,c
  3241  00E946  0012               	return	
  3242  00E948  D7D6               	goto	l2399
  3243  00E94A                     __end_of_mydelay:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           indf0	equ	0xFEF
  3250                           postinc0	equ	0xFEE
  3251                           fsr0h	equ	0xFEA
  3252                           fsr0l	equ	0xFE9
  3253                           wreg	equ	0xFE8
  3254                           indf1	equ	0xFE7
  3255                           fsr1h	equ	0xFE2
  3256                           fsr1l	equ	0xFE1
  3257                           indf2	equ	0xFDF
  3258                           fsr2h	equ	0xFDA
  3259                           fsr2l	equ	0xFD9
  3260                           status	equ	0xFD8
  3261                           
  3262 ;; *************** function _button *****************
  3263 ;; Defined at:
  3264 ;;		line 156 in file "WMC_2.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;		None
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;		None
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      unsigned char 
  3271 ;; Registers used:
  3272 ;;		wreg
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;Total ram usage:        0 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_mydelay
  3288 ;;		_operate
  3289 ;;		_menu
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text11
  3294  00E56A                     __ptext11:
  3295                           	opt stack 0
  3296  00E56A                     _button:
  3297                           	opt stack 25
  3298                           
  3299                           ;WMC_2.c: 158: if(PORTBbits.RB1 == 0) return 1;
  3300                           
  3301                           ;incstack = 0
  3302  00E56A  B281               	btfsc	3969,1,c	;volatile
  3303  00E56C  D002               	goto	l122
  3304  00E56E  0E01               	movlw	1
  3305  00E570  0012               	return	
  3306  00E572                     l122:
  3307                           
  3308                           ;WMC_2.c: 159: else if(PORTBbits.RB2 == 0) return 2;
  3309  00E572  B481               	btfsc	3969,2,c	;volatile
  3310  00E574  D002               	goto	l125
  3311  00E576  0E02               	movlw	2
  3312  00E578  0012               	return	
  3313  00E57A                     l125:
  3314                           
  3315                           ;WMC_2.c: 160: else if(PORTBbits.RB3 == 0) return 3;
  3316  00E57A  B681               	btfsc	3969,3,c	;volatile
  3317  00E57C  D002               	goto	l124
  3318  00E57E  0E03               	movlw	3
  3319  00E580  0012               	return	
  3320  00E582                     l124:
  3321                           
  3322                           ;WMC_2.c: 161: if (PORTBbits.RB0 == 0) return 4;
  3323  00E582  B081               	btfsc	3969,0,c	;volatile
  3324  00E584  D002               	goto	l128
  3325  00E586  0E04               	movlw	4
  3326  00E588  0012               	return	
  3327  00E58A                     l128:
  3328                           
  3329                           ;WMC_2.c: 162: if(PORTAbits.RA5 == 0) return 5;
  3330  00E58A  BA80               	btfsc	3968,5,c	;volatile
  3331  00E58C  D002               	goto	l2215
  3332  00E58E  0E05               	movlw	5
  3333  00E590  0012               	return	
  3334  00E592                     l2215:
  3335                           
  3336                           ;WMC_2.c: 163: return 0;
  3337  00E592  0E00               	movlw	0
  3338  00E594  0012               	return	
  3339  00E596                     __end_of_button:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           indf0	equ	0xFEF
  3346                           postinc0	equ	0xFEE
  3347                           fsr0h	equ	0xFEA
  3348                           fsr0l	equ	0xFE9
  3349                           wreg	equ	0xFE8
  3350                           indf1	equ	0xFE7
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _lock *****************
  3359 ;; Defined at:
  3360 ;;		line 464 in file "WMC_2.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    3
  3381 ;; This function calls:
  3382 ;;		_atraso_ms
  3383 ;;		_lcd_cmd
  3384 ;;		_lcd_str
  3385 ;; This function is called by:
  3386 ;;		_remaintime
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text12
  3391  00E540                     __ptext12:
  3392                           	opt stack 0
  3393  00E540                     _lock:
  3394                           	opt stack 23
  3395                           
  3396                           ;WMC_2.c: 466: b = 0;
  3397                           
  3398                           ;incstack = 0
  3399  00E540  0E00               	movlw	0
  3400  00E542  0100               	movlb	0	; () banked
  3401  00E544  6FD1               	movwf	(_b+1)& (0+255),b
  3402  00E546  0E00               	movlw	0
  3403  00E548  6FD0               	movwf	_b& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;WMC_2.c: 467: lcd_cmd(0xC0);
  3407  00E54A  0EC0               	movlw	192
  3408  00E54C  EC76  F072         	call	_lcd_cmd
  3409                           
  3410                           ;WMC_2.c: 468: lcd_str("Door locked!");
  3411  00E550  0E9A               	movlw	low STR_24
  3412  00E552  6E07               	movwf	lcd_str@str,c
  3413  00E554  0EFF               	movlw	high STR_24
  3414  00E556  6E08               	movwf	lcd_str@str+1,c
  3415  00E558  EC4A  F075         	call	_lcd_str	;wreg free
  3416                           
  3417                           ;WMC_2.c: 469: atraso_ms(1000);
  3418  00E55C  0E03               	movlw	3
  3419  00E55E  6E02               	movwf	atraso_ms@valor+1,c
  3420  00E560  0EE8               	movlw	232
  3421  00E562  6E01               	movwf	atraso_ms@valor,c
  3422  00E564  ECE5  F072         	call	_atraso_ms	;wreg free
  3423  00E568  0012               	return		;funcret
  3424  00E56A                     __end_of_lock:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           tblptrh	equ	0xFF7
  3428                           tblptrl	equ	0xFF6
  3429                           tablat	equ	0xFF5
  3430                           indf0	equ	0xFEF
  3431                           postinc0	equ	0xFEE
  3432                           fsr0h	equ	0xFEA
  3433                           fsr0l	equ	0xFE9
  3434                           wreg	equ	0xFE8
  3435                           indf1	equ	0xFE7
  3436                           fsr1h	equ	0xFE2
  3437                           fsr1l	equ	0xFE1
  3438                           indf2	equ	0xFDF
  3439                           fsr2h	equ	0xFDA
  3440                           fsr2l	equ	0xFD9
  3441                           status	equ	0xFD8
  3442                           
  3443 ;; *************** function _lcd_str *****************
  3444 ;; Defined at:
  3445 ;;		line 76 in file "lcd.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  str             2    6[COMRAM] PTR const unsigned char 
  3448 ;;		 -> STR_24(13), STR_23(17), STR_22(16), menu@menu(80), 
  3449 ;;		 -> STR_16(5), STR_15(16), STR_14(6), STR_13(5), 
  3450 ;;		 -> STR_12(9), STR_11(17), STR_9(6), STR_8(9), 
  3451 ;;		 -> STR_7(7), STR_6(16), STR_5(17), str1(16), 
  3452 ;;		 -> str(16), STR_3(17), STR_2(16), STR_1(16), 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  i               1   10[COMRAM] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3464 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;Total ram usage:        5 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    2
  3471 ;; This function calls:
  3472 ;;		_lcd_dat
  3473 ;; This function is called by:
  3474 ;;		_operate
  3475 ;;		_spin
  3476 ;;		_menu
  3477 ;;		_remaintime
  3478 ;;		_stop
  3479 ;;		_lock
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text13
  3484  00EA94                     __ptext13:
  3485                           	opt stack 0
  3486  00EA94                     _lcd_str:
  3487                           	opt stack 27
  3488                           
  3489                           ;lcd.c: 78: unsigned char i=0;
  3490                           
  3491                           ;incstack = 0
  3492  00EA94  0E00               	movlw	0
  3493  00EA96  6E0B               	movwf	lcd_str@i,c
  3494                           
  3495                           ;lcd.c: 80: while(str[i] != 0 )
  3496  00EA98  D01E               	goto	l2239
  3497  00EA9A                     l2235:
  3498                           
  3499                           ;lcd.c: 81: {
  3500                           ;lcd.c: 82: lcd_dat(str[i]);
  3501  00EA9A  500B               	movf	lcd_str@i,w,c
  3502  00EA9C  0D01               	mullw	1
  3503  00EA9E  C007  F009         	movff	lcd_str@str,??_lcd_str
  3504  00EAA2  C008  F00A         	movff	lcd_str@str+1,??_lcd_str+1
  3505  00EAA6  50F3               	movf	prodl,w,c
  3506  00EAA8  2609               	addwf	??_lcd_str,f,c
  3507  00EAAA  50F4               	movf	prodh,w,c
  3508  00EAAC  220A               	addwfc	??_lcd_str+1,f,c
  3509  00EAAE  C009  FFF6         	movff	??_lcd_str,tblptrl
  3510  00EAB2  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
  3511  00EAB6  0E00               	movlw	low (__mediumconst shr (0+16))
  3512  00EAB8  6EF8               	movwf	tblptru,c
  3513  00EABA  0E0F               	movlw	(high __ramtop+-1)
  3514  00EABC  64F7               	cpfsgt	tblptrh,c
  3515  00EABE  D003               	bra	u1787
  3516  00EAC0  0008               	tblrd		*
  3517  00EAC2  50F5               	movf	tablat,w,c
  3518  00EAC4  D005               	bra	u1780
  3519  00EAC6                     u1787:
  3520  00EAC6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3521  00EACA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3522  00EACE  50EF               	movf	indf0,w,c
  3523  00EAD0                     u1780:
  3524  00EAD0  EC8B  F072         	call	_lcd_dat
  3525                           
  3526                           ;lcd.c: 83: i++;
  3527  00EAD4  2A0B               	incf	lcd_str@i,f,c
  3528  00EAD6                     l2239:
  3529  00EAD6  500B               	movf	lcd_str@i,w,c
  3530  00EAD8  0D01               	mullw	1
  3531  00EADA  C007  F009         	movff	lcd_str@str,??_lcd_str
  3532  00EADE  C008  F00A         	movff	lcd_str@str+1,??_lcd_str+1
  3533  00EAE2  50F3               	movf	prodl,w,c
  3534  00EAE4  2609               	addwf	??_lcd_str,f,c
  3535  00EAE6  50F4               	movf	prodh,w,c
  3536  00EAE8  220A               	addwfc	??_lcd_str+1,f,c
  3537  00EAEA  C009  FFF6         	movff	??_lcd_str,tblptrl
  3538  00EAEE  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
  3539  00EAF2  0E00               	movlw	low (__mediumconst shr (0+16))
  3540  00EAF4  6EF8               	movwf	tblptru,c
  3541  00EAF6  0E0F               	movlw	(high __ramtop+-1)
  3542  00EAF8  64F7               	cpfsgt	tblptrh,c
  3543  00EAFA  D003               	bra	u1797
  3544  00EAFC  0008               	tblrd		*
  3545  00EAFE  50F5               	movf	tablat,w,c
  3546  00EB00  D005               	bra	u1790
  3547  00EB02                     u1797:
  3548  00EB02  CFF6 FFE9          	movff	tblptrl,fsr0l
  3549  00EB06  CFF7 FFEA          	movff	tblptrh,fsr0h
  3550  00EB0A  50EF               	movf	indf0,w,c
  3551  00EB0C                     u1790:
  3552  00EB0C  0900               	iorlw	0
  3553  00EB0E  B4D8               	btfsc	status,2,c
  3554  00EB10  0012               	return	
  3555  00EB12  D7C3               	goto	l2235
  3556  00EB14                     __end_of_lcd_str:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           indf0	equ	0xFEF
  3565                           postinc0	equ	0xFEE
  3566                           fsr0h	equ	0xFEA
  3567                           fsr0l	equ	0xFE9
  3568                           wreg	equ	0xFE8
  3569                           indf1	equ	0xFE7
  3570                           fsr1h	equ	0xFE2
  3571                           fsr1l	equ	0xFE1
  3572                           indf2	equ	0xFDF
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _lcd_dat *****************
  3578 ;; Defined at:
  3579 ;;		line 46 in file "lcd.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  val             1    wreg     unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  val             1    5[COMRAM] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        1 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    1
  3600 ;; This function calls:
  3601 ;;		_atraso_ms
  3602 ;;		_lcd_wr
  3603 ;; This function is called by:
  3604 ;;		_lcd_str
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text14
  3609  00E516                     __ptext14:
  3610                           	opt stack 0
  3611  00E516                     _lcd_dat:
  3612                           	opt stack 27
  3613                           
  3614                           ;incstack = 0
  3615                           ;lcd_dat@val stored from wreg
  3616  00E516  6E06               	movwf	lcd_dat@val,c
  3617                           
  3618                           ;lcd.c: 48: PORTEbits.RE1=1;
  3619  00E518  8284               	bsf	3972,1,c	;volatile
  3620                           
  3621                           ;lcd.c: 49: lcd_wr(val);
  3622  00E51A  5006               	movf	lcd_dat@val,w,c
  3623  00E51C  ECE9  F071         	call	_lcd_wr
  3624                           
  3625                           ;lcd.c: 50: PORTEbits.RE2=1;
  3626  00E520  8484               	bsf	3972,2,c	;volatile
  3627                           
  3628                           ;lcd.c: 51: atraso_ms(3);
  3629  00E522  0E00               	movlw	0
  3630  00E524  6E02               	movwf	atraso_ms@valor+1,c
  3631  00E526  0E03               	movlw	3
  3632  00E528  6E01               	movwf	atraso_ms@valor,c
  3633  00E52A  ECE5  F072         	call	_atraso_ms	;wreg free
  3634                           
  3635                           ;lcd.c: 52: PORTEbits.RE1=0;
  3636  00E52E  9284               	bcf	3972,1,c	;volatile
  3637                           
  3638                           ;lcd.c: 53: atraso_ms(3);
  3639  00E530  0E00               	movlw	0
  3640  00E532  6E02               	movwf	atraso_ms@valor+1,c
  3641  00E534  0E03               	movlw	3
  3642  00E536  6E01               	movwf	atraso_ms@valor,c
  3643  00E538  ECE5  F072         	call	_atraso_ms	;wreg free
  3644                           
  3645                           ;lcd.c: 54: PORTEbits.RE1=1;
  3646  00E53C  8284               	bsf	3972,1,c	;volatile
  3647  00E53E  0012               	return		;funcret
  3648  00E540                     __end_of_lcd_dat:
  3649                           	opt stack 0
  3650                           tblptru	equ	0xFF8
  3651                           tblptrh	equ	0xFF7
  3652                           tblptrl	equ	0xFF6
  3653                           tablat	equ	0xFF5
  3654                           prodh	equ	0xFF4
  3655                           prodl	equ	0xFF3
  3656                           indf0	equ	0xFEF
  3657                           postinc0	equ	0xFEE
  3658                           fsr0h	equ	0xFEA
  3659                           fsr0l	equ	0xFE9
  3660                           wreg	equ	0xFE8
  3661                           indf1	equ	0xFE7
  3662                           fsr1h	equ	0xFE2
  3663                           fsr1l	equ	0xFE1
  3664                           indf2	equ	0xFDF
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _itoa *****************
  3670 ;; Defined at:
  3671 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\itoa.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  buf             2   16[COMRAM] PTR unsigned char 
  3674 ;;		 -> str1(16), 
  3675 ;;  val             2   18[COMRAM] int 
  3676 ;;  base            2   20[COMRAM] int 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  cp              2   22[COMRAM] PTR unsigned char 
  3679 ;;		 -> str1(16), 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2   16[COMRAM] PTR unsigned char 
  3682 ;; Registers used:
  3683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        8 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    2
  3696 ;; This function calls:
  3697 ;;		_utoa
  3698 ;; This function is called by:
  3699 ;;		_remaintime
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text15
  3704  00E6BC                     __ptext15:
  3705                           	opt stack 0
  3706  00E6BC                     _itoa:
  3707                           	opt stack 24
  3708                           
  3709                           ;incstack = 0
  3710  00E6BC  C011  F017         	movff	itoa@buf,itoa@cp
  3711  00E6C0  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  3712  00E6C4  AE14               	btfss	itoa@val+1,7,c
  3713  00E6C6  D00C               	goto	l2451
  3714  00E6C8  C011  FFD9         	movff	itoa@buf,fsr2l
  3715  00E6CC  C012  FFDA         	movff	itoa@buf+1,fsr2h
  3716  00E6D0  0E2D               	movlw	45
  3717  00E6D2  6EDF               	movwf	indf2,c
  3718  00E6D4  4A11               	infsnz	itoa@buf,f,c
  3719  00E6D6  2A12               	incf	itoa@buf+1,f,c
  3720  00E6D8  6C13               	negf	itoa@val,c
  3721  00E6DA  1E14               	comf	itoa@val+1,f,c
  3722  00E6DC  B0D8               	btfsc	status,0,c
  3723  00E6DE  2A14               	incf	itoa@val+1,f,c
  3724  00E6E0                     l2451:
  3725  00E6E0  C011  F008         	movff	itoa@buf,utoa@buf
  3726  00E6E4  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  3727  00E6E8  C013  F00A         	movff	itoa@val,utoa@val
  3728  00E6EC  C014  F00B         	movff	itoa@val+1,utoa@val+1
  3729  00E6F0  C015  F00C         	movff	itoa@base,utoa@base
  3730  00E6F4  C016  F00D         	movff	itoa@base+1,utoa@base+1
  3731  00E6F8  EC57  F076         	call	_utoa	;wreg free
  3732  00E6FC  0012               	return	
  3733  00E6FE                     __end_of_itoa:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           indf0	equ	0xFEF
  3742                           postinc0	equ	0xFEE
  3743                           fsr0h	equ	0xFEA
  3744                           fsr0l	equ	0xFE9
  3745                           wreg	equ	0xFE8
  3746                           indf1	equ	0xFE7
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _utoa *****************
  3755 ;; Defined at:
  3756 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\itoa.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  buf             2    7[COMRAM] PTR unsigned char 
  3759 ;;		 -> str1(16), 
  3760 ;;  val             2    9[COMRAM] unsigned int 
  3761 ;;  base            2   11[COMRAM] int 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  v               2   13[COMRAM] unsigned int 
  3764 ;;  c               1   15[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  2    7[COMRAM] PTR unsigned char 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:        9 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    1
  3781 ;; This function calls:
  3782 ;;		___lwdiv
  3783 ;;		___lwmod
  3784 ;; This function is called by:
  3785 ;;		_itoa
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text16
  3790  00ECAE                     __ptext16:
  3791                           	opt stack 0
  3792  00ECAE                     _utoa:
  3793                           	opt stack 24
  3794                           
  3795                           ;incstack = 0
  3796  00ECAE  C00A  F00E         	movff	utoa@val,utoa@v
  3797  00ECB2  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  3798  00ECB6                     l2331:
  3799  00ECB6  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  3800  00ECBA  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  3801  00ECBE  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  3802  00ECC2  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  3803  00ECC6  ECC3  F073         	call	___lwdiv	;wreg free
  3804  00ECCA  C001  F00E         	movff	?___lwdiv,utoa@v
  3805  00ECCE  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  3806  00ECD2  4A08               	infsnz	utoa@buf,f,c
  3807  00ECD4  2A09               	incf	utoa@buf+1,f,c
  3808  00ECD6  500E               	movf	utoa@v,w,c
  3809  00ECD8  100F               	iorwf	utoa@v+1,w,c
  3810  00ECDA  A4D8               	btfss	status,2,c
  3811  00ECDC  D7EC               	goto	l2331
  3812  00ECDE  C008  FFD9         	movff	utoa@buf,fsr2l
  3813  00ECE2  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3814  00ECE6  0E00               	movlw	0
  3815  00ECE8  6EDF               	movwf	indf2,c
  3816  00ECEA  0608               	decf	utoa@buf,f,c
  3817  00ECEC  A0D8               	btfss	status,0,c
  3818  00ECEE  0609               	decf	utoa@buf+1,f,c
  3819  00ECF0                     l2341:
  3820  00ECF0  C00A  F001         	movff	utoa@val,___lwmod@dividend
  3821  00ECF4  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  3822  00ECF8  C00C  F003         	movff	utoa@base,___lwmod@divisor
  3823  00ECFC  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  3824  00ED00  EC3D  F073         	call	___lwmod	;wreg free
  3825  00ED04  5001               	movf	?___lwmod,w,c
  3826  00ED06  6E10               	movwf	utoa@c,c
  3827  00ED08  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  3828  00ED0C  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  3829  00ED10  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  3830  00ED14  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  3831  00ED18  ECC3  F073         	call	___lwdiv	;wreg free
  3832  00ED1C  C001  F00A         	movff	?___lwdiv,utoa@val
  3833  00ED20  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  3834  00ED24  0E09               	movlw	9
  3835  00ED26  6410               	cpfsgt	utoa@c,c
  3836  00ED28  D002               	goto	l652
  3837  00ED2A  0E07               	movlw	7
  3838  00ED2C  2610               	addwf	utoa@c,f,c
  3839  00ED2E                     l652:
  3840  00ED2E  0E30               	movlw	48
  3841  00ED30  2610               	addwf	utoa@c,f,c
  3842  00ED32  C008  FFD9         	movff	utoa@buf,fsr2l
  3843  00ED36  C009  FFDA         	movff	utoa@buf+1,fsr2h
  3844  00ED3A  C010  FFDF         	movff	utoa@c,indf2
  3845  00ED3E  0608               	decf	utoa@buf,f,c
  3846  00ED40  A0D8               	btfss	status,0,c
  3847  00ED42  0609               	decf	utoa@buf+1,f,c
  3848  00ED44  500A               	movf	utoa@val,w,c
  3849  00ED46  100B               	iorwf	utoa@val+1,w,c
  3850  00ED48  A4D8               	btfss	status,2,c
  3851  00ED4A  D7D2               	goto	l2341
  3852                           
  3853                           ;	Return value of _utoa is never used
  3854  00ED4C  4A08               	infsnz	utoa@buf,f,c
  3855  00ED4E  2A09               	incf	utoa@buf+1,f,c
  3856  00ED50  0012               	return	
  3857  00ED52                     __end_of_utoa:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           indf0	equ	0xFEF
  3866                           postinc0	equ	0xFEE
  3867                           fsr0h	equ	0xFEA
  3868                           fsr0l	equ	0xFE9
  3869                           wreg	equ	0xFE8
  3870                           indf1	equ	0xFE7
  3871                           fsr1h	equ	0xFE2
  3872                           fsr1l	equ	0xFE1
  3873                           indf2	equ	0xFDF
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function ___lwmod *****************
  3879 ;; Defined at:
  3880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  dividend        2    0[COMRAM] unsigned int 
  3883 ;;  divisor         2    2[COMRAM] unsigned int 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  counter         1    4[COMRAM] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  2    0[COMRAM] unsigned int 
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, status,0
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;Total ram usage:        5 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_utoa
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text17
  3909  00E67A                     __ptext17:
  3910                           	opt stack 0
  3911  00E67A                     ___lwmod:
  3912                           	opt stack 24
  3913                           
  3914                           ;incstack = 0
  3915  00E67A  5003               	movf	___lwmod@divisor,w,c
  3916  00E67C  1004               	iorwf	___lwmod@divisor+1,w,c
  3917  00E67E  B4D8               	btfsc	status,2,c
  3918  00E680  D018               	goto	l741
  3919  00E682  0E01               	movlw	1
  3920  00E684  6E05               	movwf	___lwmod@counter,c
  3921  00E686  D004               	goto	l2179
  3922  00E688                     l2177:
  3923  00E688  90D8               	bcf	status,0,c
  3924  00E68A  3603               	rlcf	___lwmod@divisor,f,c
  3925  00E68C  3604               	rlcf	___lwmod@divisor+1,f,c
  3926  00E68E  2A05               	incf	___lwmod@counter,f,c
  3927  00E690                     l2179:
  3928  00E690  AE04               	btfss	___lwmod@divisor+1,7,c
  3929  00E692  D7FA               	goto	l2177
  3930  00E694                     l2181:
  3931  00E694  5003               	movf	___lwmod@divisor,w,c
  3932  00E696  5C01               	subwf	___lwmod@dividend,w,c
  3933  00E698  5004               	movf	___lwmod@divisor+1,w,c
  3934  00E69A  5802               	subwfb	___lwmod@dividend+1,w,c
  3935  00E69C  A0D8               	btfss	status,0,c
  3936  00E69E  D004               	goto	l2185
  3937  00E6A0  5003               	movf	___lwmod@divisor,w,c
  3938  00E6A2  5E01               	subwf	___lwmod@dividend,f,c
  3939  00E6A4  5004               	movf	___lwmod@divisor+1,w,c
  3940  00E6A6  5A02               	subwfb	___lwmod@dividend+1,f,c
  3941  00E6A8                     l2185:
  3942  00E6A8  90D8               	bcf	status,0,c
  3943  00E6AA  3204               	rrcf	___lwmod@divisor+1,f,c
  3944  00E6AC  3203               	rrcf	___lwmod@divisor,f,c
  3945  00E6AE  2E05               	decfsz	___lwmod@counter,f,c
  3946  00E6B0  D7F1               	goto	l2181
  3947  00E6B2                     l741:
  3948  00E6B2  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3949  00E6B6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3950  00E6BA  0012               	return		;funcret
  3951  00E6BC                     __end_of___lwmod:
  3952                           	opt stack 0
  3953                           tblptru	equ	0xFF8
  3954                           tblptrh	equ	0xFF7
  3955                           tblptrl	equ	0xFF6
  3956                           tablat	equ	0xFF5
  3957                           prodh	equ	0xFF4
  3958                           prodl	equ	0xFF3
  3959                           indf0	equ	0xFEF
  3960                           postinc0	equ	0xFEE
  3961                           fsr0h	equ	0xFEA
  3962                           fsr0l	equ	0xFE9
  3963                           wreg	equ	0xFE8
  3964                           indf1	equ	0xFE7
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function ___lwdiv *****************
  3973 ;; Defined at:
  3974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  dividend        2    0[COMRAM] unsigned int 
  3977 ;;  divisor         2    2[COMRAM] unsigned int 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  quotient        2    4[COMRAM] unsigned int 
  3980 ;;  counter         1    6[COMRAM] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  2    0[COMRAM] unsigned int 
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        7 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_utoa
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text18
  4004  00E786                     __ptext18:
  4005                           	opt stack 0
  4006  00E786                     ___lwdiv:
  4007                           	opt stack 24
  4008                           
  4009                           ;incstack = 0
  4010  00E786  0E00               	movlw	0
  4011  00E788  6E06               	movwf	___lwdiv@quotient+1,c
  4012  00E78A  0E00               	movlw	0
  4013  00E78C  6E05               	movwf	___lwdiv@quotient,c
  4014  00E78E  5003               	movf	___lwdiv@divisor,w,c
  4015  00E790  1004               	iorwf	___lwdiv@divisor+1,w,c
  4016  00E792  B4D8               	btfsc	status,2,c
  4017  00E794  D01C               	goto	l731
  4018  00E796  0E01               	movlw	1
  4019  00E798  6E07               	movwf	___lwdiv@counter,c
  4020  00E79A  D004               	goto	l2159
  4021  00E79C                     l2157:
  4022  00E79C  90D8               	bcf	status,0,c
  4023  00E79E  3603               	rlcf	___lwdiv@divisor,f,c
  4024  00E7A0  3604               	rlcf	___lwdiv@divisor+1,f,c
  4025  00E7A2  2A07               	incf	___lwdiv@counter,f,c
  4026  00E7A4                     l2159:
  4027  00E7A4  AE04               	btfss	___lwdiv@divisor+1,7,c
  4028  00E7A6  D7FA               	goto	l2157
  4029  00E7A8                     l2161:
  4030  00E7A8  90D8               	bcf	status,0,c
  4031  00E7AA  3605               	rlcf	___lwdiv@quotient,f,c
  4032  00E7AC  3606               	rlcf	___lwdiv@quotient+1,f,c
  4033  00E7AE  5003               	movf	___lwdiv@divisor,w,c
  4034  00E7B0  5C01               	subwf	___lwdiv@dividend,w,c
  4035  00E7B2  5004               	movf	___lwdiv@divisor+1,w,c
  4036  00E7B4  5802               	subwfb	___lwdiv@dividend+1,w,c
  4037  00E7B6  A0D8               	btfss	status,0,c
  4038  00E7B8  D005               	goto	l2169
  4039  00E7BA  5003               	movf	___lwdiv@divisor,w,c
  4040  00E7BC  5E01               	subwf	___lwdiv@dividend,f,c
  4041  00E7BE  5004               	movf	___lwdiv@divisor+1,w,c
  4042  00E7C0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4043  00E7C2  8005               	bsf	___lwdiv@quotient,0,c
  4044  00E7C4                     l2169:
  4045  00E7C4  90D8               	bcf	status,0,c
  4046  00E7C6  3204               	rrcf	___lwdiv@divisor+1,f,c
  4047  00E7C8  3203               	rrcf	___lwdiv@divisor,f,c
  4048  00E7CA  2E07               	decfsz	___lwdiv@counter,f,c
  4049  00E7CC  D7ED               	goto	l2161
  4050  00E7CE                     l731:
  4051  00E7CE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4052  00E7D2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4053  00E7D6  0012               	return		;funcret
  4054  00E7D8                     __end_of___lwdiv:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           indf0	equ	0xFEF
  4063                           postinc0	equ	0xFEE
  4064                           fsr0h	equ	0xFEA
  4065                           fsr0l	equ	0xFE9
  4066                           wreg	equ	0xFE8
  4067                           indf1	equ	0xFE7
  4068                           fsr1h	equ	0xFE2
  4069                           fsr1l	equ	0xFE1
  4070                           indf2	equ	0xFDF
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _outlet *****************
  4076 ;; Defined at:
  4077 ;;		line 189 in file "WMC_2.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  o               1    wreg     unsigned char 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  o               1    0[COMRAM] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;Total ram usage:        1 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_operate
  4101 ;;		_spin
  4102 ;;		_stop
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text19
  4107  00E404                     __ptext19:
  4108                           	opt stack 0
  4109  00E404                     _outlet:
  4110                           	opt stack 29
  4111                           
  4112                           ;incstack = 0
  4113                           ;outlet@o stored from wreg
  4114  00E404  6E01               	movwf	outlet@o,c
  4115                           
  4116                           ;WMC_2.c: 191: LATEbits.LE0 = o;
  4117  00E406  B001               	btfsc	outlet@o,0,c
  4118  00E408  D002               	bra	u2755
  4119  00E40A  908D               	bcf	3981,0,c	;volatile
  4120  00E40C  D001               	bra	u2756
  4121  00E40E                     u2755:
  4122  00E40E  808D               	bsf	3981,0,c	;volatile
  4123  00E410                     u2756:
  4124  00E410  0012               	return		;funcret
  4125  00E412                     __end_of_outlet:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           indf0	equ	0xFEF
  4134                           postinc0	equ	0xFEE
  4135                           fsr0h	equ	0xFEA
  4136                           fsr0l	equ	0xFE9
  4137                           wreg	equ	0xFE8
  4138                           indf1	equ	0xFE7
  4139                           fsr1h	equ	0xFE2
  4140                           fsr1l	equ	0xFE1
  4141                           indf2	equ	0xFDF
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _motor *****************
  4147 ;; Defined at:
  4148 ;;		line 177 in file "WMC_2.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  m               1    wreg     unsigned char 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;  m               1    0[COMRAM] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:        1 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_operate
  4172 ;;		_spin
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text20
  4177  00E3F6                     __ptext20:
  4178                           	opt stack 0
  4179  00E3F6                     _motor:
  4180                           	opt stack 27
  4181                           
  4182                           ;incstack = 0
  4183                           ;motor@m stored from wreg
  4184  00E3F6  6E01               	movwf	motor@m,c
  4185                           
  4186                           ;WMC_2.c: 179: LATCbits.LC2 = m;
  4187  00E3F8  B001               	btfsc	motor@m,0,c
  4188  00E3FA  D002               	bra	u2735
  4189  00E3FC  948B               	bcf	3979,2,c	;volatile
  4190  00E3FE  D001               	bra	u2736
  4191  00E400                     u2735:
  4192  00E400  848B               	bsf	3979,2,c	;volatile
  4193  00E402                     u2736:
  4194  00E402  0012               	return		;funcret
  4195  00E404                     __end_of_motor:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           indf0	equ	0xFEF
  4204                           postinc0	equ	0xFEE
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           indf1	equ	0xFE7
  4209                           fsr1h	equ	0xFE2
  4210                           fsr1l	equ	0xFE1
  4211                           indf2	equ	0xFDF
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _mass *****************
  4217 ;; Defined at:
  4218 ;;		line 129 in file "WMC_2.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  f               3   56[COMRAM] float 
  4223 ;;  m               2   59[COMRAM] unsigned int 
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  3   53[COMRAM] float 
  4226 ;; Registers used:
  4227 ;;		wreg, status,2, status,0, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4233 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;Total ram usage:        8 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    2
  4240 ;; This function calls:
  4241 ;;		___ftadd
  4242 ;;		___ftdiv
  4243 ;;		___ftmul
  4244 ;;		___lwtoft
  4245 ;;		_myadc
  4246 ;; This function is called by:
  4247 ;;		_operate
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text21
  4252  00EB96                     __ptext21:
  4253                           	opt stack 0
  4254  00EB96                     _mass:
  4255                           	opt stack 25
  4256                           
  4257                           ;WMC_2.c: 132: unsigned int m;
  4258                           ;WMC_2.c: 133: float f;
  4259                           ;WMC_2.c: 134: m = myadc(0);
  4260                           
  4261                           ;incstack = 0
  4262  00EB96  0E00               	movlw	0
  4263  00EB98  ECCB  F072         	call	_myadc
  4264  00EB9C  C001  F03C         	movff	?_myadc,mass@m
  4265  00EBA0  C002  F03D         	movff	?_myadc+1,mass@m+1
  4266                           
  4267                           ;WMC_2.c: 135: f = (10.5*(float)m / 1024.0)-2.0;
  4268  00EBA4  0E00               	movlw	0
  4269  00EBA6  6E1E               	movwf	___ftdiv@f2,c
  4270  00EBA8  0E80               	movlw	128
  4271  00EBAA  6E1F               	movwf	___ftdiv@f2+1,c
  4272  00EBAC  0E44               	movlw	68
  4273  00EBAE  6E20               	movwf	___ftdiv@f2+2,c
  4274  00EBB0  0E00               	movlw	0
  4275  00EBB2  6E0F               	movwf	___ftmul@f2,c
  4276  00EBB4  0E28               	movlw	40
  4277  00EBB6  6E10               	movwf	___ftmul@f2+1,c
  4278  00EBB8  0E41               	movlw	65
  4279  00EBBA  6E11               	movwf	___ftmul@f2+2,c
  4280  00EBBC  C03C  F009         	movff	mass@m,___lwtoft@c
  4281  00EBC0  C03D  F00A         	movff	mass@m+1,___lwtoft@c+1
  4282  00EBC4  EC2A  F072         	call	___lwtoft	;wreg free
  4283  00EBC8  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4284  00EBCC  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4285  00EBD0  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4286  00EBD4  ECD7  F077         	call	___ftmul	;wreg free
  4287  00EBD8  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
  4288  00EBDC  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
  4289  00EBE0  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
  4290  00EBE4  EC64  F077         	call	___ftdiv	;wreg free
  4291  00EBE8  C01B  F02A         	movff	?___ftdiv,___ftadd@f1
  4292  00EBEC  C01C  F02B         	movff	?___ftdiv+1,___ftadd@f1+1
  4293  00EBF0  C01D  F02C         	movff	?___ftdiv+2,___ftadd@f1+2
  4294  00EBF4  0E00               	movlw	0
  4295  00EBF6  6E2D               	movwf	___ftadd@f2,c
  4296  00EBF8  0E00               	movlw	0
  4297  00EBFA  6E2E               	movwf	___ftadd@f2+1,c
  4298  00EBFC  0EC0               	movlw	192
  4299  00EBFE  6E2F               	movwf	___ftadd@f2+2,c
  4300  00EC00  ECD8  F079         	call	___ftadd	;wreg free
  4301  00EC04  C02A  F039         	movff	?___ftadd,mass@f
  4302  00EC08  C02B  F03A         	movff	?___ftadd+1,mass@f+1
  4303  00EC0C  C02C  F03B         	movff	?___ftadd+2,mass@f+2
  4304                           
  4305                           ;WMC_2.c: 136: return f;
  4306  00EC10  C039  F036         	movff	mass@f,?_mass
  4307  00EC14  C03A  F037         	movff	mass@f+1,?_mass+1
  4308  00EC18  C03B  F038         	movff	mass@f+2,?_mass+2
  4309  00EC1C  0012               	return	
  4310  00EC1E                     __end_of_mass:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           indf0	equ	0xFEF
  4319                           postinc0	equ	0xFEE
  4320                           fsr0h	equ	0xFEA
  4321                           fsr0l	equ	0xFE9
  4322                           wreg	equ	0xFE8
  4323                           indf1	equ	0xFE7
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _myadc *****************
  4332 ;; Defined at:
  4333 ;;		line 116 in file "WMC_2.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  ch              1    wreg     unsigned char 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  ch              1    4[COMRAM] unsigned char 
  4338 ;;  a               2    5[COMRAM] unsigned int 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  2    0[COMRAM] unsigned int 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;Total ram usage:        7 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_mass
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text22
  4362  00E596                     __ptext22:
  4363                           	opt stack 0
  4364  00E596                     _myadc:
  4365                           	opt stack 26
  4366                           
  4367                           ;incstack = 0
  4368                           ;myadc@ch stored from wreg
  4369  00E596  6E05               	movwf	myadc@ch,c
  4370                           
  4371                           ;WMC_2.c: 118: unsigned int a;
  4372                           ;WMC_2.c: 119: ADCON0bits.CHS0 = ch;
  4373  00E598  B005               	btfsc	myadc@ch,0,c
  4374  00E59A  D002               	bra	u2165
  4375  00E59C  94C2               	bcf	4034,2,c	;volatile
  4376  00E59E  D001               	bra	u2166
  4377  00E5A0                     u2165:
  4378  00E5A0  84C2               	bsf	4034,2,c	;volatile
  4379  00E5A2                     u2166:
  4380                           
  4381                           ;WMC_2.c: 121: ADCON0bits.GO = 1;
  4382  00E5A2  82C2               	bsf	4034,1,c	;volatile
  4383  00E5A4                     l113:
  4384  00E5A4  B2C2               	btfsc	4034,1,c	;volatile
  4385  00E5A6  D7FE               	goto	l113
  4386                           
  4387                           ;WMC_2.c: 123: a = ADRESL;
  4388  00E5A8  CFC3 F006          	movff	4035,myadc@a	;volatile
  4389  00E5AC  6A07               	clrf	myadc@a+1,c
  4390                           
  4391                           ;WMC_2.c: 124: a = a + 256*ADRESH;
  4392  00E5AE  50C4               	movf	4036,w,c	;volatile
  4393  00E5B0  6E04               	movwf	(??_myadc+1)& (0+255),c
  4394  00E5B2  6A03               	clrf	??_myadc& (0+255),c
  4395  00E5B4  5006               	movf	myadc@a,w,c
  4396  00E5B6  2403               	addwf	??_myadc,w,c
  4397  00E5B8  6E06               	movwf	myadc@a,c
  4398  00E5BA  5007               	movf	myadc@a+1,w,c
  4399  00E5BC  2004               	addwfc	??_myadc+1,w,c
  4400  00E5BE  6E07               	movwf	myadc@a+1,c
  4401                           
  4402                           ;WMC_2.c: 125: return a;
  4403  00E5C0  C006  F001         	movff	myadc@a,?_myadc
  4404  00E5C4  C007  F002         	movff	myadc@a+1,?_myadc+1
  4405  00E5C8  0012               	return	
  4406  00E5CA                     __end_of_myadc:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           indf0	equ	0xFEF
  4415                           postinc0	equ	0xFEE
  4416                           fsr0h	equ	0xFEA
  4417                           fsr0l	equ	0xFE9
  4418                           wreg	equ	0xFE8
  4419                           indf1	equ	0xFE7
  4420                           fsr1h	equ	0xFE2
  4421                           fsr1l	equ	0xFE1
  4422                           indf2	equ	0xFDF
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function ___lwtoft *****************
  4428 ;; Defined at:
  4429 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  c               2    8[COMRAM] unsigned int 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  3    8[COMRAM] float 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;Total ram usage:        3 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    1
  4450 ;; This function calls:
  4451 ;;		___ftpack
  4452 ;; This function is called by:
  4453 ;;		_mass
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text23
  4458  00E454                     __ptext23:
  4459                           	opt stack 0
  4460  00E454                     ___lwtoft:
  4461                           	opt stack 25
  4462                           
  4463                           ;incstack = 0
  4464  00E454  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4465  00E458  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4466  00E45C  6A03               	clrf	___ftpack@arg+2,c
  4467  00E45E  0E8E               	movlw	142
  4468  00E460  6E04               	movwf	___ftpack@exp,c
  4469  00E462  0E00               	movlw	0
  4470  00E464  6E05               	movwf	___ftpack@sign,c
  4471  00E466  ECA9  F076         	call	___ftpack	;wreg free
  4472  00E46A  C001  F009         	movff	?___ftpack,?___lwtoft
  4473  00E46E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4474  00E472  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4475  00E476  0012               	return	
  4476  00E478                     __end_of___lwtoft:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           indf0	equ	0xFEF
  4485                           postinc0	equ	0xFEE
  4486                           fsr0h	equ	0xFEA
  4487                           fsr0l	equ	0xFE9
  4488                           wreg	equ	0xFE8
  4489                           indf1	equ	0xFE7
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function ___ftdiv *****************
  4498 ;; Defined at:
  4499 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  f1              3   26[COMRAM] float 
  4502 ;;  f2              3   29[COMRAM] float 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  f3              3   36[COMRAM] float 
  4505 ;;  sign            1   40[COMRAM] unsigned char 
  4506 ;;  exp             1   39[COMRAM] unsigned char 
  4507 ;;  cntr            1   35[COMRAM] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  3   26[COMRAM] float 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:       15 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    1
  4524 ;; This function calls:
  4525 ;;		___ftpack
  4526 ;; This function is called by:
  4527 ;;		_mass
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text24
  4532  00EEC8                     __ptext24:
  4533                           	opt stack 0
  4534  00EEC8                     ___ftdiv:
  4535                           	opt stack 25
  4536                           
  4537                           ;incstack = 0
  4538  00EEC8  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  4539  00EECC  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  4540  00EECE  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  4541  00EED0  341C               	rlcf	___ftdiv@f1+1,w,c
  4542  00EED2  3621               	rlcf	??___ftdiv& (0+255),f,c
  4543  00EED4  E301               	bnc	u2411
  4544  00EED6  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  4545  00EED8                     u2411:
  4546  00EED8  5021               	movf	??___ftdiv,w,c
  4547  00EEDA  6E28               	movwf	___ftdiv@exp,c
  4548  00EEDC  5028               	movf	___ftdiv@exp,w,c
  4549  00EEDE  A4D8               	btfss	status,2,c
  4550  00EEE0  D007               	goto	l2569
  4551  00EEE2  0E00               	movlw	0
  4552  00EEE4  6E1B               	movwf	?___ftdiv,c
  4553  00EEE6  0E00               	movlw	0
  4554  00EEE8  6E1C               	movwf	?___ftdiv+1,c
  4555  00EEEA  0E00               	movlw	0
  4556  00EEEC  6E1D               	movwf	?___ftdiv+2,c
  4557  00EEEE  0012               	return	
  4558  00EEF0                     l2569:
  4559  00EEF0  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  4560  00EEF4  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  4561  00EEF6  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  4562  00EEF8  341F               	rlcf	___ftdiv@f2+1,w,c
  4563  00EEFA  3621               	rlcf	??___ftdiv& (0+255),f,c
  4564  00EEFC  E301               	bnc	u2431
  4565  00EEFE  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  4566  00EF00                     u2431:
  4567  00EF00  5021               	movf	??___ftdiv,w,c
  4568  00EF02  6E29               	movwf	___ftdiv@sign,c
  4569  00EF04  5029               	movf	___ftdiv@sign,w,c
  4570  00EF06  A4D8               	btfss	status,2,c
  4571  00EF08  D007               	goto	l2575
  4572  00EF0A  0E00               	movlw	0
  4573  00EF0C  6E1B               	movwf	?___ftdiv,c
  4574  00EF0E  0E00               	movlw	0
  4575  00EF10  6E1C               	movwf	?___ftdiv+1,c
  4576  00EF12  0E00               	movlw	0
  4577  00EF14  6E1D               	movwf	?___ftdiv+2,c
  4578  00EF16  0012               	return	
  4579  00EF18                     l2575:
  4580  00EF18  0E00               	movlw	0
  4581  00EF1A  6E25               	movwf	___ftdiv@f3,c
  4582  00EF1C  0E00               	movlw	0
  4583  00EF1E  6E26               	movwf	___ftdiv@f3+1,c
  4584  00EF20  0E00               	movlw	0
  4585  00EF22  6E27               	movwf	___ftdiv@f3+2,c
  4586  00EF24  5029               	movf	___ftdiv@sign,w,c
  4587  00EF26  0F89               	addlw	137
  4588  00EF28  5E28               	subwf	___ftdiv@exp,f,c
  4589  00EF2A  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  4590  00EF2E  5020               	movf	___ftdiv@f2+2,w,c
  4591  00EF30  1A29               	xorwf	___ftdiv@sign,f,c
  4592  00EF32  0E80               	movlw	128
  4593  00EF34  1629               	andwf	___ftdiv@sign,f,c
  4594  00EF36  8E1C               	bsf	___ftdiv@f1+1,7,c
  4595  00EF38  0EFF               	movlw	255
  4596  00EF3A  161B               	andwf	___ftdiv@f1,f,c
  4597  00EF3C  0EFF               	movlw	255
  4598  00EF3E  161C               	andwf	___ftdiv@f1+1,f,c
  4599  00EF40  0E00               	movlw	0
  4600  00EF42  161D               	andwf	___ftdiv@f1+2,f,c
  4601  00EF44  8E1F               	bsf	___ftdiv@f2+1,7,c
  4602  00EF46  0EFF               	movlw	255
  4603  00EF48  161E               	andwf	___ftdiv@f2,f,c
  4604  00EF4A  0EFF               	movlw	255
  4605  00EF4C  161F               	andwf	___ftdiv@f2+1,f,c
  4606  00EF4E  0E00               	movlw	0
  4607  00EF50  1620               	andwf	___ftdiv@f2+2,f,c
  4608  00EF52  0E18               	movlw	24
  4609  00EF54  6E24               	movwf	___ftdiv@cntr,c
  4610  00EF56                     l2595:
  4611  00EF56  90D8               	bcf	status,0,c
  4612  00EF58  3625               	rlcf	___ftdiv@f3,f,c
  4613  00EF5A  3626               	rlcf	___ftdiv@f3+1,f,c
  4614  00EF5C  3627               	rlcf	___ftdiv@f3+2,f,c
  4615  00EF5E  501E               	movf	___ftdiv@f2,w,c
  4616  00EF60  5C1B               	subwf	___ftdiv@f1,w,c
  4617  00EF62  501F               	movf	___ftdiv@f2+1,w,c
  4618  00EF64  581C               	subwfb	___ftdiv@f1+1,w,c
  4619  00EF66  5020               	movf	___ftdiv@f2+2,w,c
  4620  00EF68  581D               	subwfb	___ftdiv@f1+2,w,c
  4621  00EF6A  A0D8               	btfss	status,0,c
  4622  00EF6C  D007               	goto	l584
  4623  00EF6E  501E               	movf	___ftdiv@f2,w,c
  4624  00EF70  5E1B               	subwf	___ftdiv@f1,f,c
  4625  00EF72  501F               	movf	___ftdiv@f2+1,w,c
  4626  00EF74  5A1C               	subwfb	___ftdiv@f1+1,f,c
  4627  00EF76  5020               	movf	___ftdiv@f2+2,w,c
  4628  00EF78  5A1D               	subwfb	___ftdiv@f1+2,f,c
  4629  00EF7A  8025               	bsf	___ftdiv@f3,0,c
  4630  00EF7C                     l584:
  4631  00EF7C  90D8               	bcf	status,0,c
  4632  00EF7E  361B               	rlcf	___ftdiv@f1,f,c
  4633  00EF80  361C               	rlcf	___ftdiv@f1+1,f,c
  4634  00EF82  361D               	rlcf	___ftdiv@f1+2,f,c
  4635  00EF84  2E24               	decfsz	___ftdiv@cntr,f,c
  4636  00EF86  D7E7               	goto	l2595
  4637  00EF88  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
  4638  00EF8C  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4639  00EF90  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4640  00EF94  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
  4641  00EF98  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
  4642  00EF9C  ECA9  F076         	call	___ftpack	;wreg free
  4643  00EFA0  C001  F01B         	movff	?___ftpack,?___ftdiv
  4644  00EFA4  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
  4645  00EFA8  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
  4646  00EFAC  0012               	return	
  4647  00EFAE                     __end_of___ftdiv:
  4648                           	opt stack 0
  4649                           tblptru	equ	0xFF8
  4650                           tblptrh	equ	0xFF7
  4651                           tblptrl	equ	0xFF6
  4652                           tablat	equ	0xFF5
  4653                           prodh	equ	0xFF4
  4654                           prodl	equ	0xFF3
  4655                           indf0	equ	0xFEF
  4656                           postinc0	equ	0xFEE
  4657                           fsr0h	equ	0xFEA
  4658                           fsr0l	equ	0xFE9
  4659                           wreg	equ	0xFE8
  4660                           indf1	equ	0xFE7
  4661                           fsr1h	equ	0xFE2
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _inlet *****************
  4669 ;; Defined at:
  4670 ;;		line 183 in file "WMC_2.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  i               1    wreg     unsigned char 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  i               1    0[COMRAM] unsigned char 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;Total ram usage:        1 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_operate
  4694 ;;		_stop
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text25
  4699  00E3E8                     __ptext25:
  4700                           	opt stack 0
  4701  00E3E8                     _inlet:
  4702                           	opt stack 29
  4703                           
  4704                           ;incstack = 0
  4705                           ;inlet@i stored from wreg
  4706  00E3E8  6E01               	movwf	inlet@i,c
  4707                           
  4708                           ;WMC_2.c: 185: LATCbits.LC0 = i;
  4709  00E3EA  B001               	btfsc	inlet@i,0,c
  4710  00E3EC  D002               	bra	u2745
  4711  00E3EE  908B               	bcf	3979,0,c	;volatile
  4712  00E3F0  D001               	bra	u2746
  4713  00E3F2                     u2745:
  4714  00E3F2  808B               	bsf	3979,0,c	;volatile
  4715  00E3F4                     u2746:
  4716  00E3F4  0012               	return		;funcret
  4717  00E3F6                     __end_of_inlet:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           indf0	equ	0xFEF
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           fsr1h	equ	0xFE2
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _ftoa *****************
  4739 ;; Defined at:
  4740 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftoa.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  f               3   59[COMRAM] float 
  4743 ;;  status          2   62[COMRAM] PTR int 
  4744 ;;		 -> operate@stat(2), 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  l               4   68[COMRAM] unsigned long 
  4747 ;;  rem             4   64[COMRAM] unsigned long 
  4748 ;;  cp              2   72[COMRAM] PTR unsigned char 
  4749 ;;		 -> ftoa@buf(17), 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  2   59[COMRAM] PTR unsigned char 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4759 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;Total ram usage:       15 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    3
  4766 ;; This function calls:
  4767 ;;		___ftmul
  4768 ;;		___ftneg
  4769 ;;		___ftsub
  4770 ;;		___fttol
  4771 ;;		___lltoft
  4772 ;;		_sprintf
  4773 ;; This function is called by:
  4774 ;;		_operate
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text26
  4779  00F2A2                     __ptext26:
  4780                           	opt stack 0
  4781  00F2A2                     _ftoa:
  4782                           	opt stack 24
  4783                           
  4784                           ;incstack = 0
  4785  00F2A2  0ED2               	movlw	low ftoa@buf
  4786  00F2A4  6E49               	movwf	ftoa@cp,c
  4787  00F2A6  0E00               	movlw	high ftoa@buf
  4788  00F2A8  6E4A               	movwf	ftoa@cp+1,c
  4789  00F2AA  AE3E               	btfss	ftoa@f+2,7,c
  4790  00F2AC  D016               	goto	l2769
  4791  00F2AE  C049  FFD9         	movff	ftoa@cp,fsr2l
  4792  00F2B2  C04A  FFDA         	movff	ftoa@cp+1,fsr2h
  4793  00F2B6  0E2D               	movlw	45
  4794  00F2B8  6EDF               	movwf	indf2,c
  4795  00F2BA  4A49               	infsnz	ftoa@cp,f,c
  4796  00F2BC  2A4A               	incf	ftoa@cp+1,f,c
  4797  00F2BE  C03C  F001         	movff	ftoa@f,___ftneg@f1
  4798  00F2C2  C03D  F002         	movff	ftoa@f+1,___ftneg@f1+1
  4799  00F2C6  C03E  F003         	movff	ftoa@f+2,___ftneg@f1+2
  4800  00F2CA  EC18  F072         	call	___ftneg	;wreg free
  4801  00F2CE  C001  F03C         	movff	?___ftneg,ftoa@f
  4802  00F2D2  C002  F03D         	movff	?___ftneg+1,ftoa@f+1
  4803  00F2D6  C003  F03E         	movff	?___ftneg+2,ftoa@f+2
  4804  00F2DA                     l2769:
  4805  00F2DA  C03C  F01B         	movff	ftoa@f,___fttol@f1
  4806  00F2DE  C03D  F01C         	movff	ftoa@f+1,___fttol@f1+1
  4807  00F2E2  C03E  F01D         	movff	ftoa@f+2,___fttol@f1+2
  4808  00F2E6  EC51  F078         	call	___fttol	;wreg free
  4809  00F2EA  C01B  F045         	movff	?___fttol,ftoa@l
  4810  00F2EE  C01C  F046         	movff	?___fttol+1,ftoa@l+1
  4811  00F2F2  C01D  F047         	movff	?___fttol+2,ftoa@l+2
  4812  00F2F6  C01E  F048         	movff	?___fttol+3,ftoa@l+3
  4813  00F2FA  C03C  F036         	movff	ftoa@f,___ftsub@f1
  4814  00F2FE  C03D  F037         	movff	ftoa@f+1,___ftsub@f1+1
  4815  00F302  C03E  F038         	movff	ftoa@f+2,___ftsub@f1+2
  4816  00F306  C045  F009         	movff	ftoa@l,___lltoft@c
  4817  00F30A  C046  F00A         	movff	ftoa@l+1,___lltoft@c+1
  4818  00F30E  C047  F00B         	movff	ftoa@l+2,___lltoft@c+2
  4819  00F312  C048  F00C         	movff	ftoa@l+3,___lltoft@c+3
  4820  00F316  EC1A  F074         	call	___lltoft	;wreg free
  4821  00F31A  C009  F039         	movff	?___lltoft,___ftsub@f2
  4822  00F31E  C00A  F03A         	movff	?___lltoft+1,___ftsub@f2+1
  4823  00F322  C00B  F03B         	movff	?___lltoft+2,___ftsub@f2+2
  4824  00F326  EC1D  F073         	call	___ftsub	;wreg free
  4825  00F32A  C036  F03C         	movff	?___ftsub,ftoa@f
  4826  00F32E  C037  F03D         	movff	?___ftsub+1,ftoa@f+1
  4827  00F332  C038  F03E         	movff	?___ftsub+2,ftoa@f+2
  4828  00F336  0E24               	movlw	36
  4829  00F338  6E0F               	movwf	___ftmul@f2,c
  4830  00F33A  0E74               	movlw	116
  4831  00F33C  6E10               	movwf	___ftmul@f2+1,c
  4832  00F33E  0E49               	movlw	73
  4833  00F340  6E11               	movwf	___ftmul@f2+2,c
  4834  00F342  C03C  F00C         	movff	ftoa@f,___ftmul@f1
  4835  00F346  C03D  F00D         	movff	ftoa@f+1,___ftmul@f1+1
  4836  00F34A  C03E  F00E         	movff	ftoa@f+2,___ftmul@f1+2
  4837  00F34E  ECD7  F077         	call	___ftmul	;wreg free
  4838  00F352  C00C  F01B         	movff	?___ftmul,___fttol@f1
  4839  00F356  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
  4840  00F35A  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
  4841  00F35E  EC51  F078         	call	___fttol	;wreg free
  4842  00F362  C01B  F041         	movff	?___fttol,ftoa@rem
  4843  00F366  C01C  F042         	movff	?___fttol+1,ftoa@rem+1
  4844  00F36A  C01D  F043         	movff	?___fttol+2,ftoa@rem+2
  4845  00F36E  C01E  F044         	movff	?___fttol+3,ftoa@rem+3
  4846  00F372  C049  F017         	movff	ftoa@cp,sprintf@sp
  4847  00F376  C04A  F018         	movff	ftoa@cp+1,sprintf@sp+1
  4848  00F37A  0EC0               	movlw	low STR_25
  4849  00F37C  6E19               	movwf	sprintf@f,c
  4850  00F37E  0EFF               	movlw	high STR_25
  4851  00F380  6E1A               	movwf	sprintf@f+1,c
  4852  00F382  C045  F01B         	movff	ftoa@l,?_sprintf+4
  4853  00F386  C046  F01C         	movff	ftoa@l+1,?_sprintf+5
  4854  00F38A  C047  F01D         	movff	ftoa@l+2,?_sprintf+6
  4855  00F38E  C048  F01E         	movff	ftoa@l+3,?_sprintf+7
  4856  00F392  C041  F01F         	movff	ftoa@rem,?_sprintf+8
  4857  00F396  C042  F020         	movff	ftoa@rem+1,?_sprintf+9
  4858  00F39A  C043  F021         	movff	ftoa@rem+2,?_sprintf+10
  4859  00F39E  C044  F022         	movff	ftoa@rem+3,?_sprintf+11
  4860  00F3A2  ECB9  F07B         	call	_sprintf	;wreg free
  4861  00F3A6  0ED2               	movlw	low ftoa@buf
  4862  00F3A8  6E3C               	movwf	?_ftoa,c
  4863  00F3AA  0E00               	movlw	high ftoa@buf
  4864  00F3AC  6E3D               	movwf	?_ftoa+1,c
  4865  00F3AE  0012               	return	
  4866  00F3B0                     __end_of_ftoa:
  4867                           	opt stack 0
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           indf0	equ	0xFEF
  4875                           postinc0	equ	0xFEE
  4876                           fsr0h	equ	0xFEA
  4877                           fsr0l	equ	0xFE9
  4878                           wreg	equ	0xFE8
  4879                           indf1	equ	0xFE7
  4880                           fsr1h	equ	0xFE2
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _sprintf *****************
  4888 ;; Defined at:
  4889 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  sp              2   22[COMRAM] PTR unsigned char 
  4892 ;;		 -> ftoa@buf(17), 
  4893 ;;  f               2   24[COMRAM] PTR const unsigned char 
  4894 ;;		 -> STR_25(11), 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  val             4   41[COMRAM] unsigned long 
  4897 ;;  tmpval          4    0        struct .
  4898 ;;  cp              3    0        PTR const unsigned char 
  4899 ;;  prec            2   47[COMRAM] int 
  4900 ;;  width           2   45[COMRAM] int 
  4901 ;;  ap              2   39[COMRAM] PTR void [1]
  4902 ;;		 -> ?_sprintf(2), 
  4903 ;;  len             2    0        unsigned int 
  4904 ;;  c               1   49[COMRAM] char 
  4905 ;;  flag            1   38[COMRAM] unsigned char 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  2   22[COMRAM] int 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4915 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;Total ram usage:       28 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    1
  4922 ;; This function calls:
  4923 ;;		___lldiv
  4924 ;;		___llmod
  4925 ;;		___wmul
  4926 ;;		_isdigit
  4927 ;; This function is called by:
  4928 ;;		_ftoa
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text27
  4933  00F772                     __ptext27:
  4934                           	opt stack 0
  4935  00F772                     _sprintf:
  4936                           	opt stack 25
  4937                           
  4938                           ;doprnt.c: 494: va_list ap;
  4939                           ;doprnt.c: 499: signed char c;
  4940                           ;doprnt.c: 501: int width;
  4941                           ;doprnt.c: 504: int prec;
  4942                           ;doprnt.c: 508: unsigned char flag;
  4943                           ;doprnt.c: 523: union {
  4944                           ;doprnt.c: 524: unsigned long vd;
  4945                           ;doprnt.c: 525: double integ;
  4946                           ;doprnt.c: 526: } tmpval;
  4947                           ;doprnt.c: 528: unsigned long val;
  4948                           ;doprnt.c: 529: unsigned len;
  4949                           ;doprnt.c: 530: const char * cp;
  4950                           ;doprnt.c: 533: *ap = __va_start();
  4951                           
  4952                           ;incstack = 0
  4953  00F772  0E1B               	movlw	low (?_sprintf+4)
  4954  00F774  6E28               	movwf	sprintf@ap,c
  4955  00F776  0E00               	movlw	high (?_sprintf+4)
  4956  00F778  6E29               	movwf	sprintf@ap+1,c
  4957                           
  4958                           ;doprnt.c: 536: while(c = *f++) {
  4959  00F77A  D17E               	goto	l2557
  4960  00F77C                     l2457:
  4961                           
  4962                           ;doprnt.c: 538: if(c != '%')
  4963  00F77C  0E25               	movlw	37
  4964  00F77E  1832               	xorwf	sprintf@c,w,c
  4965  00F780  B4D8               	btfsc	status,2,c
  4966  00F782  D009               	goto	l2463
  4967                           
  4968                           ;doprnt.c: 540: {
  4969                           ;doprnt.c: 541: ((*sp++ = (c)));
  4970  00F784  C017  FFD9         	movff	sprintf@sp,fsr2l
  4971  00F788  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4972  00F78C  C032  FFDF         	movff	sprintf@c,indf2
  4973  00F790  4A17               	infsnz	sprintf@sp,f,c
  4974  00F792  2A18               	incf	sprintf@sp+1,f,c
  4975                           
  4976                           ;doprnt.c: 542: continue;
  4977  00F794  D171               	goto	l2557
  4978  00F796                     l2463:
  4979                           
  4980                           ;doprnt.c: 543: }
  4981                           ;doprnt.c: 546: width = 0;
  4982  00F796  0E00               	movlw	0
  4983  00F798  6E2F               	movwf	sprintf@width+1,c
  4984  00F79A  0E00               	movlw	0
  4985  00F79C  6E2E               	movwf	sprintf@width,c
  4986                           
  4987                           ;doprnt.c: 548: flag = 0;
  4988  00F79E  0E00               	movlw	0
  4989  00F7A0  6E27               	movwf	sprintf@flag,c
  4990                           
  4991                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4992  00F7A2  C019  FFF6         	movff	sprintf@f,tblptrl
  4993  00F7A6  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4994  00F7AA                     	if	0	;tblptru may be non-zero
  4995  00F7AA                     	endif
  4996  00F7AA                     	if	0	;tblptru may be non-zero
  4997  00F7AA                     	endif
  4998  00F7AA  0008               	tblrd		*
  4999  00F7AC  50F5               	movf	tablat,w,c
  5000  00F7AE  EC09  F072         	call	_isdigit
  5001  00F7B2  A0D8               	btfss	status,0,c
  5002  00F7B4  D032               	goto	l2477
  5003                           
  5004                           ;doprnt.c: 598: width = 0;
  5005  00F7B6  0E00               	movlw	0
  5006  00F7B8  6E2F               	movwf	sprintf@width+1,c
  5007  00F7BA  0E00               	movlw	0
  5008  00F7BC  6E2E               	movwf	sprintf@width,c
  5009  00F7BE                     l2469:
  5010                           
  5011                           ;doprnt.c: 600: width *= 10;
  5012  00F7BE  C02E  F001         	movff	sprintf@width,___wmul@multiplier
  5013  00F7C2  C02F  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  5014  00F7C6  0E00               	movlw	0
  5015  00F7C8  6E04               	movwf	___wmul@multiplicand+1,c
  5016  00F7CA  0E0A               	movlw	10
  5017  00F7CC  6E03               	movwf	___wmul@multiplicand,c
  5018  00F7CE  EC4E  F072         	call	___wmul	;wreg free
  5019  00F7D2  C001  F02E         	movff	?___wmul,sprintf@width
  5020  00F7D6  C002  F02F         	movff	?___wmul+1,sprintf@width+1
  5021                           
  5022                           ;doprnt.c: 601: width += *f++ - '0';
  5023  00F7DA  0ED0               	movlw	208
  5024  00F7DC  6E23               	movwf	??_sprintf& (0+255),c
  5025  00F7DE  0EFF               	movlw	255
  5026  00F7E0  6E24               	movwf	(??_sprintf+1)& (0+255),c
  5027  00F7E2  C019  FFF6         	movff	sprintf@f,tblptrl
  5028  00F7E6  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5029  00F7EA                     	if	0	;tblptru may be non-zero
  5030  00F7EA                     	endif
  5031  00F7EA                     	if	0	;tblptru may be non-zero
  5032  00F7EA                     	endif
  5033  00F7EA  0008               	tblrd		*
  5034  00F7EC  50F5               	movf	tablat,w,c
  5035  00F7EE  6E25               	movwf	(??_sprintf+2)& (0+255),c
  5036  00F7F0  6A26               	clrf	(??_sprintf+3)& (0+255),c
  5037  00F7F2  5023               	movf	??_sprintf,w,c
  5038  00F7F4  2625               	addwf	??_sprintf+2,f,c
  5039  00F7F6  5024               	movf	??_sprintf+1,w,c
  5040  00F7F8  2226               	addwfc	??_sprintf+3,f,c
  5041  00F7FA  5025               	movf	??_sprintf+2,w,c
  5042  00F7FC  262E               	addwf	sprintf@width,f,c
  5043  00F7FE  5026               	movf	??_sprintf+3,w,c
  5044  00F800  222F               	addwfc	sprintf@width+1,f,c
  5045  00F802  4A19               	infsnz	sprintf@f,f,c
  5046  00F804  2A1A               	incf	sprintf@f+1,f,c
  5047                           
  5048                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5049  00F806  C019  FFF6         	movff	sprintf@f,tblptrl
  5050  00F80A  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5051  00F80E                     	if	0	;tblptru may be non-zero
  5052  00F80E                     	endif
  5053  00F80E                     	if	0	;tblptru may be non-zero
  5054  00F80E                     	endif
  5055  00F80E  0008               	tblrd		*
  5056  00F810  50F5               	movf	tablat,w,c
  5057  00F812  EC09  F072         	call	_isdigit
  5058  00F816  B0D8               	btfsc	status,0,c
  5059  00F818  D7D2               	goto	l2469
  5060  00F81A                     l2477:
  5061                           
  5062                           ;doprnt.c: 608: }
  5063                           ;doprnt.c: 611: if(*f == '.') {
  5064  00F81A  C019  FFF6         	movff	sprintf@f,tblptrl
  5065  00F81E  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5066  00F822                     	if	0	;tblptru may be non-zero
  5067  00F822                     	endif
  5068  00F822                     	if	0	;tblptru may be non-zero
  5069  00F822                     	endif
  5070  00F822  0008               	tblrd		*
  5071  00F824  50F5               	movf	tablat,w,c
  5072  00F826  0A2E               	xorlw	46
  5073  00F828  A4D8               	btfss	status,2,c
  5074  00F82A  D02D               	goto	l2489
  5075                           
  5076                           ;doprnt.c: 613: f++;
  5077  00F82C  4A19               	infsnz	sprintf@f,f,c
  5078  00F82E  2A1A               	incf	sprintf@f+1,f,c
  5079                           
  5080                           ;doprnt.c: 620: {
  5081                           ;doprnt.c: 621: prec = 0;
  5082  00F830  0E00               	movlw	0
  5083  00F832  6E31               	movwf	sprintf@prec+1,c
  5084  00F834  0E00               	movlw	0
  5085  00F836  6E30               	movwf	sprintf@prec,c
  5086                           
  5087                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5088  00F838  D01B               	goto	l2487
  5089  00F83A                     l2483:
  5090                           
  5091                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5092  00F83A  C030  F001         	movff	sprintf@prec,___wmul@multiplier
  5093  00F83E  C031  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  5094  00F842  0E00               	movlw	0
  5095  00F844  6E04               	movwf	___wmul@multiplicand+1,c
  5096  00F846  0E0A               	movlw	10
  5097  00F848  6E03               	movwf	___wmul@multiplicand,c
  5098  00F84A  EC4E  F072         	call	___wmul	;wreg free
  5099  00F84E  C019  FFF6         	movff	sprintf@f,tblptrl
  5100  00F852  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5101  00F856                     	if	0	;tblptru may be non-zero
  5102  00F856                     	endif
  5103  00F856                     	if	0	;tblptru may be non-zero
  5104  00F856                     	endif
  5105  00F856  0008               	tblrd		*
  5106  00F858  50F5               	movf	tablat,w,c
  5107  00F85A  2601               	addwf	?___wmul,f,c
  5108  00F85C  0E00               	movlw	0
  5109  00F85E  2202               	addwfc	?___wmul+1,f,c
  5110  00F860  0ED0               	movlw	208
  5111  00F862  2401               	addwf	?___wmul,w,c
  5112  00F864  6E30               	movwf	sprintf@prec,c
  5113  00F866  0EFF               	movlw	255
  5114  00F868  2002               	addwfc	?___wmul+1,w,c
  5115  00F86A  6E31               	movwf	sprintf@prec+1,c
  5116  00F86C  4A19               	infsnz	sprintf@f,f,c
  5117  00F86E  2A1A               	incf	sprintf@f+1,f,c
  5118  00F870                     l2487:
  5119  00F870  C019  FFF6         	movff	sprintf@f,tblptrl
  5120  00F874  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5121  00F878                     	if	0	;tblptru may be non-zero
  5122  00F878                     	endif
  5123  00F878                     	if	0	;tblptru may be non-zero
  5124  00F878                     	endif
  5125  00F878  0008               	tblrd		*
  5126  00F87A  50F5               	movf	tablat,w,c
  5127  00F87C  EC09  F072         	call	_isdigit
  5128  00F880  A0D8               	btfss	status,0,c
  5129  00F882  D00B               	goto	l2497
  5130  00F884  D7DA               	goto	l2483
  5131  00F886                     l2489:
  5132                           
  5133                           ;doprnt.c: 626: prec = 0;
  5134  00F886  0E00               	movlw	0
  5135  00F888  6E31               	movwf	sprintf@prec+1,c
  5136  00F88A  0E00               	movlw	0
  5137  00F88C  6E30               	movwf	sprintf@prec,c
  5138                           
  5139                           ;doprnt.c: 635: switch(c = *f++) {
  5140                           
  5141                           ;doprnt.c: 630: }
  5142                           ;doprnt.c: 633: loop:
  5143  00F88E  D005               	goto	l2497
  5144  00F890                     l2491:
  5145                           
  5146                           ;doprnt.c: 643: flag |= 0x10;
  5147  00F890  8827               	bsf	sprintf@flag,4,c
  5148                           
  5149                           ;doprnt.c: 644: goto loop;
  5150  00F892  D003               	goto	l2497
  5151  00F894                     l2493:
  5152                           
  5153                           ;doprnt.c: 818: flag |= 0xC0;
  5154  00F894  0EC0               	movlw	192
  5155  00F896  1227               	iorwf	sprintf@flag,f,c
  5156                           
  5157                           ;doprnt.c: 822: }
  5158                           
  5159                           ;doprnt.c: 819: break;
  5160  00F898  D014               	goto	l282
  5161  00F89A                     l2497:
  5162  00F89A  C019  FFF6         	movff	sprintf@f,tblptrl
  5163  00F89E  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5164  00F8A2  4A19               	infsnz	sprintf@f,f,c
  5165  00F8A4  2A1A               	incf	sprintf@f+1,f,c
  5166  00F8A6                     	if	0	;tblptru may be non-zero
  5167  00F8A6                     	endif
  5168  00F8A6                     	if	0	;tblptru may be non-zero
  5169  00F8A6                     	endif
  5170  00F8A6  0008               	tblrd		*
  5171  00F8A8  CFF5 F032          	movff	tablat,sprintf@c
  5172  00F8AC  5032               	movf	sprintf@c,w,c
  5173                           
  5174                           ; Switch size 1, requested type "space"
  5175                           ; Number of cases is 3, Range of values is 0 to 117
  5176                           ; switch strategies available:
  5177                           ; Name         Instructions Cycles
  5178                           ; simple_byte           10     6 (average)
  5179                           ;	Chosen strategy is simple_byte
  5180  00F8AE  0A00               	xorlw	0	; case 0
  5181  00F8B0  B4D8               	btfsc	status,2,c
  5182  00F8B2  D0EE               	goto	l2559
  5183  00F8B4  0A6C               	xorlw	108	; case 108
  5184  00F8B6  B4D8               	btfsc	status,2,c
  5185  00F8B8  D7EB               	goto	l2491
  5186  00F8BA  0A19               	xorlw	25	; case 117
  5187  00F8BC  B4D8               	btfsc	status,2,c
  5188  00F8BE  D7EA               	goto	l2493
  5189  00F8C0  D0DB               	goto	l2557
  5190  00F8C2                     l282:
  5191                           
  5192                           ;doprnt.c: 1273: {
  5193                           ;doprnt.c: 1281: if(flag & 0x10)
  5194  00F8C2  A827               	btfss	sprintf@flag,4,c
  5195  00F8C4  D00E               	goto	l2503
  5196                           
  5197                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5198  00F8C6  C028  FFD9         	movff	sprintf@ap,fsr2l
  5199  00F8CA  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  5200  00F8CE  CFDE F02A          	movff	postinc2,sprintf@val
  5201  00F8D2  CFDE F02B          	movff	postinc2,sprintf@val+1
  5202  00F8D6  CFDE F02C          	movff	postinc2,sprintf@val+2
  5203  00F8DA  CFDE F02D          	movff	postinc2,sprintf@val+3
  5204  00F8DE  0E04               	movlw	4
  5205  00F8E0  D00F               	goto	L2
  5206  00F8E2                     l2503:
  5207                           
  5208                           ;doprnt.c: 1283: else
  5209                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5210  00F8E2  C028  FFD9         	movff	sprintf@ap,fsr2l
  5211  00F8E6  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  5212  00F8EA  CFDE F023          	movff	postinc2,??_sprintf
  5213  00F8EE  CFDD F024          	movff	postdec2,??_sprintf+1
  5214  00F8F2  C023  F02A         	movff	??_sprintf,sprintf@val
  5215  00F8F6  C024  F02B         	movff	??_sprintf+1,sprintf@val+1
  5216  00F8FA  6A2C               	clrf	sprintf@val+2,c
  5217  00F8FC  6A2D               	clrf	sprintf@val+3,c
  5218  00F8FE  0E02               	movlw	2
  5219  00F900                     L2:
  5220  00F900  2628               	addwf	sprintf@ap,f,c
  5221  00F902  0E00               	movlw	0
  5222  00F904  2229               	addwfc	sprintf@ap+1,f,c
  5223                           
  5224                           ;doprnt.c: 1287: }
  5225                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5226  00F906  5030               	movf	sprintf@prec,w,c
  5227  00F908  1031               	iorwf	sprintf@prec+1,w,c
  5228  00F90A  A4D8               	btfss	status,2,c
  5229  00F90C  D008               	goto	l2513
  5230  00F90E  502A               	movf	sprintf@val,w,c
  5231  00F910  102B               	iorwf	sprintf@val+1,w,c
  5232  00F912  102C               	iorwf	sprintf@val+2,w,c
  5233  00F914  102D               	iorwf	sprintf@val+3,w,c
  5234  00F916  A4D8               	btfss	status,2,c
  5235  00F918  D002               	goto	l2513
  5236                           
  5237                           ;doprnt.c: 1291: prec++;
  5238  00F91A  4A30               	infsnz	sprintf@prec,f,c
  5239  00F91C  2A31               	incf	sprintf@prec+1,f,c
  5240  00F91E                     l2513:
  5241                           
  5242                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5243  00F91E  0E01               	movlw	1
  5244  00F920  6E32               	movwf	sprintf@c,c
  5245  00F922                     l2515:
  5246  00F922  0E0A               	movlw	10
  5247  00F924  1832               	xorwf	sprintf@c,w,c
  5248  00F926  B4D8               	btfsc	status,2,c
  5249  00F928  D018               	goto	l2527
  5250                           
  5251                           ;doprnt.c: 1306: if(val < dpowers[c])
  5252  00F92A  5032               	movf	sprintf@c,w,c
  5253  00F92C  0D04               	mullw	4
  5254  00F92E  0EF1               	movlw	low _dpowers
  5255  00F930  24F3               	addwf	prodl,w,c
  5256  00F932  6EF6               	movwf	tblptrl,c
  5257  00F934  0EFE               	movlw	high _dpowers
  5258  00F936  20F4               	addwfc	prodh,w,c
  5259  00F938  6EF7               	movwf	tblptrh,c
  5260  00F93A                     	if	0	;There are less than 3 active tblptr bytes
  5261  00F93A                     	endif
  5262  00F93A  0009               	tblrd		*+
  5263  00F93C  50F5               	movf	tablat,w,c
  5264  00F93E  5C2A               	subwf	sprintf@val,w,c
  5265  00F940  0009               	tblrd		*+
  5266  00F942  50F5               	movf	tablat,w,c
  5267  00F944  582B               	subwfb	sprintf@val+1,w,c
  5268  00F946  0009               	tblrd		*+
  5269  00F948  50F5               	movf	tablat,w,c
  5270  00F94A  582C               	subwfb	sprintf@val+2,w,c
  5271  00F94C  0009               	tblrd		*+
  5272  00F94E  50F5               	movf	tablat,w,c
  5273  00F950  582D               	subwfb	sprintf@val+3,w,c
  5274  00F952  A0D8               	btfss	status,0,c
  5275  00F954  D002               	goto	l2527
  5276                           
  5277                           ;doprnt.c: 1307: break;
  5278  00F956  2A32               	incf	sprintf@c,f,c
  5279  00F958  D7E4               	goto	l2515
  5280  00F95A                     l2527:
  5281                           
  5282                           ;doprnt.c: 1339: if(c < prec)
  5283  00F95A  0E80               	movlw	128
  5284  00F95C  BE32               	btfsc	sprintf@c,7,c
  5285  00F95E  0E7F               	movlw	127
  5286  00F960  6E23               	movwf	??_sprintf& (0+255),c
  5287  00F962  5030               	movf	sprintf@prec,w,c
  5288  00F964  5C32               	subwf	sprintf@c,w,c
  5289  00F966  5031               	movf	sprintf@prec+1,w,c
  5290  00F968  0A80               	xorlw	128
  5291  00F96A  5823               	subwfb	??_sprintf& (0+255),w,c
  5292  00F96C  B0D8               	btfsc	status,0,c
  5293  00F96E  D003               	goto	l2531
  5294                           
  5295                           ;doprnt.c: 1340: c = prec;
  5296  00F970  C030  F032         	movff	sprintf@prec,sprintf@c
  5297  00F974  D010               	goto	l2535
  5298  00F976                     l2531:
  5299                           
  5300                           ;doprnt.c: 1341: else if(prec < c)
  5301  00F976  5031               	movf	sprintf@prec+1,w,c
  5302  00F978  0A80               	xorlw	128
  5303  00F97A  6E23               	movwf	??_sprintf& (0+255),c
  5304  00F97C  5032               	movf	sprintf@c,w,c
  5305  00F97E  5C30               	subwf	sprintf@prec,w,c
  5306  00F980  0E80               	movlw	128
  5307  00F982  BE32               	btfsc	sprintf@c,7,c
  5308  00F984  0E7F               	movlw	127
  5309  00F986  5823               	subwfb	??_sprintf& (0+255),w,c
  5310  00F988  B0D8               	btfsc	status,0,c
  5311  00F98A  D005               	goto	l2535
  5312                           
  5313                           ;doprnt.c: 1342: prec = c;
  5314  00F98C  5032               	movf	sprintf@c,w,c
  5315  00F98E  6E30               	movwf	sprintf@prec,c
  5316  00F990  6A31               	clrf	sprintf@prec+1,c
  5317  00F992  BE30               	btfsc	sprintf@prec,7,c
  5318  00F994  0631               	decf	sprintf@prec+1,f,c
  5319  00F996                     l2535:
  5320                           
  5321                           ;doprnt.c: 1381: if(width > c)
  5322  00F996  0E80               	movlw	128
  5323  00F998  BE32               	btfsc	sprintf@c,7,c
  5324  00F99A  0E7F               	movlw	127
  5325  00F99C  6E23               	movwf	??_sprintf& (0+255),c
  5326  00F99E  502E               	movf	sprintf@width,w,c
  5327  00F9A0  5C32               	subwf	sprintf@c,w,c
  5328  00F9A2  502F               	movf	sprintf@width+1,w,c
  5329  00F9A4  0A80               	xorlw	128
  5330  00F9A6  5823               	subwfb	??_sprintf& (0+255),w,c
  5331  00F9A8  B0D8               	btfsc	status,0,c
  5332  00F9AA  D007               	goto	l2539
  5333                           
  5334                           ;doprnt.c: 1382: width -= c;
  5335  00F9AC  5032               	movf	sprintf@c,w,c
  5336  00F9AE  5E2E               	subwf	sprintf@width,f,c
  5337  00F9B0  0E00               	movlw	0
  5338  00F9B2  BE32               	btfsc	sprintf@c,7,c
  5339  00F9B4  0EFF               	movlw	255
  5340  00F9B6  5A2F               	subwfb	sprintf@width+1,f,c
  5341  00F9B8  D004               	goto	l2541
  5342  00F9BA                     l2539:
  5343                           
  5344                           ;doprnt.c: 1383: else
  5345                           ;doprnt.c: 1384: width = 0;
  5346  00F9BA  0E00               	movlw	0
  5347  00F9BC  6E2F               	movwf	sprintf@width+1,c
  5348  00F9BE  0E00               	movlw	0
  5349  00F9C0  6E2E               	movwf	sprintf@width,c
  5350  00F9C2                     l2541:
  5351                           
  5352                           ;doprnt.c: 1422: {
  5353                           ;doprnt.c: 1424: if(width
  5354                           ;doprnt.c: 1428: )
  5355  00F9C2  502E               	movf	sprintf@width,w,c
  5356  00F9C4  102F               	iorwf	sprintf@width+1,w,c
  5357  00F9C6  B4D8               	btfsc	status,2,c
  5358  00F9C8  D04F               	goto	l2555
  5359                           
  5360                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5361                           
  5362                           ;doprnt.c: 1429: do
  5363  00F9CA  C017  FFD9         	movff	sprintf@sp,fsr2l
  5364  00F9CE  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  5365  00F9D2  0E20               	movlw	32
  5366  00F9D4  6EDF               	movwf	indf2,c
  5367  00F9D6  4A17               	infsnz	sprintf@sp,f,c
  5368  00F9D8  2A18               	incf	sprintf@sp+1,f,c
  5369                           
  5370                           ;doprnt.c: 1431: while(--width);
  5371  00F9DA  062E               	decf	sprintf@width,f,c
  5372  00F9DC  A0D8               	btfss	status,0,c
  5373  00F9DE  062F               	decf	sprintf@width+1,f,c
  5374  00F9E0  D7F0               	goto	l2541
  5375  00F9E2                     l2549:
  5376                           
  5377                           ;doprnt.c: 1478: {
  5378                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5379  00F9E2  C030  F023         	movff	sprintf@prec,??_sprintf
  5380  00F9E6  C031  F024         	movff	sprintf@prec+1,??_sprintf+1
  5381  00F9EA  90D8               	bcf	status,0,c
  5382  00F9EC  3623               	rlcf	??_sprintf,f,c
  5383  00F9EE  3624               	rlcf	??_sprintf+1,f,c
  5384  00F9F0  90D8               	bcf	status,0,c
  5385  00F9F2  3623               	rlcf	??_sprintf,f,c
  5386  00F9F4  3624               	rlcf	??_sprintf+1,f,c
  5387  00F9F6  0EF1               	movlw	low _dpowers
  5388  00F9F8  2423               	addwf	??_sprintf,w,c
  5389  00F9FA  6EF6               	movwf	tblptrl,c
  5390  00F9FC  0EFE               	movlw	high _dpowers
  5391  00F9FE  2024               	addwfc	??_sprintf+1,w,c
  5392  00FA00  6EF7               	movwf	tblptrh,c
  5393  00FA02                     	if	0	;There are less than 3 active tblptr bytes
  5394  00FA02                     	endif
  5395  00FA02  0009               	tblrd		*+
  5396  00FA04  CFF5 F005          	movff	tablat,___lldiv@divisor
  5397  00FA08  0009               	tblrd		*+
  5398  00FA0A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5399  00FA0E  0009               	tblrd		*+
  5400  00FA10  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5401  00FA14  000A               	tblrd		*-
  5402  00FA16  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5403  00FA1A  C02A  F001         	movff	sprintf@val,___lldiv@dividend
  5404  00FA1E  C02B  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  5405  00FA22  C02C  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  5406  00FA26  C02D  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  5407  00FA2A  EC8A  F075         	call	___lldiv	;wreg free
  5408  00FA2E  C001  F00E         	movff	?___lldiv,___llmod@dividend
  5409  00FA32  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  5410  00FA36  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  5411  00FA3A  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  5412  00FA3E  0E0A               	movlw	10
  5413  00FA40  6E12               	movwf	___llmod@divisor,c
  5414  00FA42  0E00               	movlw	0
  5415  00FA44  6E13               	movwf	___llmod@divisor+1,c
  5416  00FA46  0E00               	movlw	0
  5417  00FA48  6E14               	movwf	___llmod@divisor+2,c
  5418  00FA4A  0E00               	movlw	0
  5419  00FA4C  6E15               	movwf	___llmod@divisor+3,c
  5420  00FA4E  ECA5  F074         	call	___llmod	;wreg free
  5421  00FA52  500E               	movf	?___llmod,w,c
  5422  00FA54  0F30               	addlw	48
  5423  00FA56  6E32               	movwf	sprintf@c,c
  5424                           
  5425                           ;doprnt.c: 1523: }
  5426                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5427  00FA58  C017  FFD9         	movff	sprintf@sp,fsr2l
  5428  00FA5C  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  5429  00FA60  C032  FFDF         	movff	sprintf@c,indf2
  5430  00FA64  4A17               	infsnz	sprintf@sp,f,c
  5431  00FA66  2A18               	incf	sprintf@sp+1,f,c
  5432  00FA68                     l2555:
  5433  00FA68  0630               	decf	sprintf@prec,f,c
  5434  00FA6A  A0D8               	btfss	status,0,c
  5435  00FA6C  0631               	decf	sprintf@prec+1,f,c
  5436  00FA6E  2830               	incf	sprintf@prec,w,c
  5437  00FA70  E1B8               	bnz	l2549
  5438  00FA72  2831               	incf	sprintf@prec+1,w,c
  5439  00FA74  A4D8               	btfss	status,2,c
  5440  00FA76  D7B5               	goto	l2549
  5441  00FA78                     l2557:
  5442  00FA78  C019  FFF6         	movff	sprintf@f,tblptrl
  5443  00FA7C  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  5444  00FA80  4A19               	infsnz	sprintf@f,f,c
  5445  00FA82  2A1A               	incf	sprintf@f+1,f,c
  5446  00FA84                     	if	0	;tblptru may be non-zero
  5447  00FA84                     	endif
  5448  00FA84                     	if	0	;tblptru may be non-zero
  5449  00FA84                     	endif
  5450  00FA84  0008               	tblrd		*
  5451  00FA86  CFF5 F032          	movff	tablat,sprintf@c
  5452  00FA8A  5032               	movf	sprintf@c,w,c
  5453  00FA8C  A4D8               	btfss	status,2,c
  5454  00FA8E  D676               	goto	l2457
  5455  00FA90                     l2559:
  5456                           
  5457                           ;doprnt.c: 1538: *sp = 0;
  5458  00FA90  C017  FFD9         	movff	sprintf@sp,fsr2l
  5459  00FA94  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  5460  00FA98  0E00               	movlw	0
  5461  00FA9A  6EDF               	movwf	indf2,c
  5462  00FA9C  0012               	return	
  5463  00FA9E                     __end_of_sprintf:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           indf0	equ	0xFEF
  5472                           postinc0	equ	0xFEE
  5473                           fsr0h	equ	0xFEA
  5474                           fsr0l	equ	0xFE9
  5475                           wreg	equ	0xFE8
  5476                           indf1	equ	0xFE7
  5477                           fsr1h	equ	0xFE2
  5478                           fsr1l	equ	0xFE1
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function _isdigit *****************
  5487 ;; Defined at:
  5488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  c               1    wreg     unsigned char 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  c               1    2[COMRAM] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;		None               void
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;Total ram usage:        3 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_sprintf
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text28
  5516  00E412                     __ptext28:
  5517                           	opt stack 0
  5518  00E412                     _isdigit:
  5519                           	opt stack 25
  5520                           
  5521                           ;incstack = 0
  5522                           ;isdigit@c stored from wreg
  5523  00E412  6E03               	movwf	isdigit@c,c
  5524  00E414  0E00               	movlw	0
  5525  00E416  6E02               	movwf	_isdigit$919,c
  5526  00E418  0E3A               	movlw	58
  5527  00E41A  6003               	cpfslt	isdigit@c,c
  5528  00E41C  D005               	goto	l2249
  5529  00E41E  0E2F               	movlw	47
  5530  00E420  6403               	cpfsgt	isdigit@c,c
  5531  00E422  D002               	goto	l2249
  5532  00E424  0E01               	movlw	1
  5533  00E426  6E02               	movwf	_isdigit$919,c
  5534  00E428                     l2249:
  5535  00E428  C002  F001         	movff	_isdigit$919,??_isdigit
  5536  00E42C  3001               	rrcf	??_isdigit,w,c
  5537  00E42E  0012               	return	
  5538  00E430                     __end_of_isdigit:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           indf0	equ	0xFEF
  5547                           postinc0	equ	0xFEE
  5548                           fsr0h	equ	0xFEA
  5549                           fsr0l	equ	0xFE9
  5550                           wreg	equ	0xFE8
  5551                           indf1	equ	0xFE7
  5552                           fsr1h	equ	0xFE2
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           postdec2	equ	0xFDD
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function ___wmul *****************
  5562 ;; Defined at:
  5563 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  multiplier      2    0[COMRAM] unsigned int 
  5566 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  product         2    4[COMRAM] unsigned int 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2    0[COMRAM] unsigned int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0, prodl, prodh
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; This function calls:
  5585 ;;		Nothing
  5586 ;; This function is called by:
  5587 ;;		_remaintime
  5588 ;;		_sprintf
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text29
  5593  00E49C                     __ptext29:
  5594                           	opt stack 0
  5595  00E49C                     ___wmul:
  5596                           	opt stack 26
  5597                           
  5598                           ;incstack = 0
  5599  00E49C  5001               	movf	___wmul@multiplier,w,c
  5600  00E49E  0203               	mulwf	___wmul@multiplicand,c
  5601  00E4A0  CFF3 F005          	movff	prodl,___wmul@product
  5602  00E4A4  CFF4 F006          	movff	prodh,___wmul@product+1
  5603  00E4A8  5001               	movf	___wmul@multiplier,w,c
  5604  00E4AA  0204               	mulwf	___wmul@multiplicand+1,c
  5605  00E4AC  50F3               	movf	prodl,w,c
  5606  00E4AE  2606               	addwf	___wmul@product+1,f,c
  5607  00E4B0  5002               	movf	___wmul@multiplier+1,w,c
  5608  00E4B2  0203               	mulwf	___wmul@multiplicand,c
  5609  00E4B4  50F3               	movf	prodl,w,c
  5610  00E4B6  2606               	addwf	___wmul@product+1,f,c
  5611  00E4B8  C005  F001         	movff	___wmul@product,?___wmul
  5612  00E4BC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5613  00E4C0  0012               	return	
  5614  00E4C2                     __end_of___wmul:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           indf0	equ	0xFEF
  5623                           postinc0	equ	0xFEE
  5624                           fsr0h	equ	0xFEA
  5625                           fsr0l	equ	0xFE9
  5626                           wreg	equ	0xFE8
  5627                           indf1	equ	0xFE7
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function ___llmod *****************
  5638 ;; Defined at:
  5639 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  dividend        4   13[COMRAM] unsigned long 
  5642 ;;  divisor         4   17[COMRAM] unsigned long 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  counter         1   21[COMRAM] unsigned char 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  4   13[COMRAM] unsigned long 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        9 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_sprintf
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text30
  5668  00E94A                     __ptext30:
  5669                           	opt stack 0
  5670  00E94A                     ___llmod:
  5671                           	opt stack 25
  5672                           
  5673                           ;incstack = 0
  5674  00E94A  5012               	movf	___llmod@divisor,w,c
  5675  00E94C  1013               	iorwf	___llmod@divisor+1,w,c
  5676  00E94E  1014               	iorwf	___llmod@divisor+2,w,c
  5677  00E950  1015               	iorwf	___llmod@divisor+3,w,c
  5678  00E952  B4D8               	btfsc	status,2,c
  5679  00E954  D024               	goto	l688
  5680  00E956  0E01               	movlw	1
  5681  00E958  6E16               	movwf	___llmod@counter,c
  5682  00E95A  D006               	goto	l2387
  5683  00E95C                     l2385:
  5684  00E95C  90D8               	bcf	status,0,c
  5685  00E95E  3612               	rlcf	___llmod@divisor,f,c
  5686  00E960  3613               	rlcf	___llmod@divisor+1,f,c
  5687  00E962  3614               	rlcf	___llmod@divisor+2,f,c
  5688  00E964  3615               	rlcf	___llmod@divisor+3,f,c
  5689  00E966  2A16               	incf	___llmod@counter,f,c
  5690  00E968                     l2387:
  5691  00E968  AE15               	btfss	___llmod@divisor+3,7,c
  5692  00E96A  D7F8               	goto	l2385
  5693  00E96C                     l2389:
  5694  00E96C  5012               	movf	___llmod@divisor,w,c
  5695  00E96E  5C0E               	subwf	___llmod@dividend,w,c
  5696  00E970  5013               	movf	___llmod@divisor+1,w,c
  5697  00E972  580F               	subwfb	___llmod@dividend+1,w,c
  5698  00E974  5014               	movf	___llmod@divisor+2,w,c
  5699  00E976  5810               	subwfb	___llmod@dividend+2,w,c
  5700  00E978  5015               	movf	___llmod@divisor+3,w,c
  5701  00E97A  5811               	subwfb	___llmod@dividend+3,w,c
  5702  00E97C  A0D8               	btfss	status,0,c
  5703  00E97E  D008               	goto	l2393
  5704  00E980  5012               	movf	___llmod@divisor,w,c
  5705  00E982  5E0E               	subwf	___llmod@dividend,f,c
  5706  00E984  5013               	movf	___llmod@divisor+1,w,c
  5707  00E986  5A0F               	subwfb	___llmod@dividend+1,f,c
  5708  00E988  5014               	movf	___llmod@divisor+2,w,c
  5709  00E98A  5A10               	subwfb	___llmod@dividend+2,f,c
  5710  00E98C  5015               	movf	___llmod@divisor+3,w,c
  5711  00E98E  5A11               	subwfb	___llmod@dividend+3,f,c
  5712  00E990                     l2393:
  5713  00E990  90D8               	bcf	status,0,c
  5714  00E992  3215               	rrcf	___llmod@divisor+3,f,c
  5715  00E994  3214               	rrcf	___llmod@divisor+2,f,c
  5716  00E996  3213               	rrcf	___llmod@divisor+1,f,c
  5717  00E998  3212               	rrcf	___llmod@divisor,f,c
  5718  00E99A  2E16               	decfsz	___llmod@counter,f,c
  5719  00E99C  D7E7               	goto	l2389
  5720  00E99E                     l688:
  5721  00E99E  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5722  00E9A2  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5723  00E9A6  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5724  00E9AA  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5725  00E9AE  0012               	return		;funcret
  5726  00E9B0                     __end_of___llmod:
  5727                           	opt stack 0
  5728                           tblptru	equ	0xFF8
  5729                           tblptrh	equ	0xFF7
  5730                           tblptrl	equ	0xFF6
  5731                           tablat	equ	0xFF5
  5732                           prodh	equ	0xFF4
  5733                           prodl	equ	0xFF3
  5734                           indf0	equ	0xFEF
  5735                           postinc0	equ	0xFEE
  5736                           fsr0h	equ	0xFEA
  5737                           fsr0l	equ	0xFE9
  5738                           wreg	equ	0xFE8
  5739                           indf1	equ	0xFE7
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function ___lldiv *****************
  5750 ;; Defined at:
  5751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  dividend        4    0[COMRAM] unsigned long 
  5754 ;;  divisor         4    4[COMRAM] unsigned long 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  quotient        4    8[COMRAM] unsigned long 
  5757 ;;  counter         1   12[COMRAM] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  4    0[COMRAM] unsigned long 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5767 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;Total ram usage:       13 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_sprintf
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text31
  5781  00EB14                     __ptext31:
  5782                           	opt stack 0
  5783  00EB14                     ___lldiv:
  5784                           	opt stack 25
  5785                           
  5786                           ;incstack = 0
  5787  00EB14  0E00               	movlw	0
  5788  00EB16  6E09               	movwf	___lldiv@quotient,c
  5789  00EB18  0E00               	movlw	0
  5790  00EB1A  6E0A               	movwf	___lldiv@quotient+1,c
  5791  00EB1C  0E00               	movlw	0
  5792  00EB1E  6E0B               	movwf	___lldiv@quotient+2,c
  5793  00EB20  0E00               	movlw	0
  5794  00EB22  6E0C               	movwf	___lldiv@quotient+3,c
  5795  00EB24  5005               	movf	___lldiv@divisor,w,c
  5796  00EB26  1006               	iorwf	___lldiv@divisor+1,w,c
  5797  00EB28  1007               	iorwf	___lldiv@divisor+2,w,c
  5798  00EB2A  1008               	iorwf	___lldiv@divisor+3,w,c
  5799  00EB2C  B4D8               	btfsc	status,2,c
  5800  00EB2E  D02A               	goto	l678
  5801  00EB30  0E01               	movlw	1
  5802  00EB32  6E0D               	movwf	___lldiv@counter,c
  5803  00EB34  D006               	goto	l2367
  5804  00EB36                     l2365:
  5805  00EB36  90D8               	bcf	status,0,c
  5806  00EB38  3605               	rlcf	___lldiv@divisor,f,c
  5807  00EB3A  3606               	rlcf	___lldiv@divisor+1,f,c
  5808  00EB3C  3607               	rlcf	___lldiv@divisor+2,f,c
  5809  00EB3E  3608               	rlcf	___lldiv@divisor+3,f,c
  5810  00EB40  2A0D               	incf	___lldiv@counter,f,c
  5811  00EB42                     l2367:
  5812  00EB42  AE08               	btfss	___lldiv@divisor+3,7,c
  5813  00EB44  D7F8               	goto	l2365
  5814  00EB46                     l2369:
  5815  00EB46  90D8               	bcf	status,0,c
  5816  00EB48  3609               	rlcf	___lldiv@quotient,f,c
  5817  00EB4A  360A               	rlcf	___lldiv@quotient+1,f,c
  5818  00EB4C  360B               	rlcf	___lldiv@quotient+2,f,c
  5819  00EB4E  360C               	rlcf	___lldiv@quotient+3,f,c
  5820  00EB50  5005               	movf	___lldiv@divisor,w,c
  5821  00EB52  5C01               	subwf	___lldiv@dividend,w,c
  5822  00EB54  5006               	movf	___lldiv@divisor+1,w,c
  5823  00EB56  5802               	subwfb	___lldiv@dividend+1,w,c
  5824  00EB58  5007               	movf	___lldiv@divisor+2,w,c
  5825  00EB5A  5803               	subwfb	___lldiv@dividend+2,w,c
  5826  00EB5C  5008               	movf	___lldiv@divisor+3,w,c
  5827  00EB5E  5804               	subwfb	___lldiv@dividend+3,w,c
  5828  00EB60  A0D8               	btfss	status,0,c
  5829  00EB62  D009               	goto	l2377
  5830  00EB64  5005               	movf	___lldiv@divisor,w,c
  5831  00EB66  5E01               	subwf	___lldiv@dividend,f,c
  5832  00EB68  5006               	movf	___lldiv@divisor+1,w,c
  5833  00EB6A  5A02               	subwfb	___lldiv@dividend+1,f,c
  5834  00EB6C  5007               	movf	___lldiv@divisor+2,w,c
  5835  00EB6E  5A03               	subwfb	___lldiv@dividend+2,f,c
  5836  00EB70  5008               	movf	___lldiv@divisor+3,w,c
  5837  00EB72  5A04               	subwfb	___lldiv@dividend+3,f,c
  5838  00EB74  8009               	bsf	___lldiv@quotient,0,c
  5839  00EB76                     l2377:
  5840  00EB76  90D8               	bcf	status,0,c
  5841  00EB78  3208               	rrcf	___lldiv@divisor+3,f,c
  5842  00EB7A  3207               	rrcf	___lldiv@divisor+2,f,c
  5843  00EB7C  3206               	rrcf	___lldiv@divisor+1,f,c
  5844  00EB7E  3205               	rrcf	___lldiv@divisor,f,c
  5845  00EB80  2E0D               	decfsz	___lldiv@counter,f,c
  5846  00EB82  D7E1               	goto	l2369
  5847  00EB84                     l678:
  5848  00EB84  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5849  00EB88  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5850  00EB8C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5851  00EB90  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5852  00EB94  0012               	return		;funcret
  5853  00EB96                     __end_of___lldiv:
  5854                           	opt stack 0
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           indf0	equ	0xFEF
  5862                           postinc0	equ	0xFEE
  5863                           fsr0h	equ	0xFEA
  5864                           fsr0l	equ	0xFE9
  5865                           wreg	equ	0xFE8
  5866                           indf1	equ	0xFE7
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function ___lltoft *****************
  5877 ;; Defined at:
  5878 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  c               4    8[COMRAM] unsigned long 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  exp             1   16[COMRAM] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  3    8[COMRAM] float 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:        9 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    1
  5899 ;; This function calls:
  5900 ;;		___ftpack
  5901 ;; This function is called by:
  5902 ;;		_ftoa
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text32
  5907  00E834                     __ptext32:
  5908                           	opt stack 0
  5909  00E834                     ___lltoft:
  5910                           	opt stack 25
  5911                           
  5912                           ;incstack = 0
  5913  00E834  0E8E               	movlw	142
  5914  00E836  6E11               	movwf	___lltoft@exp,c
  5915  00E838  D006               	goto	l2719
  5916  00E83A                     l2717:
  5917  00E83A  90D8               	bcf	status,0,c
  5918  00E83C  320C               	rrcf	___lltoft@c+3,f,c
  5919  00E83E  320B               	rrcf	___lltoft@c+2,f,c
  5920  00E840  320A               	rrcf	___lltoft@c+1,f,c
  5921  00E842  3209               	rrcf	___lltoft@c,f,c
  5922  00E844  2A11               	incf	___lltoft@exp,f,c
  5923  00E846                     l2719:
  5924  00E846  0E00               	movlw	0
  5925  00E848  1409               	andwf	___lltoft@c,w,c
  5926  00E84A  6E0D               	movwf	??___lltoft& (0+255),c
  5927  00E84C  0E00               	movlw	0
  5928  00E84E  140A               	andwf	___lltoft@c+1,w,c
  5929  00E850  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5930  00E852  0E00               	movlw	0
  5931  00E854  140B               	andwf	___lltoft@c+2,w,c
  5932  00E856  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5933  00E858  0EFF               	movlw	255
  5934  00E85A  140C               	andwf	___lltoft@c+3,w,c
  5935  00E85C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5936  00E85E  500D               	movf	??___lltoft,w,c
  5937  00E860  100E               	iorwf	??___lltoft+1,w,c
  5938  00E862  100F               	iorwf	??___lltoft+2,w,c
  5939  00E864  1010               	iorwf	??___lltoft+3,w,c
  5940  00E866  A4D8               	btfss	status,2,c
  5941  00E868  D7E8               	goto	l2717
  5942  00E86A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5943  00E86E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5944  00E872  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5945  00E876  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5946  00E87A  0E00               	movlw	0
  5947  00E87C  6E05               	movwf	___ftpack@sign,c
  5948  00E87E  ECA9  F076         	call	___ftpack	;wreg free
  5949  00E882  C001  F009         	movff	?___ftpack,?___lltoft
  5950  00E886  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5951  00E88A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5952  00E88E  0012               	return	
  5953  00E890                     __end_of___lltoft:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           indf0	equ	0xFEF
  5962                           postinc0	equ	0xFEE
  5963                           fsr0h	equ	0xFEA
  5964                           fsr0l	equ	0xFE9
  5965                           wreg	equ	0xFE8
  5966                           indf1	equ	0xFE7
  5967                           fsr1h	equ	0xFE2
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function ___fttol *****************
  5977 ;; Defined at:
  5978 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  f1              3   26[COMRAM] float 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  lval            4   36[COMRAM] unsigned long 
  5983 ;;  exp1            1   40[COMRAM] unsigned char 
  5984 ;;  sign1           1   35[COMRAM] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  4   26[COMRAM] long 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;Total ram usage:       15 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; This function calls:
  6001 ;;		Nothing
  6002 ;; This function is called by:
  6003 ;;		_ftoa
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text33
  6008  00F0A2                     __ptext33:
  6009                           	opt stack 0
  6010  00F0A2                     ___fttol:
  6011                           	opt stack 26
  6012                           
  6013                           ;incstack = 0
  6014  00F0A2  C01D  F01F         	movff	___fttol@f1+2,??___fttol
  6015  00F0A6  6A20               	clrf	(??___fttol+1)& (0+255),c
  6016  00F0A8  6A21               	clrf	(??___fttol+2)& (0+255),c
  6017  00F0AA  341C               	rlcf	___fttol@f1+1,w,c
  6018  00F0AC  361F               	rlcf	??___fttol& (0+255),f,c
  6019  00F0AE  E301               	bnc	u2541
  6020  00F0B0  8020               	bsf	(??___fttol+1)& (0+255),0,c
  6021  00F0B2                     u2541:
  6022  00F0B2  501F               	movf	??___fttol,w,c
  6023  00F0B4  6E29               	movwf	___fttol@exp1,c
  6024  00F0B6  5029               	movf	___fttol@exp1,w,c
  6025  00F0B8  A4D8               	btfss	status,2,c
  6026  00F0BA  D009               	goto	l2675
  6027  00F0BC  0E00               	movlw	0
  6028  00F0BE  6E1B               	movwf	?___fttol,c
  6029  00F0C0  0E00               	movlw	0
  6030  00F0C2  6E1C               	movwf	?___fttol+1,c
  6031  00F0C4  0E00               	movlw	0
  6032  00F0C6  6E1D               	movwf	?___fttol+2,c
  6033  00F0C8  0E00               	movlw	0
  6034  00F0CA  6E1E               	movwf	?___fttol+3,c
  6035  00F0CC  0012               	return	
  6036  00F0CE                     l2675:
  6037  00F0CE  0E17               	movlw	23
  6038  00F0D0  6E1F               	movwf	??___fttol& (0+255),c
  6039  00F0D2  C01B  F020         	movff	___fttol@f1,??___fttol+1
  6040  00F0D6  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
  6041  00F0DA  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
  6042  00F0DE  281F               	incf	??___fttol,w,c
  6043  00F0E0  6E23               	movwf	(??___fttol+4)& (0+255),c
  6044  00F0E2  D004               	goto	u2560
  6045  00F0E4                     u2565:
  6046  00F0E4  90D8               	bcf	status,0,c
  6047  00F0E6  3222               	rrcf	??___fttol+3,f,c
  6048  00F0E8  3221               	rrcf	??___fttol+2,f,c
  6049  00F0EA  3220               	rrcf	??___fttol+1,f,c
  6050  00F0EC                     u2560:
  6051  00F0EC  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
  6052  00F0EE  D7FA               	goto	u2565
  6053  00F0F0  5020               	movf	??___fttol+1,w,c
  6054  00F0F2  6E24               	movwf	___fttol@sign1,c
  6055  00F0F4  8E1C               	bsf	___fttol@f1+1,7,c
  6056  00F0F6  0EFF               	movlw	255
  6057  00F0F8  161B               	andwf	___fttol@f1,f,c
  6058  00F0FA  0EFF               	movlw	255
  6059  00F0FC  161C               	andwf	___fttol@f1+1,f,c
  6060  00F0FE  0E00               	movlw	0
  6061  00F100  161D               	andwf	___fttol@f1+2,f,c
  6062  00F102  501B               	movf	___fttol@f1,w,c
  6063  00F104  6E25               	movwf	___fttol@lval,c
  6064  00F106  501C               	movf	___fttol@f1+1,w,c
  6065  00F108  6E26               	movwf	___fttol@lval+1,c
  6066  00F10A  501D               	movf	___fttol@f1+2,w,c
  6067  00F10C  6E27               	movwf	___fttol@lval+2,c
  6068  00F10E  6A28               	clrf	___fttol@lval+3,c
  6069  00F110  0E8E               	movlw	142
  6070  00F112  5E29               	subwf	___fttol@exp1,f,c
  6071  00F114  AE29               	btfss	___fttol@exp1,7,c
  6072  00F116  D016               	goto	l2697
  6073  00F118  5029               	movf	___fttol@exp1,w,c
  6074  00F11A  0A80               	xorlw	128
  6075  00F11C  0F8F               	addlw	143
  6076  00F11E  B0D8               	btfsc	status,0,c
  6077  00F120  D009               	goto	l2693
  6078  00F122  0E00               	movlw	0
  6079  00F124  6E1B               	movwf	?___fttol,c
  6080  00F126  0E00               	movlw	0
  6081  00F128  6E1C               	movwf	?___fttol+1,c
  6082  00F12A  0E00               	movlw	0
  6083  00F12C  6E1D               	movwf	?___fttol+2,c
  6084  00F12E  0E00               	movlw	0
  6085  00F130  6E1E               	movwf	?___fttol+3,c
  6086  00F132  0012               	return	
  6087  00F134                     l2693:
  6088  00F134  90D8               	bcf	status,0,c
  6089  00F136  3228               	rrcf	___fttol@lval+3,f,c
  6090  00F138  3227               	rrcf	___fttol@lval+2,f,c
  6091  00F13A  3226               	rrcf	___fttol@lval+1,f,c
  6092  00F13C  3225               	rrcf	___fttol@lval,f,c
  6093  00F13E  3E29               	incfsz	___fttol@exp1,f,c
  6094  00F140  D7F9               	goto	l2693
  6095  00F142  D015               	goto	l2707
  6096  00F144                     l2697:
  6097  00F144  0E17               	movlw	23
  6098  00F146  6429               	cpfsgt	___fttol@exp1,c
  6099  00F148  D00F               	goto	l2705
  6100  00F14A  0E00               	movlw	0
  6101  00F14C  6E1B               	movwf	?___fttol,c
  6102  00F14E  0E00               	movlw	0
  6103  00F150  6E1C               	movwf	?___fttol+1,c
  6104  00F152  0E00               	movlw	0
  6105  00F154  6E1D               	movwf	?___fttol+2,c
  6106  00F156  0E00               	movlw	0
  6107  00F158  6E1E               	movwf	?___fttol+3,c
  6108  00F15A  0012               	return	
  6109  00F15C                     l2703:
  6110  00F15C  90D8               	bcf	status,0,c
  6111  00F15E  3625               	rlcf	___fttol@lval,f,c
  6112  00F160  3626               	rlcf	___fttol@lval+1,f,c
  6113  00F162  3627               	rlcf	___fttol@lval+2,f,c
  6114  00F164  3628               	rlcf	___fttol@lval+3,f,c
  6115  00F166  0629               	decf	___fttol@exp1,f,c
  6116  00F168                     l2705:
  6117  00F168  5029               	movf	___fttol@exp1,w,c
  6118  00F16A  A4D8               	btfss	status,2,c
  6119  00F16C  D7F7               	goto	l2703
  6120  00F16E                     l2707:
  6121  00F16E  5024               	movf	___fttol@sign1,w,c
  6122  00F170  B4D8               	btfsc	status,2,c
  6123  00F172  D008               	goto	l2711
  6124  00F174  1E28               	comf	___fttol@lval+3,f,c
  6125  00F176  1E27               	comf	___fttol@lval+2,f,c
  6126  00F178  1E26               	comf	___fttol@lval+1,f,c
  6127  00F17A  6C25               	negf	___fttol@lval,c
  6128  00F17C  0E00               	movlw	0
  6129  00F17E  2226               	addwfc	___fttol@lval+1,f,c
  6130  00F180  2227               	addwfc	___fttol@lval+2,f,c
  6131  00F182  2228               	addwfc	___fttol@lval+3,f,c
  6132  00F184                     l2711:
  6133  00F184  C025  F01B         	movff	___fttol@lval,?___fttol
  6134  00F188  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
  6135  00F18C  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
  6136  00F190  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
  6137  00F194  0012               	return	
  6138  00F196                     __end_of___fttol:
  6139                           	opt stack 0
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           indf0	equ	0xFEF
  6147                           postinc0	equ	0xFEE
  6148                           fsr0h	equ	0xFEA
  6149                           fsr0l	equ	0xFE9
  6150                           wreg	equ	0xFE8
  6151                           indf1	equ	0xFE7
  6152                           fsr1h	equ	0xFE2
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function ___ftsub *****************
  6162 ;; Defined at:
  6163 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  f1              3   53[COMRAM] float 
  6166 ;;  f2              3   56[COMRAM] float 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  3   53[COMRAM] float 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6178 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;Total ram usage:        6 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    2
  6185 ;; This function calls:
  6186 ;;		___ftadd
  6187 ;; This function is called by:
  6188 ;;		_ftoa
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text34
  6193  00E63A                     __ptext34:
  6194                           	opt stack 0
  6195  00E63A                     ___ftsub:
  6196                           	opt stack 24
  6197                           
  6198                           ;incstack = 0
  6199  00E63A  5039               	movf	___ftsub@f2,w,c
  6200  00E63C  103A               	iorwf	___ftsub@f2+1,w,c
  6201  00E63E  103B               	iorwf	___ftsub@f2+2,w,c
  6202  00E640  B4D8               	btfsc	status,2,c
  6203  00E642  D006               	goto	l2661
  6204  00E644  0E00               	movlw	0
  6205  00E646  1A39               	xorwf	___ftsub@f2,f,c
  6206  00E648  0E00               	movlw	0
  6207  00E64A  1A3A               	xorwf	___ftsub@f2+1,f,c
  6208  00E64C  0E80               	movlw	128
  6209  00E64E  1A3B               	xorwf	___ftsub@f2+2,f,c
  6210  00E650                     l2661:
  6211  00E650  C036  F02A         	movff	___ftsub@f1,___ftadd@f1
  6212  00E654  C037  F02B         	movff	___ftsub@f1+1,___ftadd@f1+1
  6213  00E658  C038  F02C         	movff	___ftsub@f1+2,___ftadd@f1+2
  6214  00E65C  C039  F02D         	movff	___ftsub@f2,___ftadd@f2
  6215  00E660  C03A  F02E         	movff	___ftsub@f2+1,___ftadd@f2+1
  6216  00E664  C03B  F02F         	movff	___ftsub@f2+2,___ftadd@f2+2
  6217  00E668  ECD8  F079         	call	___ftadd	;wreg free
  6218  00E66C  C02A  F036         	movff	?___ftadd,?___ftsub
  6219  00E670  C02B  F037         	movff	?___ftadd+1,?___ftsub+1
  6220  00E674  C02C  F038         	movff	?___ftadd+2,?___ftsub+2
  6221  00E678  0012               	return	
  6222  00E67A                     __end_of___ftsub:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           indf0	equ	0xFEF
  6231                           postinc0	equ	0xFEE
  6232                           fsr0h	equ	0xFEA
  6233                           fsr0l	equ	0xFE9
  6234                           wreg	equ	0xFE8
  6235                           indf1	equ	0xFE7
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function ___ftadd *****************
  6246 ;; Defined at:
  6247 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  f1              3   41[COMRAM] float 
  6250 ;;  f2              3   44[COMRAM] float 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  exp1            1   52[COMRAM] unsigned char 
  6253 ;;  exp2            1   51[COMRAM] unsigned char 
  6254 ;;  sign            1   50[COMRAM] unsigned char 
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  3   41[COMRAM] float 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6264 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6267 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;Total ram usage:       12 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    1
  6271 ;; This function calls:
  6272 ;;		___ftpack
  6273 ;; This function is called by:
  6274 ;;		_mass
  6275 ;;		_operate
  6276 ;;		___ftsub
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text35
  6281  00F3B0                     __ptext35:
  6282                           	opt stack 0
  6283  00F3B0                     ___ftadd:
  6284                           	opt stack 25
  6285                           
  6286                           ;incstack = 0
  6287  00F3B0  C02C  F030         	movff	___ftadd@f1+2,??___ftadd
  6288  00F3B4  6A31               	clrf	(??___ftadd+1)& (0+255),c
  6289  00F3B6  6A32               	clrf	(??___ftadd+2)& (0+255),c
  6290  00F3B8  342B               	rlcf	___ftadd@f1+1,w,c
  6291  00F3BA  3630               	rlcf	??___ftadd& (0+255),f,c
  6292  00F3BC  E301               	bnc	u1831
  6293  00F3BE  8031               	bsf	(??___ftadd+1)& (0+255),0,c
  6294  00F3C0                     u1831:
  6295  00F3C0  5030               	movf	??___ftadd,w,c
  6296  00F3C2  6E35               	movwf	___ftadd@exp1,c
  6297  00F3C4  C02F  F030         	movff	___ftadd@f2+2,??___ftadd
  6298  00F3C8  6A31               	clrf	(??___ftadd+1)& (0+255),c
  6299  00F3CA  6A32               	clrf	(??___ftadd+2)& (0+255),c
  6300  00F3CC  342E               	rlcf	___ftadd@f2+1,w,c
  6301  00F3CE  3630               	rlcf	??___ftadd& (0+255),f,c
  6302  00F3D0  E301               	bnc	u1841
  6303  00F3D2  8031               	bsf	(??___ftadd+1)& (0+255),0,c
  6304  00F3D4                     u1841:
  6305  00F3D4  5030               	movf	??___ftadd,w,c
  6306  00F3D6  6E34               	movwf	___ftadd@exp2,c
  6307  00F3D8  5035               	movf	___ftadd@exp1,w,c
  6308  00F3DA  B4D8               	btfsc	status,2,c
  6309  00F3DC  D00B               	goto	l549
  6310  00F3DE  5034               	movf	___ftadd@exp2,w,c
  6311  00F3E0  5C35               	subwf	___ftadd@exp1,w,c
  6312  00F3E2  B0D8               	btfsc	status,0,c
  6313  00F3E4  D00E               	goto	l2267
  6314  00F3E6  5035               	movf	___ftadd@exp1,w,c
  6315  00F3E8  0800               	sublw	0
  6316  00F3EA  2434               	addwf	___ftadd@exp2,w,c
  6317  00F3EC  6E30               	movwf	??___ftadd& (0+255),c
  6318  00F3EE  0E18               	movlw	24
  6319  00F3F0  6430               	cpfsgt	??___ftadd,c
  6320  00F3F2  D007               	goto	l2267
  6321  00F3F4                     l549:
  6322  00F3F4  C02D  F02A         	movff	___ftadd@f2,?___ftadd
  6323  00F3F8  C02E  F02B         	movff	___ftadd@f2+1,?___ftadd+1
  6324  00F3FC  C02F  F02C         	movff	___ftadd@f2+2,?___ftadd+2
  6325  00F400  0012               	return	
  6326  00F402                     l2267:
  6327  00F402  5034               	movf	___ftadd@exp2,w,c
  6328  00F404  B4D8               	btfsc	status,2,c
  6329  00F406  D00B               	goto	l553
  6330  00F408  5035               	movf	___ftadd@exp1,w,c
  6331  00F40A  5C34               	subwf	___ftadd@exp2,w,c
  6332  00F40C  B0D8               	btfsc	status,0,c
  6333  00F40E  D00E               	goto	l2273
  6334  00F410  5034               	movf	___ftadd@exp2,w,c
  6335  00F412  0800               	sublw	0
  6336  00F414  2435               	addwf	___ftadd@exp1,w,c
  6337  00F416  6E30               	movwf	??___ftadd& (0+255),c
  6338  00F418  0E18               	movlw	24
  6339  00F41A  6430               	cpfsgt	??___ftadd,c
  6340  00F41C  D007               	goto	l2273
  6341  00F41E                     l553:
  6342  00F41E  C02A  F02A         	movff	___ftadd@f1,?___ftadd
  6343  00F422  C02B  F02B         	movff	___ftadd@f1+1,?___ftadd+1
  6344  00F426  C02C  F02C         	movff	___ftadd@f1+2,?___ftadd+2
  6345  00F42A  0012               	return	
  6346  00F42C                     l2273:
  6347  00F42C  0E06               	movlw	6
  6348  00F42E  6E33               	movwf	___ftadd@sign,c
  6349  00F430  BE2C               	btfsc	___ftadd@f1+2,7,c
  6350  00F432  8E33               	bsf	___ftadd@sign,7,c
  6351  00F434  BE2F               	btfsc	___ftadd@f2+2,7,c
  6352  00F436  8C33               	bsf	___ftadd@sign,6,c
  6353  00F438  8E2B               	bsf	___ftadd@f1+1,7,c
  6354  00F43A  0EFF               	movlw	255
  6355  00F43C  162A               	andwf	___ftadd@f1,f,c
  6356  00F43E  0EFF               	movlw	255
  6357  00F440  162B               	andwf	___ftadd@f1+1,f,c
  6358  00F442  0E00               	movlw	0
  6359  00F444  162C               	andwf	___ftadd@f1+2,f,c
  6360  00F446  8E2E               	bsf	___ftadd@f2+1,7,c
  6361  00F448  0EFF               	movlw	255
  6362  00F44A  162D               	andwf	___ftadd@f2,f,c
  6363  00F44C  0EFF               	movlw	255
  6364  00F44E  162E               	andwf	___ftadd@f2+1,f,c
  6365  00F450  0E00               	movlw	0
  6366  00F452  162F               	andwf	___ftadd@f2+2,f,c
  6367  00F454  5034               	movf	___ftadd@exp2,w,c
  6368  00F456  5C35               	subwf	___ftadd@exp1,w,c
  6369  00F458  B0D8               	btfsc	status,0,c
  6370  00F45A  D01B               	goto	l2299
  6371  00F45C                     l2289:
  6372  00F45C  90D8               	bcf	status,0,c
  6373  00F45E  362D               	rlcf	___ftadd@f2,f,c
  6374  00F460  362E               	rlcf	___ftadd@f2+1,f,c
  6375  00F462  362F               	rlcf	___ftadd@f2+2,f,c
  6376  00F464  0634               	decf	___ftadd@exp2,f,c
  6377  00F466  5035               	movf	___ftadd@exp1,w,c
  6378  00F468  1834               	xorwf	___ftadd@exp2,w,c
  6379  00F46A  B4D8               	btfsc	status,2,c
  6380  00F46C  D00D               	goto	l2297
  6381  00F46E  0633               	decf	___ftadd@sign,f,c
  6382  00F470  C033  F030         	movff	___ftadd@sign,??___ftadd
  6383  00F474  0E07               	movlw	7
  6384  00F476  1630               	andwf	??___ftadd,f,c
  6385  00F478  B4D8               	btfsc	status,2,c
  6386  00F47A  D006               	goto	l2297
  6387  00F47C  D7EF               	goto	l2289
  6388  00F47E                     l2295:
  6389  00F47E  90D8               	bcf	status,0,c
  6390  00F480  322C               	rrcf	___ftadd@f1+2,f,c
  6391  00F482  322B               	rrcf	___ftadd@f1+1,f,c
  6392  00F484  322A               	rrcf	___ftadd@f1,f,c
  6393  00F486  2A35               	incf	___ftadd@exp1,f,c
  6394  00F488                     l2297:
  6395  00F488  5034               	movf	___ftadd@exp2,w,c
  6396  00F48A  1835               	xorwf	___ftadd@exp1,w,c
  6397  00F48C  B4D8               	btfsc	status,2,c
  6398  00F48E  D01F               	goto	l564
  6399  00F490  D7F6               	goto	l2295
  6400  00F492                     l2299:
  6401  00F492  5035               	movf	___ftadd@exp1,w,c
  6402  00F494  5C34               	subwf	___ftadd@exp2,w,c
  6403  00F496  B0D8               	btfsc	status,0,c
  6404  00F498  D01A               	goto	l564
  6405  00F49A                     l2301:
  6406  00F49A  90D8               	bcf	status,0,c
  6407  00F49C  362A               	rlcf	___ftadd@f1,f,c
  6408  00F49E  362B               	rlcf	___ftadd@f1+1,f,c
  6409  00F4A0  362C               	rlcf	___ftadd@f1+2,f,c
  6410  00F4A2  0635               	decf	___ftadd@exp1,f,c
  6411  00F4A4  5035               	movf	___ftadd@exp1,w,c
  6412  00F4A6  1834               	xorwf	___ftadd@exp2,w,c
  6413  00F4A8  B4D8               	btfsc	status,2,c
  6414  00F4AA  D00D               	goto	l2309
  6415  00F4AC  0633               	decf	___ftadd@sign,f,c
  6416  00F4AE  C033  F030         	movff	___ftadd@sign,??___ftadd
  6417  00F4B2  0E07               	movlw	7
  6418  00F4B4  1630               	andwf	??___ftadd,f,c
  6419  00F4B6  B4D8               	btfsc	status,2,c
  6420  00F4B8  D006               	goto	l2309
  6421  00F4BA  D7EF               	goto	l2301
  6422  00F4BC                     l2307:
  6423  00F4BC  90D8               	bcf	status,0,c
  6424  00F4BE  322F               	rrcf	___ftadd@f2+2,f,c
  6425  00F4C0  322E               	rrcf	___ftadd@f2+1,f,c
  6426  00F4C2  322D               	rrcf	___ftadd@f2,f,c
  6427  00F4C4  2A34               	incf	___ftadd@exp2,f,c
  6428  00F4C6                     l2309:
  6429  00F4C6  5034               	movf	___ftadd@exp2,w,c
  6430  00F4C8  1835               	xorwf	___ftadd@exp1,w,c
  6431  00F4CA  A4D8               	btfss	status,2,c
  6432  00F4CC  D7F7               	goto	l2307
  6433  00F4CE                     l564:
  6434  00F4CE  AE33               	btfss	___ftadd@sign,7,c
  6435  00F4D0  D00C               	goto	l573
  6436  00F4D2  0EFF               	movlw	255
  6437  00F4D4  1A2A               	xorwf	___ftadd@f1,f,c
  6438  00F4D6  0EFF               	movlw	255
  6439  00F4D8  1A2B               	xorwf	___ftadd@f1+1,f,c
  6440  00F4DA  0EFF               	movlw	255
  6441  00F4DC  1A2C               	xorwf	___ftadd@f1+2,f,c
  6442  00F4DE  0E01               	movlw	1
  6443  00F4E0  262A               	addwf	___ftadd@f1,f,c
  6444  00F4E2  0E00               	movlw	0
  6445  00F4E4  222B               	addwfc	___ftadd@f1+1,f,c
  6446  00F4E6  0E00               	movlw	0
  6447  00F4E8  222C               	addwfc	___ftadd@f1+2,f,c
  6448  00F4EA                     l573:
  6449  00F4EA  AC33               	btfss	___ftadd@sign,6,c
  6450  00F4EC  D00C               	goto	l2315
  6451  00F4EE  0EFF               	movlw	255
  6452  00F4F0  1A2D               	xorwf	___ftadd@f2,f,c
  6453  00F4F2  0EFF               	movlw	255
  6454  00F4F4  1A2E               	xorwf	___ftadd@f2+1,f,c
  6455  00F4F6  0EFF               	movlw	255
  6456  00F4F8  1A2F               	xorwf	___ftadd@f2+2,f,c
  6457  00F4FA  0E01               	movlw	1
  6458  00F4FC  262D               	addwf	___ftadd@f2,f,c
  6459  00F4FE  0E00               	movlw	0
  6460  00F500  222E               	addwfc	___ftadd@f2+1,f,c
  6461  00F502  0E00               	movlw	0
  6462  00F504  222F               	addwfc	___ftadd@f2+2,f,c
  6463  00F506                     l2315:
  6464  00F506  0E00               	movlw	0
  6465  00F508  6E33               	movwf	___ftadd@sign,c
  6466  00F50A  502A               	movf	___ftadd@f1,w,c
  6467  00F50C  262D               	addwf	___ftadd@f2,f,c
  6468  00F50E  502B               	movf	___ftadd@f1+1,w,c
  6469  00F510  222E               	addwfc	___ftadd@f2+1,f,c
  6470  00F512  502C               	movf	___ftadd@f1+2,w,c
  6471  00F514  222F               	addwfc	___ftadd@f2+2,f,c
  6472  00F516  AE2F               	btfss	___ftadd@f2+2,7,c
  6473  00F518  D00E               	goto	l2325
  6474  00F51A  0EFF               	movlw	255
  6475  00F51C  1A2D               	xorwf	___ftadd@f2,f,c
  6476  00F51E  0EFF               	movlw	255
  6477  00F520  1A2E               	xorwf	___ftadd@f2+1,f,c
  6478  00F522  0EFF               	movlw	255
  6479  00F524  1A2F               	xorwf	___ftadd@f2+2,f,c
  6480  00F526  0E01               	movlw	1
  6481  00F528  262D               	addwf	___ftadd@f2,f,c
  6482  00F52A  0E00               	movlw	0
  6483  00F52C  222E               	addwfc	___ftadd@f2+1,f,c
  6484  00F52E  0E00               	movlw	0
  6485  00F530  222F               	addwfc	___ftadd@f2+2,f,c
  6486  00F532  0E01               	movlw	1
  6487  00F534  6E33               	movwf	___ftadd@sign,c
  6488  00F536                     l2325:
  6489  00F536  C02D  F001         	movff	___ftadd@f2,___ftpack@arg
  6490  00F53A  C02E  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6491  00F53E  C02F  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6492  00F542  C035  F004         	movff	___ftadd@exp1,___ftpack@exp
  6493  00F546  C033  F005         	movff	___ftadd@sign,___ftpack@sign
  6494  00F54A  ECA9  F076         	call	___ftpack	;wreg free
  6495  00F54E  C001  F02A         	movff	?___ftpack,?___ftadd
  6496  00F552  C002  F02B         	movff	?___ftpack+1,?___ftadd+1
  6497  00F556  C003  F02C         	movff	?___ftpack+2,?___ftadd+2
  6498  00F55A  0012               	return	
  6499  00F55C                     __end_of___ftadd:
  6500                           	opt stack 0
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           indf0	equ	0xFEF
  6508                           postinc0	equ	0xFEE
  6509                           fsr0h	equ	0xFEA
  6510                           fsr0l	equ	0xFE9
  6511                           wreg	equ	0xFE8
  6512                           indf1	equ	0xFE7
  6513                           fsr1h	equ	0xFE2
  6514                           fsr1l	equ	0xFE1
  6515                           indf2	equ	0xFDF
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function ___ftneg *****************
  6523 ;; Defined at:
  6524 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  f1              3    0[COMRAM] float 
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;		None
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  3    0[COMRAM] float 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2, status,0
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6538 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;Total ram usage:        3 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_ftoa
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text36
  6552  00E430                     __ptext36:
  6553                           	opt stack 0
  6554  00E430                     ___ftneg:
  6555                           	opt stack 26
  6556                           
  6557                           ;incstack = 0
  6558  00E430  5001               	movf	___ftneg@f1,w,c
  6559  00E432  1002               	iorwf	___ftneg@f1+1,w,c
  6560  00E434  1003               	iorwf	___ftneg@f1+2,w,c
  6561  00E436  B4D8               	btfsc	status,2,c
  6562  00E438  D006               	goto	l606
  6563  00E43A  0E00               	movlw	0
  6564  00E43C  1A01               	xorwf	___ftneg@f1,f,c
  6565  00E43E  0E00               	movlw	0
  6566  00E440  1A02               	xorwf	___ftneg@f1+1,f,c
  6567  00E442  0E80               	movlw	128
  6568  00E444  1A03               	xorwf	___ftneg@f1+2,f,c
  6569  00E446                     l606:
  6570  00E446  C001  F001         	movff	___ftneg@f1,?___ftneg
  6571  00E44A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6572  00E44E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6573  00E452  0012               	return		;funcret
  6574  00E454                     __end_of___ftneg:
  6575                           	opt stack 0
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           indf0	equ	0xFEF
  6583                           postinc0	equ	0xFEE
  6584                           fsr0h	equ	0xFEA
  6585                           fsr0l	equ	0xFE9
  6586                           wreg	equ	0xFE8
  6587                           indf1	equ	0xFE7
  6588                           fsr1h	equ	0xFE2
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function ___ftmul *****************
  6598 ;; Defined at:
  6599 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  f1              3   11[COMRAM] float 
  6602 ;;  f2              3   14[COMRAM] float 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  6605 ;;  sign            1   25[COMRAM] unsigned char 
  6606 ;;  cntr            1   24[COMRAM] unsigned char 
  6607 ;;  exp             1   20[COMRAM] unsigned char 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  3   11[COMRAM] float 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6617 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;Total ram usage:       15 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    1
  6624 ;; This function calls:
  6625 ;;		___ftpack
  6626 ;; This function is called by:
  6627 ;;		_mass
  6628 ;;		_ftoa
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text37
  6633  00EFAE                     __ptext37:
  6634                           	opt stack 0
  6635  00EFAE                     ___ftmul:
  6636                           	opt stack 25
  6637                           
  6638                           ;incstack = 0
  6639  00EFAE  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  6640  00EFB2  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6641  00EFB4  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6642  00EFB6  340D               	rlcf	___ftmul@f1+1,w,c
  6643  00EFB8  3612               	rlcf	??___ftmul& (0+255),f,c
  6644  00EFBA  E301               	bnc	u2461
  6645  00EFBC  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6646  00EFBE                     u2461:
  6647  00EFBE  5012               	movf	??___ftmul,w,c
  6648  00EFC0  6E15               	movwf	___ftmul@exp,c
  6649  00EFC2  5015               	movf	___ftmul@exp,w,c
  6650  00EFC4  A4D8               	btfss	status,2,c
  6651  00EFC6  D007               	goto	l2615
  6652  00EFC8  0E00               	movlw	0
  6653  00EFCA  6E0C               	movwf	?___ftmul,c
  6654  00EFCC  0E00               	movlw	0
  6655  00EFCE  6E0D               	movwf	?___ftmul+1,c
  6656  00EFD0  0E00               	movlw	0
  6657  00EFD2  6E0E               	movwf	?___ftmul+2,c
  6658  00EFD4  0012               	return	
  6659  00EFD6                     l2615:
  6660  00EFD6  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  6661  00EFDA  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6662  00EFDC  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6663  00EFDE  3410               	rlcf	___ftmul@f2+1,w,c
  6664  00EFE0  3612               	rlcf	??___ftmul& (0+255),f,c
  6665  00EFE2  E301               	bnc	u2481
  6666  00EFE4  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6667  00EFE6                     u2481:
  6668  00EFE6  5012               	movf	??___ftmul,w,c
  6669  00EFE8  6E1A               	movwf	___ftmul@sign,c
  6670  00EFEA  501A               	movf	___ftmul@sign,w,c
  6671  00EFEC  A4D8               	btfss	status,2,c
  6672  00EFEE  D007               	goto	l2621
  6673  00EFF0  0E00               	movlw	0
  6674  00EFF2  6E0C               	movwf	?___ftmul,c
  6675  00EFF4  0E00               	movlw	0
  6676  00EFF6  6E0D               	movwf	?___ftmul+1,c
  6677  00EFF8  0E00               	movlw	0
  6678  00EFFA  6E0E               	movwf	?___ftmul+2,c
  6679  00EFFC  0012               	return	
  6680  00EFFE                     l2621:
  6681  00EFFE  501A               	movf	___ftmul@sign,w,c
  6682  00F000  0F7B               	addlw	123
  6683  00F002  2615               	addwf	___ftmul@exp,f,c
  6684  00F004  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  6685  00F008  5011               	movf	___ftmul@f2+2,w,c
  6686  00F00A  1A1A               	xorwf	___ftmul@sign,f,c
  6687  00F00C  0E80               	movlw	128
  6688  00F00E  161A               	andwf	___ftmul@sign,f,c
  6689  00F010  8E0D               	bsf	___ftmul@f1+1,7,c
  6690  00F012  8E10               	bsf	___ftmul@f2+1,7,c
  6691  00F014  0EFF               	movlw	255
  6692  00F016  160F               	andwf	___ftmul@f2,f,c
  6693  00F018  0EFF               	movlw	255
  6694  00F01A  1610               	andwf	___ftmul@f2+1,f,c
  6695  00F01C  0E00               	movlw	0
  6696  00F01E  1611               	andwf	___ftmul@f2+2,f,c
  6697  00F020  0E00               	movlw	0
  6698  00F022  6E16               	movwf	___ftmul@f3_as_product,c
  6699  00F024  0E00               	movlw	0
  6700  00F026  6E17               	movwf	___ftmul@f3_as_product+1,c
  6701  00F028  0E00               	movlw	0
  6702  00F02A  6E18               	movwf	___ftmul@f3_as_product+2,c
  6703  00F02C  0E07               	movlw	7
  6704  00F02E  6E19               	movwf	___ftmul@cntr,c
  6705  00F030                     l2635:
  6706  00F030  A00C               	btfss	___ftmul@f1,0,c
  6707  00F032  D006               	goto	l2639
  6708  00F034  500F               	movf	___ftmul@f2,w,c
  6709  00F036  2616               	addwf	___ftmul@f3_as_product,f,c
  6710  00F038  5010               	movf	___ftmul@f2+1,w,c
  6711  00F03A  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6712  00F03C  5011               	movf	___ftmul@f2+2,w,c
  6713  00F03E  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6714  00F040                     l2639:
  6715  00F040  90D8               	bcf	status,0,c
  6716  00F042  320E               	rrcf	___ftmul@f1+2,f,c
  6717  00F044  320D               	rrcf	___ftmul@f1+1,f,c
  6718  00F046  320C               	rrcf	___ftmul@f1,f,c
  6719  00F048  90D8               	bcf	status,0,c
  6720  00F04A  360F               	rlcf	___ftmul@f2,f,c
  6721  00F04C  3610               	rlcf	___ftmul@f2+1,f,c
  6722  00F04E  3611               	rlcf	___ftmul@f2+2,f,c
  6723  00F050  2E19               	decfsz	___ftmul@cntr,f,c
  6724  00F052  D7EE               	goto	l2635
  6725  00F054  0E09               	movlw	9
  6726  00F056  6E19               	movwf	___ftmul@cntr,c
  6727  00F058                     l2645:
  6728  00F058  A00C               	btfss	___ftmul@f1,0,c
  6729  00F05A  D006               	goto	l2649
  6730  00F05C  500F               	movf	___ftmul@f2,w,c
  6731  00F05E  2616               	addwf	___ftmul@f3_as_product,f,c
  6732  00F060  5010               	movf	___ftmul@f2+1,w,c
  6733  00F062  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6734  00F064  5011               	movf	___ftmul@f2+2,w,c
  6735  00F066  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6736  00F068                     l2649:
  6737  00F068  90D8               	bcf	status,0,c
  6738  00F06A  320E               	rrcf	___ftmul@f1+2,f,c
  6739  00F06C  320D               	rrcf	___ftmul@f1+1,f,c
  6740  00F06E  320C               	rrcf	___ftmul@f1,f,c
  6741  00F070  90D8               	bcf	status,0,c
  6742  00F072  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  6743  00F074  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  6744  00F076  3216               	rrcf	___ftmul@f3_as_product,f,c
  6745  00F078  2E19               	decfsz	___ftmul@cntr,f,c
  6746  00F07A  D7EE               	goto	l2645
  6747  00F07C  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6748  00F080  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6749  00F084  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6750  00F088  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  6751  00F08C  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  6752  00F090  ECA9  F076         	call	___ftpack	;wreg free
  6753  00F094  C001  F00C         	movff	?___ftpack,?___ftmul
  6754  00F098  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  6755  00F09C  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  6756  00F0A0  0012               	return	
  6757  00F0A2                     __end_of___ftmul:
  6758                           	opt stack 0
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           indf0	equ	0xFEF
  6766                           postinc0	equ	0xFEE
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           indf1	equ	0xFE7
  6771                           fsr1h	equ	0xFE2
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function ___ftpack *****************
  6781 ;; Defined at:
  6782 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  arg             3    0[COMRAM] unsigned um
  6785 ;;  exp             1    3[COMRAM] unsigned char 
  6786 ;;  sign            1    4[COMRAM] unsigned char 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  3    0[COMRAM] float 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6798 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;Total ram usage:        8 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		___ftadd
  6808 ;;		___ftdiv
  6809 ;;		___ftmul
  6810 ;;		___lltoft
  6811 ;;		___lwtoft
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text38
  6816  00ED52                     __ptext38:
  6817                           	opt stack 0
  6818  00ED52                     ___ftpack:
  6819                           	opt stack 25
  6820                           
  6821                           ;incstack = 0
  6822  00ED52  5004               	movf	___ftpack@exp,w,c
  6823  00ED54  B4D8               	btfsc	status,2,c
  6824  00ED56  D005               	goto	l2119
  6825  00ED58  5001               	movf	___ftpack@arg,w,c
  6826  00ED5A  1002               	iorwf	___ftpack@arg+1,w,c
  6827  00ED5C  1003               	iorwf	___ftpack@arg+2,w,c
  6828  00ED5E  A4D8               	btfss	status,2,c
  6829  00ED60  D00C               	goto	l2125
  6830  00ED62                     l2119:
  6831  00ED62  0E00               	movlw	0
  6832  00ED64  6E01               	movwf	?___ftpack,c
  6833  00ED66  0E00               	movlw	0
  6834  00ED68  6E02               	movwf	?___ftpack+1,c
  6835  00ED6A  0E00               	movlw	0
  6836  00ED6C  6E03               	movwf	?___ftpack+2,c
  6837  00ED6E  0012               	return	
  6838  00ED70                     l2123:
  6839  00ED70  2A04               	incf	___ftpack@exp,f,c
  6840  00ED72  90D8               	bcf	status,0,c
  6841  00ED74  3203               	rrcf	___ftpack@arg+2,f,c
  6842  00ED76  3202               	rrcf	___ftpack@arg+1,f,c
  6843  00ED78  3201               	rrcf	___ftpack@arg,f,c
  6844  00ED7A                     l2125:
  6845  00ED7A  0E00               	movlw	0
  6846  00ED7C  1401               	andwf	___ftpack@arg,w,c
  6847  00ED7E  6E06               	movwf	??___ftpack& (0+255),c
  6848  00ED80  0E00               	movlw	0
  6849  00ED82  1402               	andwf	___ftpack@arg+1,w,c
  6850  00ED84  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6851  00ED86  0EFE               	movlw	254
  6852  00ED88  1403               	andwf	___ftpack@arg+2,w,c
  6853  00ED8A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6854  00ED8C  5006               	movf	??___ftpack,w,c
  6855  00ED8E  1007               	iorwf	??___ftpack+1,w,c
  6856  00ED90  1008               	iorwf	??___ftpack+2,w,c
  6857  00ED92  B4D8               	btfsc	status,2,c
  6858  00ED94  D00C               	goto	l2131
  6859  00ED96  D7EC               	goto	l2123
  6860  00ED98                     l2127:
  6861  00ED98  2A04               	incf	___ftpack@exp,f,c
  6862  00ED9A  0E01               	movlw	1
  6863  00ED9C  2601               	addwf	___ftpack@arg,f,c
  6864  00ED9E  0E00               	movlw	0
  6865  00EDA0  2202               	addwfc	___ftpack@arg+1,f,c
  6866  00EDA2  0E00               	movlw	0
  6867  00EDA4  2203               	addwfc	___ftpack@arg+2,f,c
  6868  00EDA6  90D8               	bcf	status,0,c
  6869  00EDA8  3203               	rrcf	___ftpack@arg+2,f,c
  6870  00EDAA  3202               	rrcf	___ftpack@arg+1,f,c
  6871  00EDAC  3201               	rrcf	___ftpack@arg,f,c
  6872  00EDAE                     l2131:
  6873  00EDAE  0E00               	movlw	0
  6874  00EDB0  1401               	andwf	___ftpack@arg,w,c
  6875  00EDB2  6E06               	movwf	??___ftpack& (0+255),c
  6876  00EDB4  0E00               	movlw	0
  6877  00EDB6  1402               	andwf	___ftpack@arg+1,w,c
  6878  00EDB8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6879  00EDBA  0EFF               	movlw	255
  6880  00EDBC  1403               	andwf	___ftpack@arg+2,w,c
  6881  00EDBE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6882  00EDC0  5006               	movf	??___ftpack,w,c
  6883  00EDC2  1007               	iorwf	??___ftpack+1,w,c
  6884  00EDC4  1008               	iorwf	??___ftpack+2,w,c
  6885  00EDC6  B4D8               	btfsc	status,2,c
  6886  00EDC8  D006               	goto	l2135
  6887  00EDCA  D7E6               	goto	l2127
  6888  00EDCC                     l2133:
  6889  00EDCC  0604               	decf	___ftpack@exp,f,c
  6890  00EDCE  90D8               	bcf	status,0,c
  6891  00EDD0  3601               	rlcf	___ftpack@arg,f,c
  6892  00EDD2  3602               	rlcf	___ftpack@arg+1,f,c
  6893  00EDD4  3603               	rlcf	___ftpack@arg+2,f,c
  6894  00EDD6                     l2135:
  6895  00EDD6  BE02               	btfsc	___ftpack@arg+1,7,c
  6896  00EDD8  D003               	goto	l526
  6897  00EDDA  0E02               	movlw	2
  6898  00EDDC  6004               	cpfslt	___ftpack@exp,c
  6899  00EDDE  D7F6               	goto	l2133
  6900  00EDE0                     l526:
  6901  00EDE0  A004               	btfss	___ftpack@exp,0,c
  6902  00EDE2  9E02               	bcf	___ftpack@arg+1,7,c
  6903  00EDE4  90D8               	bcf	status,0,c
  6904  00EDE6  3204               	rrcf	___ftpack@exp,f,c
  6905  00EDE8  5004               	movf	___ftpack@exp,w,c
  6906  00EDEA  1203               	iorwf	___ftpack@arg+2,f,c
  6907  00EDEC  5005               	movf	___ftpack@sign,w,c
  6908  00EDEE  A4D8               	btfss	status,2,c
  6909  00EDF0  8E03               	bsf	___ftpack@arg+2,7,c
  6910  00EDF2  C001  F001         	movff	___ftpack@arg,?___ftpack
  6911  00EDF6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6912  00EDFA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6913  00EDFE  0012               	return	
  6914  00EE00                     __end_of___ftpack:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           indf0	equ	0xFEF
  6923                           postinc0	equ	0xFEE
  6924                           fsr0h	equ	0xFEA
  6925                           fsr0l	equ	0xFE9
  6926                           wreg	equ	0xFE8
  6927                           indf1	equ	0xFE7
  6928                           fsr1h	equ	0xFE2
  6929                           fsr1l	equ	0xFE1
  6930                           indf2	equ	0xFDF
  6931                           postinc2	equ	0xFDE
  6932                           postdec2	equ	0xFDD
  6933                           fsr2h	equ	0xFDA
  6934                           fsr2l	equ	0xFD9
  6935                           status	equ	0xFD8
  6936                           
  6937 ;; *************** function ___ftge *****************
  6938 ;; Defined at:
  6939 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  ff1             3   53[COMRAM] float 
  6942 ;;  ff2             3   56[COMRAM] float 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6954 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;Total ram usage:        9 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_operate
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text39
  6968  00EC1E                     __ptext39:
  6969                           	opt stack 0
  6970  00EC1E                     ___ftge:
  6971                           	opt stack 27
  6972                           
  6973                           ;incstack = 0
  6974  00EC1E  AE38               	btfss	___ftge@ff1+2,7,c
  6975  00EC20  D016               	goto	l2811
  6976  00EC22  C036  F03C         	movff	___ftge@ff1,??___ftge
  6977  00EC26  C037  F03D         	movff	___ftge@ff1+1,??___ftge+1
  6978  00EC2A  C038  F03E         	movff	___ftge@ff1+2,??___ftge+2
  6979  00EC2E  1E3C               	comf	??___ftge,f,c
  6980  00EC30  1E3D               	comf	??___ftge+1,f,c
  6981  00EC32  1E3E               	comf	??___ftge+2,f,c
  6982  00EC34  2A3C               	incf	??___ftge,f,c
  6983  00EC36  0E00               	movlw	0
  6984  00EC38  223D               	addwfc	??___ftge+1,f,c
  6985  00EC3A  223E               	addwfc	??___ftge+2,f,c
  6986  00EC3C  0E00               	movlw	0
  6987  00EC3E  243C               	addwf	??___ftge,w,c
  6988  00EC40  6E36               	movwf	___ftge@ff1,c
  6989  00EC42  0E00               	movlw	0
  6990  00EC44  203D               	addwfc	??___ftge+1,w,c
  6991  00EC46  6E37               	movwf	___ftge@ff1+1,c
  6992  00EC48  0E80               	movlw	128
  6993  00EC4A  203E               	addwfc	??___ftge+2,w,c
  6994  00EC4C  6E38               	movwf	___ftge@ff1+2,c
  6995  00EC4E                     l2811:
  6996  00EC4E  AE3B               	btfss	___ftge@ff2+2,7,c
  6997  00EC50  D016               	goto	l2815
  6998  00EC52  C039  F03C         	movff	___ftge@ff2,??___ftge
  6999  00EC56  C03A  F03D         	movff	___ftge@ff2+1,??___ftge+1
  7000  00EC5A  C03B  F03E         	movff	___ftge@ff2+2,??___ftge+2
  7001  00EC5E  1E3C               	comf	??___ftge,f,c
  7002  00EC60  1E3D               	comf	??___ftge+1,f,c
  7003  00EC62  1E3E               	comf	??___ftge+2,f,c
  7004  00EC64  2A3C               	incf	??___ftge,f,c
  7005  00EC66  0E00               	movlw	0
  7006  00EC68  223D               	addwfc	??___ftge+1,f,c
  7007  00EC6A  223E               	addwfc	??___ftge+2,f,c
  7008  00EC6C  0E00               	movlw	0
  7009  00EC6E  243C               	addwf	??___ftge,w,c
  7010  00EC70  6E39               	movwf	___ftge@ff2,c
  7011  00EC72  0E00               	movlw	0
  7012  00EC74  203D               	addwfc	??___ftge+1,w,c
  7013  00EC76  6E3A               	movwf	___ftge@ff2+1,c
  7014  00EC78  0E80               	movlw	128
  7015  00EC7A  203E               	addwfc	??___ftge+2,w,c
  7016  00EC7C  6E3B               	movwf	___ftge@ff2+2,c
  7017  00EC7E                     l2815:
  7018  00EC7E  0E00               	movlw	0
  7019  00EC80  1A36               	xorwf	___ftge@ff1,f,c
  7020  00EC82  0E00               	movlw	0
  7021  00EC84  1A37               	xorwf	___ftge@ff1+1,f,c
  7022  00EC86  0E80               	movlw	128
  7023  00EC88  1A38               	xorwf	___ftge@ff1+2,f,c
  7024  00EC8A  0E00               	movlw	0
  7025  00EC8C  1A39               	xorwf	___ftge@ff2,f,c
  7026  00EC8E  0E00               	movlw	0
  7027  00EC90  1A3A               	xorwf	___ftge@ff2+1,f,c
  7028  00EC92  0E80               	movlw	128
  7029  00EC94  1A3B               	xorwf	___ftge@ff2+2,f,c
  7030  00EC96  5039               	movf	___ftge@ff2,w,c
  7031  00EC98  5C36               	subwf	___ftge@ff1,w,c
  7032  00EC9A  503A               	movf	___ftge@ff2+1,w,c
  7033  00EC9C  5837               	subwfb	___ftge@ff1+1,w,c
  7034  00EC9E  503B               	movf	___ftge@ff2+2,w,c
  7035  00ECA0  5838               	subwfb	___ftge@ff1+2,w,c
  7036  00ECA2  B0D8               	btfsc	status,0,c
  7037  00ECA4  D002               	goto	l2821
  7038  00ECA6  90D8               	bcf	status,0,c
  7039  00ECA8  0012               	return	
  7040  00ECAA                     l2821:
  7041  00ECAA  80D8               	bsf	status,0,c
  7042  00ECAC  0012               	return	
  7043  00ECAE                     __end_of___ftge:
  7044                           	opt stack 0
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           prodh	equ	0xFF4
  7050                           prodl	equ	0xFF3
  7051                           indf0	equ	0xFEF
  7052                           postinc0	equ	0xFEE
  7053                           fsr0h	equ	0xFEA
  7054                           fsr0l	equ	0xFE9
  7055                           wreg	equ	0xFE8
  7056                           indf1	equ	0xFE7
  7057                           fsr1h	equ	0xFE2
  7058                           fsr1l	equ	0xFE1
  7059                           indf2	equ	0xFDF
  7060                           postinc2	equ	0xFDE
  7061                           postdec2	equ	0xFDD
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _lcd_init *****************
  7067 ;; Defined at:
  7068 ;;		line 57 in file "lcd.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    2
  7089 ;; This function calls:
  7090 ;;		_atraso_ms
  7091 ;;		_lcd_cmd
  7092 ;; This function is called by:
  7093 ;;		_main
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text40
  7098  00E7D8                     __ptext40:
  7099                           	opt stack 0
  7100  00E7D8                     _lcd_init:
  7101                           	opt stack 28
  7102                           
  7103                           ;lcd.c: 59: PORTEbits.RE1=0;
  7104                           
  7105                           ;incstack = 0
  7106  00E7D8  9284               	bcf	3972,1,c	;volatile
  7107                           
  7108                           ;lcd.c: 60: PORTEbits.RE2=0;
  7109  00E7DA  9484               	bcf	3972,2,c	;volatile
  7110                           
  7111                           ;lcd.c: 61: atraso_ms(20);
  7112  00E7DC  0E00               	movlw	0
  7113  00E7DE  6E02               	movwf	atraso_ms@valor+1,c
  7114  00E7E0  0E14               	movlw	20
  7115  00E7E2  6E01               	movwf	atraso_ms@valor,c
  7116  00E7E4  ECE5  F072         	call	_atraso_ms	;wreg free
  7117                           
  7118                           ;lcd.c: 62: PORTEbits.RE1=1;
  7119  00E7E8  8284               	bsf	3972,1,c	;volatile
  7120                           
  7121                           ;lcd.c: 64: lcd_cmd(0x38);
  7122  00E7EA  0E38               	movlw	56
  7123  00E7EC  EC76  F072         	call	_lcd_cmd
  7124                           
  7125                           ;lcd.c: 65: atraso_ms(5);
  7126  00E7F0  0E00               	movlw	0
  7127  00E7F2  6E02               	movwf	atraso_ms@valor+1,c
  7128  00E7F4  0E05               	movlw	5
  7129  00E7F6  6E01               	movwf	atraso_ms@valor,c
  7130  00E7F8  ECE5  F072         	call	_atraso_ms	;wreg free
  7131                           
  7132                           ;lcd.c: 66: lcd_cmd(0x38);
  7133  00E7FC  0E38               	movlw	56
  7134  00E7FE  EC76  F072         	call	_lcd_cmd
  7135                           
  7136                           ;lcd.c: 67: atraso_ms(1);
  7137  00E802  0E00               	movlw	0
  7138  00E804  6E02               	movwf	atraso_ms@valor+1,c
  7139  00E806  0E01               	movlw	1
  7140  00E808  6E01               	movwf	atraso_ms@valor,c
  7141  00E80A  ECE5  F072         	call	_atraso_ms	;wreg free
  7142                           
  7143                           ;lcd.c: 68: lcd_cmd(0x38);
  7144  00E80E  0E38               	movlw	56
  7145  00E810  EC76  F072         	call	_lcd_cmd
  7146                           
  7147                           ;lcd.c: 69: lcd_cmd(0x08);
  7148  00E814  0E08               	movlw	8
  7149  00E816  EC76  F072         	call	_lcd_cmd
  7150                           
  7151                           ;lcd.c: 70: lcd_cmd(0x0F);
  7152  00E81A  0E0F               	movlw	15
  7153  00E81C  EC76  F072         	call	_lcd_cmd
  7154                           
  7155                           ;lcd.c: 71: lcd_cmd(0x01);
  7156  00E820  0E01               	movlw	1
  7157  00E822  EC76  F072         	call	_lcd_cmd
  7158                           
  7159                           ;lcd.c: 72: lcd_cmd(0x38);
  7160  00E826  0E38               	movlw	56
  7161  00E828  EC76  F072         	call	_lcd_cmd
  7162                           
  7163                           ;lcd.c: 73: lcd_cmd(0x80);
  7164  00E82C  0E80               	movlw	128
  7165  00E82E  EC76  F072         	call	_lcd_cmd
  7166  00E832  0012               	return		;funcret
  7167  00E834                     __end_of_lcd_init:
  7168                           	opt stack 0
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           indf0	equ	0xFEF
  7176                           postinc0	equ	0xFEE
  7177                           fsr0h	equ	0xFEA
  7178                           fsr0l	equ	0xFE9
  7179                           wreg	equ	0xFE8
  7180                           indf1	equ	0xFE7
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _lcd_cmd *****************
  7191 ;; Defined at:
  7192 ;;		line 35 in file "lcd.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  val             1    wreg     unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  val             1    5[COMRAM] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        1 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    1
  7213 ;; This function calls:
  7214 ;;		_atraso_ms
  7215 ;;		_lcd_wr
  7216 ;; This function is called by:
  7217 ;;		_operate
  7218 ;;		_spin
  7219 ;;		_menu
  7220 ;;		_remaintime
  7221 ;;		_stop
  7222 ;;		_lock
  7223 ;;		_lcd_init
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text41
  7228  00E4EC                     __ptext41:
  7229                           	opt stack 0
  7230  00E4EC                     _lcd_cmd:
  7231                           	opt stack 28
  7232                           
  7233                           ;incstack = 0
  7234                           ;lcd_cmd@val stored from wreg
  7235  00E4EC  6E06               	movwf	lcd_cmd@val,c
  7236                           
  7237                           ;lcd.c: 37: PORTEbits.RE1=1;
  7238  00E4EE  8284               	bsf	3972,1,c	;volatile
  7239                           
  7240                           ;lcd.c: 38: lcd_wr(val);
  7241  00E4F0  5006               	movf	lcd_cmd@val,w,c
  7242  00E4F2  ECE9  F071         	call	_lcd_wr
  7243                           
  7244                           ;lcd.c: 39: PORTEbits.RE2=0;
  7245  00E4F6  9484               	bcf	3972,2,c	;volatile
  7246                           
  7247                           ;lcd.c: 40: atraso_ms(3);
  7248  00E4F8  0E00               	movlw	0
  7249  00E4FA  6E02               	movwf	atraso_ms@valor+1,c
  7250  00E4FC  0E03               	movlw	3
  7251  00E4FE  6E01               	movwf	atraso_ms@valor,c
  7252  00E500  ECE5  F072         	call	_atraso_ms	;wreg free
  7253                           
  7254                           ;lcd.c: 41: PORTEbits.RE1=0;
  7255  00E504  9284               	bcf	3972,1,c	;volatile
  7256                           
  7257                           ;lcd.c: 42: atraso_ms(3);
  7258  00E506  0E00               	movlw	0
  7259  00E508  6E02               	movwf	atraso_ms@valor+1,c
  7260  00E50A  0E03               	movlw	3
  7261  00E50C  6E01               	movwf	atraso_ms@valor,c
  7262  00E50E  ECE5  F072         	call	_atraso_ms	;wreg free
  7263                           
  7264                           ;lcd.c: 43: PORTEbits.RE1=1;
  7265  00E512  8284               	bsf	3972,1,c	;volatile
  7266  00E514  0012               	return		;funcret
  7267  00E516                     __end_of_lcd_cmd:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           indf0	equ	0xFEF
  7276                           postinc0	equ	0xFEE
  7277                           fsr0h	equ	0xFEA
  7278                           fsr0l	equ	0xFE9
  7279                           wreg	equ	0xFE8
  7280                           indf1	equ	0xFE7
  7281                           fsr1h	equ	0xFE2
  7282                           fsr1l	equ	0xFE1
  7283                           indf2	equ	0xFDF
  7284                           postinc2	equ	0xFDE
  7285                           postdec2	equ	0xFDD
  7286                           fsr2h	equ	0xFDA
  7287                           fsr2l	equ	0xFD9
  7288                           status	equ	0xFD8
  7289                           
  7290 ;; *************** function _lcd_wr *****************
  7291 ;; Defined at:
  7292 ;;		line 30 in file "lcd.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  val             1    wreg     unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  val             1    0[COMRAM] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;Total ram usage:        1 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_lcd_cmd
  7316 ;;		_lcd_dat
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text42
  7321  00E3D2                     __ptext42:
  7322                           	opt stack 0
  7323  00E3D2                     _lcd_wr:
  7324                           	opt stack 27
  7325                           
  7326                           ;incstack = 0
  7327                           ;lcd_wr@val stored from wreg
  7328  00E3D2  6E01               	movwf	lcd_wr@val,c
  7329                           
  7330                           ;lcd.c: 32: PORTD=val;
  7331  00E3D4  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  7332  00E3D8  0012               	return		;funcret
  7333  00E3DA                     __end_of_lcd_wr:
  7334                           	opt stack 0
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           indf0	equ	0xFEF
  7342                           postinc0	equ	0xFEE
  7343                           fsr0h	equ	0xFEA
  7344                           fsr0l	equ	0xFE9
  7345                           wreg	equ	0xFE8
  7346                           indf1	equ	0xFE7
  7347                           fsr1h	equ	0xFE2
  7348                           fsr1l	equ	0xFE1
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           fsr2h	equ	0xFDA
  7353                           fsr2l	equ	0xFD9
  7354                           status	equ	0xFD8
  7355                           
  7356 ;; *************** function _atraso_ms *****************
  7357 ;; Defined at:
  7358 ;;		line 26 in file "atraso.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  valor           2    0[COMRAM] unsigned int 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  i               2    2[COMRAM] unsigned int 
  7363 ;;  j               1    4[COMRAM] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;Total ram usage:        5 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; This function calls:
  7380 ;;		Nothing
  7381 ;; This function is called by:
  7382 ;;		_stop
  7383 ;;		_lock
  7384 ;;		_lcd_cmd
  7385 ;;		_lcd_dat
  7386 ;;		_lcd_init
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text43
  7391  00E5CA                     __ptext43:
  7392                           	opt stack 0
  7393  00E5CA                     _atraso_ms:
  7394                           	opt stack 27
  7395                           
  7396                           ;atraso.c: 28: unsigned int i;
  7397                           ;atraso.c: 29: unsigned char j;
  7398                           ;atraso.c: 31: for (i =0; i< valor; i++)
  7399                           
  7400                           ;incstack = 0
  7401  00E5CA  0E00               	movlw	0
  7402  00E5CC  6E04               	movwf	atraso_ms@i+1,c
  7403  00E5CE  0E00               	movlw	0
  7404  00E5D0  6E03               	movwf	atraso_ms@i,c
  7405  00E5D2  D00F               	goto	l2097
  7406  00E5D4                     l2085:
  7407                           
  7408                           ;atraso.c: 32: {
  7409                           ;atraso.c: 34: for (j =0 ; j < 200; j++)
  7410  00E5D4  0E00               	movlw	0
  7411  00E5D6  6E05               	movwf	atraso_ms@j,c
  7412  00E5D8                     l2087:
  7413  00E5D8  0EC7               	movlw	199
  7414  00E5DA  6405               	cpfsgt	atraso_ms@j,c
  7415  00E5DC  D001               	goto	l250
  7416  00E5DE  D007               	goto	l2095
  7417  00E5E0                     l250:
  7418  00E5E0  F000               	nop		;# 
  7419  00E5E2  F000               	nop		;# 
  7420  00E5E4  F000               	nop		;# 
  7421  00E5E6  F000               	nop		;# 
  7422  00E5E8  F000               	nop		;# 
  7423  00E5EA  2A05               	incf	atraso_ms@j,f,c
  7424  00E5EC  D7F5               	goto	l2087
  7425  00E5EE                     l2095:
  7426  00E5EE  4A03               	infsnz	atraso_ms@i,f,c
  7427  00E5F0  2A04               	incf	atraso_ms@i+1,f,c
  7428  00E5F2                     l2097:
  7429  00E5F2  5001               	movf	atraso_ms@valor,w,c
  7430  00E5F4  5C03               	subwf	atraso_ms@i,w,c
  7431  00E5F6  5002               	movf	atraso_ms@valor+1,w,c
  7432  00E5F8  5804               	subwfb	atraso_ms@i+1,w,c
  7433  00E5FA  B0D8               	btfsc	status,0,c
  7434  00E5FC  0012               	return	
  7435  00E5FE  D7EA               	goto	l2085
  7436  00E600                     __end_of_atraso_ms:
  7437                           	opt stack 0
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           prodh	equ	0xFF4
  7443                           prodl	equ	0xFF3
  7444                           indf0	equ	0xFEF
  7445                           postinc0	equ	0xFEE
  7446                           fsr0h	equ	0xFEA
  7447                           fsr0l	equ	0xFE9
  7448                           wreg	equ	0xFE8
  7449                           indf1	equ	0xFE7
  7450                           fsr1h	equ	0xFE2
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _init_ports *****************
  7460 ;; Defined at:
  7461 ;;		line 93 in file "WMC_2.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      void 
  7468 ;; Registers used:
  7469 ;;		wreg, status,2
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;Total ram usage:        0 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text44
  7489  00E4C2                     __ptext44:
  7490                           	opt stack 0
  7491  00E4C2                     _init_ports:
  7492                           	opt stack 30
  7493                           
  7494                           ;WMC_2.c: 95: TRISA = 0b00100011;
  7495                           
  7496                           ;incstack = 0
  7497  00E4C2  0E23               	movlw	35
  7498  00E4C4  6E92               	movwf	3986,c	;volatile
  7499                           
  7500                           ;WMC_2.c: 96: TRISB = 0b00001111;
  7501  00E4C6  0E0F               	movlw	15
  7502  00E4C8  6E93               	movwf	3987,c	;volatile
  7503                           
  7504                           ;WMC_2.c: 97: TRISC = 0b00000000;
  7505  00E4CA  0E00               	movlw	0
  7506  00E4CC  6E94               	movwf	3988,c	;volatile
  7507                           
  7508                           ;WMC_2.c: 98: TRISD = 0b00000000;
  7509  00E4CE  0E00               	movlw	0
  7510  00E4D0  6E95               	movwf	3989,c	;volatile
  7511                           
  7512                           ;WMC_2.c: 99: TRISE = 0b00000000;
  7513  00E4D2  0E00               	movlw	0
  7514  00E4D4  6E96               	movwf	3990,c	;volatile
  7515                           
  7516                           ;WMC_2.c: 101: LATA = 0x00;
  7517  00E4D6  0E00               	movlw	0
  7518  00E4D8  6E89               	movwf	3977,c	;volatile
  7519                           
  7520                           ;WMC_2.c: 102: LATB = 0x00;
  7521  00E4DA  0E00               	movlw	0
  7522  00E4DC  6E8A               	movwf	3978,c	;volatile
  7523                           
  7524                           ;WMC_2.c: 103: LATC = 0x00;
  7525  00E4DE  0E00               	movlw	0
  7526  00E4E0  6E8B               	movwf	3979,c	;volatile
  7527                           
  7528                           ;WMC_2.c: 104: LATD = 0x00;
  7529  00E4E2  0E00               	movlw	0
  7530  00E4E4  6E8C               	movwf	3980,c	;volatile
  7531                           
  7532                           ;WMC_2.c: 105: LATE = 0x00;
  7533  00E4E6  0E00               	movlw	0
  7534  00E4E8  6E8D               	movwf	3981,c	;volatile
  7535  00E4EA  0012               	return		;funcret
  7536  00E4EC                     __end_of_init_ports:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           indf0	equ	0xFEF
  7545                           postinc0	equ	0xFEE
  7546                           fsr0h	equ	0xFEA
  7547                           fsr0l	equ	0xFE9
  7548                           wreg	equ	0xFE8
  7549                           indf1	equ	0xFE7
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _init_adc *****************
  7560 ;; Defined at:
  7561 ;;		line 109 in file "WMC_2.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      void 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:        0 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text45
  7589  00E3DA                     __ptext45:
  7590                           	opt stack 0
  7591  00E3DA                     _init_adc:
  7592                           	opt stack 30
  7593                           
  7594                           ;WMC_2.c: 111: ADCON0 = 0b00000011;
  7595                           
  7596                           ;incstack = 0
  7597  00E3DA  0E03               	movlw	3
  7598  00E3DC  6EC2               	movwf	4034,c	;volatile
  7599                           
  7600                           ;WMC_2.c: 112: ADCON1 = 0b00001101;
  7601  00E3DE  0E0D               	movlw	13
  7602  00E3E0  6EC1               	movwf	4033,c	;volatile
  7603                           
  7604                           ;WMC_2.c: 113: ADCON2 = 0b10000001;
  7605  00E3E2  0E81               	movlw	129
  7606  00E3E4  6EC0               	movwf	4032,c	;volatile
  7607  00E3E6  0012               	return		;funcret
  7608  00E3E8                     __end_of_init_adc:
  7609                           	opt stack 0
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           indf0	equ	0xFEF
  7617                           postinc0	equ	0xFEE
  7618                           fsr0h	equ	0xFEA
  7619                           fsr0l	equ	0xFE9
  7620                           wreg	equ	0xFE8
  7621                           indf1	equ	0xFE7
  7622                           fsr1h	equ	0xFE2
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           indf0	equ	0xFEF
  7637                           postinc0	equ	0xFEE
  7638                           fsr0h	equ	0xFEA
  7639                           fsr0l	equ	0xFE9
  7640                           wreg	equ	0xFE8
  7641                           indf1	equ	0xFE7
  7642                           fsr1h	equ	0xFE2
  7643                           fsr1l	equ	0xFE1
  7644                           indf2	equ	0xFDF
  7645                           postinc2	equ	0xFDE
  7646                           postdec2	equ	0xFDD
  7647                           fsr2h	equ	0xFDA
  7648                           fsr2l	equ	0xFD9
  7649                           status	equ	0xFD8
  7650                           
  7651                           	psect	rparam
  7652  0000                     tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           indf0	equ	0xFEF
  7659                           postinc0	equ	0xFEE
  7660                           fsr0h	equ	0xFEA
  7661                           fsr0l	equ	0xFE9
  7662                           wreg	equ	0xFE8
  7663                           indf1	equ	0xFE7
  7664                           fsr1h	equ	0xFE2
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           fsr2h	equ	0xFDA
  7670                           fsr2l	equ	0xFD9
  7671                           status	equ	0xFD8


Data Sizes:
    Strings     229
    Constant    40
    Data        2
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     114
    BANK0           128     80     115
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(2) Largest target is 2
		 -> operate@stat(COMRAM[2]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), STR_21(CODE[12]), STR_20(CODE[9]), 
		 -> STR_19(CODE[13]), STR_18(CODE[11]), STR_17(CODE[14]), STR_10(CODE[6]), 
		 -> STR_4(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> menu@menu(BANK0[80]), str1(COMRAM[16]), str(BANK0[16]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> menu@menu(BANK0[80]), str1(COMRAM[16]), str(BANK0[16]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), str(BANK0[16]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), str(BANK0[16]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), str(BANK0[16]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), 

    ftoa@cp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_25(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_24(CODE[13]), STR_23(CODE[17]), STR_22(CODE[16]), menu@menu(BANK0[80]), 
		 -> STR_16(CODE[5]), STR_15(CODE[16]), STR_14(CODE[6]), STR_13(CODE[5]), 
		 -> STR_12(CODE[9]), STR_11(CODE[17]), STR_9(CODE[6]), STR_8(CODE[9]), 
		 -> STR_7(CODE[7]), STR_6(CODE[16]), STR_5(CODE[17]), str1(COMRAM[16]), 
		 -> str(BANK0[16]), STR_3(CODE[17]), STR_2(CODE[16]), STR_1(CODE[16]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 16
		 -> str1(COMRAM[16]), str(BANK0[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> menu@menu(BANK0[80]), str1(COMRAM[16]), str(BANK0[16]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    buff	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK0[17]), 


Critical Paths under _main in COMRAM

    _main->_menu
    _stop->_lcd_str
    _menu->_cycle
    _cycle->_operate
    _spin->_remaintime
    _operate->_ftoa
    _remaintime->_itoa
    _mydelay->___wmul
    _lock->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _itoa->_utoa
    _utoa->___lwdiv
    _mass->___ftadd
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _ftoa->___ftsub
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftmul->___lwtoft
    ___ftge->___ftadd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    _main->_menu

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   77880
                           _init_adc
                         _init_ports
                           _lcd_init
                               _menu
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 0     0      0    5454
                          _atraso_ms
                              _inlet
                            _lcd_cmd
                            _lcd_str
                             _outlet
                             _status
 ---------------------------------------------------------------------------------
 (1) _menu                                                82    82      0   71046
                                             87 COMRAM     2     2      0
                                              0 BANK0     80    80      0
                             _button
                              _cycle
                            _lcd_cmd
                            _lcd_str
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _cycle                                                4     2      2   65901
                                             83 COMRAM     4     2      2
                            _operate
                               _spin
                             _status
 ---------------------------------------------------------------------------------
 (3) _spin                                                 2     0      2   17140
                                             30 COMRAM     2     0      2
                            _lcd_cmd
                            _lcd_str
                              _motor
                             _outlet
                         _remaintime
                             _status
 ---------------------------------------------------------------------------------
 (3) _operate                                              9     4      5   47495
                                             74 COMRAM     9     4      5
                            ___ftadd
                             ___ftge
                             _button
                               _ftoa
                              _inlet
                            _lcd_cmd
                            _lcd_str
                               _mass
                              _motor
                            _mydelay
                             _outlet
                         _remaintime
                             _status
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _status                                               2     1      1    1180
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _remaintime                                           6     4      2   12140
                                             24 COMRAM     6     4      2
                             ___wmul
                               _itoa
                            _lcd_cmd
                            _lcd_str
                               _lock
                            _mydelay
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1227
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     482
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _mydelay                                              5     3      2     174
                                              6 COMRAM     5     3      2
                             ___wmul (ARG)
                             _button
 ---------------------------------------------------------------------------------
 (6) _button                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _lock                                                 0     0      0    4230
                          _atraso_ms
                            _lcd_cmd
                            _lcd_str
 ---------------------------------------------------------------------------------
 (2) _lcd_str                                              5     3      2    2850
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (3) _lcd_dat                                              1     1      0     712
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _itoa                                                 8     2      6    1554
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _utoa                                                 9     3      6    1199
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _outlet                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _motor                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _mass                                                 8     5      3   11284
                                             53 COMRAM     8     5      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                              _myadc
 ---------------------------------------------------------------------------------
 (5) _myadc                                                7     5      2      68
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2619
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _inlet                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ftoa                                                15    10      5   12093
                                             59 COMRAM    15    10      5
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             37    25     12    2227
                                             22 COMRAM    28    16     12
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     380
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3860
                                             53 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3563
                                             41 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    2793
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                             53 COMRAM     9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1380
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     712
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (4) _lcd_wr                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _atraso_ms                                            5     3      2     668
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_adc
   _init_ports
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _menu
     _button
     _cycle
       _operate
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _button
         _ftoa
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
         _inlet
         _lcd_cmd
           _atraso_ms
           _lcd_wr
         _lcd_str
           _lcd_dat
             _atraso_ms
             _lcd_wr
         _mass
           ___ftadd
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
           _myadc
         _motor
         _mydelay
           ___wmul (ARG)
           _button (ARG)
         _outlet
         _remaintime
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _lcd_cmd
             _atraso_ms
             _lcd_wr
           _lcd_str
             _lcd_dat
               _atraso_ms
               _lcd_wr
           _lock
             _atraso_ms
             _lcd_cmd
               _atraso_ms
               _lcd_wr
             _lcd_str
               _lcd_dat
                 _atraso_ms
                 _lcd_wr
           _mydelay
             ___wmul (ARG)
             _button (ARG)
           _strcat
           _strcpy
         _status
         _strcat
         _strcpy
       _spin
         _lcd_cmd
           _atraso_ms
           _lcd_wr
         _lcd_str
           _lcd_dat
             _atraso_ms
             _lcd_wr
         _motor
         _outlet
         _remaintime
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _lcd_cmd
             _atraso_ms
             _lcd_wr
           _lcd_str
             _lcd_dat
               _atraso_ms
               _lcd_wr
           _lock
             _atraso_ms
             _lcd_cmd
               _atraso_ms
               _lcd_wr
             _lcd_str
               _lcd_dat
                 _atraso_ms
                 _lcd_wr
           _mydelay
             ___wmul (ARG)
             _button (ARG)
           _strcat
           _strcpy
         _status
       _status
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_str
       _lcd_dat
         _atraso_ms
         _lcd_wr
     _strcpy
   _stop
     _atraso_ms
     _inlet
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_str
       _lcd_dat
         _atraso_ms
         _lcd_wr
     _outlet
     _status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     50      73       5       89.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      72       1       89.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5      34        0.0%
DATA                 0      0      E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jun 07 08:58:54 2017

                      _b 00D0                       l98 E934      ___wmul@multiplicand 0003  
           ___ftadd@exp1 0035             ___ftadd@exp2 0034             ___ftadd@sign 0033  
                    l113 E5A4                      l122 E572                      l124 E582  
                    l125 E57A                      l128 E58A                      l160 FCCC  
                    l250 E5E0                      l282 F8C2                      l526 EDE0  
                    l606 E446                      l553 F41E                      l731 E7CE  
                    l564 F4CE                      l652 ED2E                      l573 F4EA  
                    l549 F3F4                      l741 E6B2                      l584 EF7C  
                    l678 EB84                      l688 E99E                      _str 00E3  
                    wreg 000FE8             ___ftdiv@cntr 0024             ___ftdiv@sign 0029  
           __CFG_WDT$OFF 000000                     l2131 EDAE                     l2123 ED70  
                   l3011 F1E4                     l3003 F198                     l2133 EDCC  
                   l2125 ED7A                     l2301 F49A                     l2135 EDD6  
                   l2127 ED98                     l2119 ED62                     l2215 E592  
                   l2161 E7A8                     l2315 F506                     l2307 F4BC  
                   l2331 ECB6                     l2235 EA9A                     l3019 F230  
                   l3123 F6E2                     l2085 E5D4                     l2325 F536  
                   l2309 F4C6                     l2157 E79C                     l2181 E694  
                   l2341 ECF0                     l2421 E74A                     l3029 F27C  
                   l3109 F6A4                     l3133 F716                     l2095 E5EE  
                   l2087 E5D8                     l2503 F8E2                     l2159 E7A4  
                   l2239 EAD6                     l2431 E71C                     l2423 E752  
                   l3135 F73A                     l2097 E5F2                     l2273 F42C  
                   l2249 E428                     l2513 F91E                     l2169 E7C4  
                   l2185 E6A8                     l2177 E688                     l2433 E724  
                   l3081 F62A                     l2267 F402                     l2531 F976  
                   l2515 F922                     l2179 E690                     l2451 E6E0  
                   l2427 E708                     l3067 F5EC                     l2621 EFFE  
                   l2365 EB36                     l2541 F9C2                     l2429 E70C  
                   l2615 EFD6                     l2295 F47E                     l2711 F184  
                   l2703 F15C                     l2367 EB42                     l2535 F996  
                   l2527 F95A                     l2463 F796                     l3095 F668  
                   l2297 F488                     l2289 F45C                     l2705 F168  
                   l2377 EB76                     l2369 EB46                     l2393 E990  
                   l2385 E95C                     l2457 F77C                     l2811 EC4E  
                   l2635 F030                     l2299 F492                     l2707 F16E  
                   l2387 E968                     l2555 FA68                     l2539 F9BA  
                   l2491 F890                     l2483 F83A                     l3179 E484  
                   l2821 ECAA                     l2645 F058                     l2661 E650  
                   l2717 E83A                     l2389 E96C                     l2549 F9E2  
                   l2493 F894                     l2469 F7BE                     l2477 F81A  
                   l2557 FA78                     l2805 EEBA                     l2815 EC7E  
                   l2639 F040                     l2719 E846                     l2559 FA90  
                   l2487 F870                     l2575 EF18                     l2399 E8F6  
                   l2751 E8D8                     l2743 E8B4                     l2911 FD58  
                   l2649 F068                     l2497 F89A                     l2489 F886  
                   l2569 EEF0                     l2841 FAEE                     l2675 F0CE  
                   l2595 EF56                     l2747 E8C6                     l2739 E8A2  
                   l2915 FD70                     l2693 F134                     l2917 FD7C  
                   l2933 FDFC                     l2783 EE0A                     l2847 FB0A  
                   l2697 F144                     l2769 F2DA                     l2961 FE94  
                   l2857 FB70                     l2849 FB18                     l2947 FE54  
                   l2965 FEA6                     l2877 FC0A                     l2959 FE88  
                   l2879 FC2A                     l2889 FCA0                     l2897 FD08  
                   STR_1 FF4C                     STR_2 FF6C                     STR_3 FF2A  
                   STR_4 FFE8                     STR_5 FF2A                     STR_6 FF7C  
                   STR_7 FFCF                     STR_8 FFAB                     STR_9 FFE2  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     u2411 EED8  
                   u2180 E77C                     u2165 E5A0                     u3117 E926  
                   u2166 E5A2                     u2431 EF00                     u2187 E772  
                   u2461 EFBE                     u2541 F0B2                     u1831 F3C0  
                   u2560 F0EC                     u2481 EFE6                     u1841 F3D4  
                   u2705 E8D6                     u2706 E8D8                     u1780 EAD0  
                   u2565 F0E4                     u2725 E8E8                     u2645 E8A0  
                   u1790 EB0C                     u2726 E8EA                     u2646 E8A2  
                   u2735 E400                     u2736 E402                     u2745 E3F2  
                   u2665 E8B2                     u2746 E3F4                     u2666 E8B4  
                   u2755 E40E                     u1787 EAC6                     u2756 E410  
                   u1797 EB02                     u2685 E8C4                     u2686 E8C6  
                   _buff 005F                     _main E478                     _cycl 0071  
                   _ftoa F2A2                     _mass EB96             ___ftpack@arg 0001  
                   _lock E540                     _menu F55C                     _itoa E6BC  
           ___ftpack@exp 0004                     _str1 0061                     _spin E9B0  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   _stop EA1A                     _utoa ECAE                     prodh 000FF4  
                   prodl 000FF3                     start 0000            spin@spindelay 001F  
           ___ftmul@cntr 0019             ___param_bank 000000             ___ftmul@sign 001A  
           ___fttol@exp1 0029             ___fttol@lval 0025                    ?_main 0001  
                  ?_ftoa 003C                    ?_mass 0036                    ?_lock 0001  
                  ?_menu 0001                    ?_itoa 0011          __end_of___ftadd F55C  
                  STR_10 FFE8                    STR_11 FF19                    STR_20 FFDF  
                  STR_12 FFD6                    STR_13 FFF4                    STR_21 FFB4  
                  STR_22 FF5C                    STR_14 FFEE                    STR_15 FF5C  
                  STR_23 FF3B                    STR_16 FFF9                    STR_24 FF9A  
                  STR_25 FFC0                    STR_17 FF8C                    STR_18 FFCB  
                  STR_19 FFA7          __end_of___ftdiv EFAE                    ?_spin 001F  
        __end_of___ftneg E454          __end_of___lldiv EB96                    ?_stop 0001  
                  ?_utoa 0008          __end_of___ftmul F0A2          __end_of___llmod E9B0  
        __end_of___ftsub E67A          __end_of___fttol F196          __end_of___lwdiv E7D8  
        __end_of___lwmod E6BC                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96             ___lltoft@exp 0011          __end_of_lcd_dat E540  
        __end_of_lcd_cmd E516          __end_of_lcd_str EB14          __end_of_dpowers FF19  
                  _cycle F196                    _inlet E3E8          __end_of_isdigit E430  
                  _myadc E596            ___ftpack@sign 0005                    _motor E3F6  
                  ftoa@f 003C                    ftoa@l 0045                    mass@f 0039  
                  mass@m 003C          __end_of_operate FEF0                    tablat 000FF5  
        __end_of_mydelay E94A                    utoa@c 0010                    utoa@v 000E  
                  status 000FD8          __end_of_sprintf FA9E          __initialization E600  
           __end_of_main E49C             __end_of_ftoa F3B0             __end_of_mass EC1E  
           __end_of_lock E56A             __end_of_menu F772             __end_of_itoa E6FE  
           __end_of_spin EA1A             __end_of_stop EA94             __end_of_utoa ED52  
                 ??_main 005A                   ??_ftoa 0041            ___fttol@sign1 0024  
                 ??_mass 0039                   ??_menu 0058                   ??_lock 000C  
                 ??_itoa 0017                   ??_spin 0021                   ??_stop 000C  
                 ??_utoa 000E            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   ?_cycle 0054  
                 ?_inlet 0001         ___llmod@dividend 000E                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   ?_myadc 0001                   ?_motor 0001  
       __end_of___ftpack EE00         __end_of___lltoft E890         __end_of___lwtoft E478  
       __end_of_lcd_init E834                   ___ftge EC1E                   ___wmul E49C  
              ??___ftadd 0030                ??___ftdiv 0021                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 0012                ??___llmod 0016  
              ??___ftsub 003C                ??___fttol 001F                ??___lwdiv 0005  
              ??___lwmod 0005                   _lcd_wr E3D2         __end_of_init_adc E3E8  
                 _button E56A                   clear_0 E61E                   clear_1 E62A  
                 _outlet E404                ??_lcd_dat 0006                ??_lcd_cmd 0006  
                 _status E890                   _strcat E6FE                   _strcpy E740  
                 cycle@c 0054                ??_lcd_str 0009                   ftoa@cp 0049  
  ___ftmul@f3_as_product 0016                   inlet@i 0001                   itoa@cp 0017  
           __pdataCOMRAM 0071                ??_isdigit 0001                   myadc@a 0006  
           __mediumconst FEF0                   motor@m 0001                   tblptrh 000FF7  
                 tblptrl 000FF6                ??_operate 0050                   tblptru 000FF8  
              ??_mydelay 0009                ??_sprintf 0023               __accesstop 0080  
__end_of__initialization E630               ___ftadd@f1 002A               ___ftadd@f2 002D  
             ___ftge@ff1 0036               ___ftge@ff2 0039            ___rparam_used 000001  
             ___ftdiv@f1 001B               ___ftdiv@f2 001E               ___ftdiv@f3 0025  
             ___ftneg@f1 0001               ___ftmul@f1 000C               ___ftmul@f2 000F  
             ___ftsub@f1 0036               ___ftsub@f2 0039               ___fttol@f1 001B  
         __pcstackCOMRAM 0001               ___lltoft@c 0009            __end_of_cycle F2A2  
          __end_of_inlet E3F6            __end_of_myadc E5CA            __end_of_motor E404  
             ___lwtoft@c 0009                  ??_cycle 0056                  ??_inlet 0001  
                ??_myadc 0003                  ??_motor 0001             sprintf@width 002E  
     __size_of_atraso_ms 0036               __pbssBANK0 00D0                  ?___ftge 0036  
                ?___wmul 0001           operate@maxmass 004B                  ?_lcd_wr 0001  
                ?_button 0001                ?___ftpack 0001                ?___lltoft 0009  
                ?_outlet 0001                  ?_status 0001                  ?_strcat 0001  
                ?_strcpy 0001                ?___lwtoft 0009              remaintime@i 001D  
            remaintime@t 0019                ?_lcd_init 0001                ?_init_adc 0001  
                __Hparam 0000                  __Lparam 0000          __size_of___ftge 0090  
                ___ftadd F3B0                  ___ftdiv EEC8                  ___ftneg E430  
                ___lldiv EB14          __size_of___wmul 0026                  ___ftmul EFAE  
                ___llmod E94A                  ___ftsub E63A                  ___fttol F0A2  
                ___lwdiv E786                  ___lwmod E67A        __end_of_atraso_ms E600  
        __size_of_lcd_wr 0008                  __pcinit E600               ??___ftpack 0006  
        __size_of_button 002C               _init_ports E4C2                  __ramtop 1000  
             ??___lltoft 000D               _massindrum 005A                  __ptext0 E478  
                __ptext1 EA1A                  __ptext2 F55C                  __ptext3 F196  
            operate@stat 0051                  __ptext4 E9B0                  __ptext5 FA9E  
                __ptext6 E890                  __ptext7 EE00                  __ptext8 E740  
                __ptext9 E6FE                  _lcd_dat E516                  _lcd_cmd E4EC  
             ??___lwtoft 000C                  _lcd_str EA94          __size_of_outlet 000E  
        __size_of_status 005C          __size_of_strcat 0042          __size_of_strcpy 0046  
                _dpowers FEF1                  _isdigit E412                  _operate FA9E  
                _mydelay E8EC                  _sprintf F772               ??_lcd_init 0007  
   end_of_initialization E630                  ftoa@buf 00D2                  ftoa@rem 0041  
             _remaintime EE00                  itoa@buf 0011               ??_init_adc 0001  
                itoa@val 0013            __Lmediumconst FEF0                  myadc@ch 0005  
        ___lldiv@divisor 0005          ___lldiv@counter 000D                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                  outlet@o 0001  
                status@c 0001                  status@s 0002                  utoa@buf 0008  
                utoa@val 000A                _PORTAbits 000F80                _PORTBbits 000F81  
              _PORTEbits 000F84               lcd_dat@val 0006               lcd_cmd@val 0006  
            ___ftdiv@exp 0028               lcd_str@str 0007              ___ftmul@exp 0015  
         __end_of___ftge ECAE               atraso_ms@i 0003               atraso_ms@j 0005  
         __end_of___wmul E4C2            __pidataCOMRAM E3D0              ?_init_ports 0001  
         __end_of_lcd_wr E3DA           __end_of_button E596           __end_of_outlet E412  
         __end_of_status E8EC           __end_of_strcat E740           __end_of_strcpy E786  
    start_initialization E600               ftoa@status 003F              ?_remaintime 0019  
        ___llmod@divisor 0012          ___llmod@counter 0016                 ??___ftge 003C  
               ??___wmul 0005                 ??_lcd_wr 0001                 ??_button 0001  
               ??_outlet 0001                 ??_status 0002                 ??_strcat 0005  
               ??_strcpy 0005        __size_of___ftpack 00AE        __size_of___lltoft 005C  
            __pbssCOMRAM 005A        __size_of___lwtoft 0024            __pcstackBANK0 0080  
      __size_of_lcd_init 005C              sprintf@flag 0027              sprintf@prec 0030  
    __size_of_init_ports 002A        __size_of_init_adc 000E         ___lwdiv@dividend 0001  
          __pmediumconst FEF0                 ?___ftadd 002A                 ?___ftdiv 001B  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 000C  
               ?___llmod 000E                 ?___ftsub 0036                 ?___fttol 001B  
               ?___lwdiv 0001                 ?___lwmod 0001      __size_of_remaintime 00C8  
               ?_lcd_dat 0001                 ?_lcd_cmd 0001                 ?_lcd_str 0007  
              _atraso_ms E5CA                 ?_isdigit 0001                 ?_operate 004B  
               ?_mydelay 0007          operate@washtime 004E         ___lwdiv@quotient 0005  
               ?_sprintf 0017           __size_of_cycle 010C           __size_of_inlet 000E  
         __size_of_myadc 0034           __size_of_motor 000E           atraso_ms@valor 0001  
         ___wmul@product 0005                 _LATBbits 000F8A                 _LATCbits 000F8B  
               _LATEbits 000F8D               _ADCON0bits 000FC2        ___wmul@multiplier 0001  
             ?_atraso_ms 0001                lcd_wr@val 0001                 __Hrparam 0000  
               __Lrparam 0000         __size_of___ftadd 01AC         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
       __size_of___lwdiv 0052         __size_of___lwmod 0042             ??_init_ports 0001  
               ___ftpack ED52                 ___lltoft E834              _isdigit$919 0002  
               ___lwtoft E454         __size_of_lcd_dat 002A         __size_of_lcd_cmd 002A  
       __size_of_lcd_str 0080               sprintf@val 002A               strcat@from 0003  
       __size_of_isdigit 001E          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
               __ptext10 E8EC                 __ptext11 E56A                 __ptext20 E3F6  
               __ptext12 E540                 __ptext21 EB96                 __ptext13 EA94  
               __ptext30 E94A                 __ptext22 E596                 __ptext14 E516  
               __ptext31 EB14                 __ptext23 E454                 __ptext15 E6BC  
               __ptext40 E7D8                 __ptext32 E834                 __ptext24 EEC8  
               __ptext16 ECAE                 __ptext41 E4EC                 __ptext33 F0A2  
               __ptext25 E3E8                 __ptext17 E67A                 __ptext42 E3D2  
               __ptext34 E63A                 __ptext26 F2A2                 __ptext18 E786  
               __ptext43 E5CA                 __ptext35 F3B0                 __ptext27 F772  
               __ptext19 E404                 __ptext44 E4C2                 __ptext36 E430  
               __ptext28 E412                 __ptext45 E3DA                 __ptext37 EFAE  
               __ptext29 E49C                 __ptext38 ED52                 __ptext39 EC1E  
       __size_of_operate 0452         __size_of_mydelay 005E                 _lcd_init E7D8  
       __size_of_sprintf 032C             ??_remaintime 001B               strcpy@from 0003  
               _init_adc E3DA            __size_of_main 0024            __size_of_ftoa 010E  
          __size_of_mass 0088            __size_of_lock 002A            __size_of_menu 0216  
          __size_of_itoa 0042            __size_of_spin 006A            __size_of_stop 007A  
          __size_of_utoa 00A4       __end_of_init_ports E4EC                mydelay@ii 000A  
               lcd_str@i 000B       __end_of_remaintime EEC8              ??_atraso_ms 0003  
               menu@menu 0080                 itoa@base 0015                 isdigit@c 0003  
              sprintf@ap 0028                sprintf@sp 0017         ___lwmod@dividend 0001  
       ___lldiv@dividend 0001                 operate@s 0053                 mydelay@n 0007  
               utoa@base 000C                 sprintf@c 0032                 sprintf@f 0019  
               strcat@cp 0005                 strcat@to 0001         ___lldiv@quotient 0009  
        ___lwmod@divisor 0003                 strcpy@cp 0005                 strcpy@to 0001  
        ___lwmod@counter 0005              _speedofdrum 005D  
